//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a Reverse POCO Gen tool.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DigitalCondomiumModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data;
    using System.Data.SqlClient;

    public partial class DigitalCondomiumEntities : DbContext
    {
        public DigitalCondomiumEntities()
            : base("name=DigitalCondomiumEntities")
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            //throw new UnintentionalCodeFirstException();
        }

        public virtual int SP_DGC_ApprovalAssetPurchase(Nullable<Int64> assetPurchaseId, string approvedBy, string purchaseComments, ObjectParameter errorCode)
        {

            var assetPurchaseIdParameter = assetPurchaseId.HasValue ?
                new SqlParameter("AssetPurchaseId", assetPurchaseId) :
                new SqlParameter("AssetPurchaseId", SqlDbType.BigInt);

           var approvedByParameter = new SqlParameter("ApprovedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(approvedBy))
           {
               approvedByParameter.IsNullable = true;
               approvedByParameter.Value = DBNull.Value;
           }
           else
           {
               approvedByParameter.Value = approvedBy;
           }

           var purchaseCommentsParameter = new SqlParameter("PurchaseComments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(purchaseComments))
           {
               purchaseCommentsParameter.IsNullable = true;
               purchaseCommentsParameter.Value = DBNull.Value;
           }
           else
           {
               purchaseCommentsParameter.Value = purchaseComments;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_ApprovalAssetPurchase @AssetPurchaseId, @ApprovedBy, @PurchaseComments, @ErrorCode OUT", assetPurchaseIdParameter, approvedByParameter, purchaseCommentsParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_ApprovalRFQQuotes(Nullable<Int64> rFQuotesID, Nullable<Int32> minutesOfMeetingId, string approvedBy, string comment, ObjectParameter errorCode)
        {

            var rFQuotesIDParameter = rFQuotesID.HasValue ?
                new SqlParameter("RFQuotesID", rFQuotesID) :
                new SqlParameter("RFQuotesID", SqlDbType.BigInt);

            var minutesOfMeetingIdParameter = minutesOfMeetingId.HasValue ?
                new SqlParameter("MinutesOfMeetingId", minutesOfMeetingId) :
                new SqlParameter("MinutesOfMeetingId", SqlDbType.Int);

           var approvedByParameter = new SqlParameter("ApprovedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(approvedBy))
           {
               approvedByParameter.IsNullable = true;
               approvedByParameter.Value = DBNull.Value;
           }
           else
           {
               approvedByParameter.Value = approvedBy;
           }

           var commentParameter = new SqlParameter("Comment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comment))
           {
               commentParameter.IsNullable = true;
               commentParameter.Value = DBNull.Value;
           }
           else
           {
               commentParameter.Value = comment;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_ApprovalRFQQuotes @RFQuotesID, @MinutesOfMeetingId, @ApprovedBy, @Comment, @ErrorCode OUT", rFQuotesIDParameter, minutesOfMeetingIdParameter, approvedByParameter, commentParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_ApprovalVendorInvoice(Nullable<Int64> vendorInvoiceId, string approvedBy, string invoiceComments, ObjectParameter errorCode)
        {

            var vendorInvoiceIdParameter = vendorInvoiceId.HasValue ?
                new SqlParameter("VendorInvoiceId", vendorInvoiceId) :
                new SqlParameter("VendorInvoiceId", SqlDbType.BigInt);

           var approvedByParameter = new SqlParameter("ApprovedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(approvedBy))
           {
               approvedByParameter.IsNullable = true;
               approvedByParameter.Value = DBNull.Value;
           }
           else
           {
               approvedByParameter.Value = approvedBy;
           }

           var invoiceCommentsParameter = new SqlParameter("InvoiceComments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(invoiceComments))
           {
               invoiceCommentsParameter.IsNullable = true;
               invoiceCommentsParameter.Value = DBNull.Value;
           }
           else
           {
               invoiceCommentsParameter.Value = invoiceComments;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_ApprovalVendorInvoice @VendorInvoiceId, @ApprovedBy, @InvoiceComments, @ErrorCode OUT", vendorInvoiceIdParameter, approvedByParameter, invoiceCommentsParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_ApprovalWorkOrder(Nullable<Int32> workOrderId, Nullable<Int32> minutesOfMeetingId, Nullable<Int32> statusID, string actionTakenBy, Nullable<Int64> actionTakenByUserid, string comment, ObjectParameter errorCode)
        {

            var workOrderIdParameter = workOrderId.HasValue ?
                new SqlParameter("WorkOrderId", workOrderId) :
                new SqlParameter("WorkOrderId", SqlDbType.Int);

            var minutesOfMeetingIdParameter = minutesOfMeetingId.HasValue ?
                new SqlParameter("MinutesOfMeetingId", minutesOfMeetingId) :
                new SqlParameter("MinutesOfMeetingId", SqlDbType.Int);

            var statusIDParameter = statusID.HasValue ?
                new SqlParameter("StatusID", statusID) :
                new SqlParameter("StatusID", SqlDbType.Int);

           var actionTakenByParameter = new SqlParameter("ActionTakenBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(actionTakenBy))
           {
               actionTakenByParameter.IsNullable = true;
               actionTakenByParameter.Value = DBNull.Value;
           }
           else
           {
               actionTakenByParameter.Value = actionTakenBy;
           }

            var actionTakenByUseridParameter = actionTakenByUserid.HasValue ?
                new SqlParameter("ActionTakenByUserid", actionTakenByUserid) :
                new SqlParameter("ActionTakenByUserid", SqlDbType.BigInt);

           var commentParameter = new SqlParameter("Comment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comment))
           {
               commentParameter.IsNullable = true;
               commentParameter.Value = DBNull.Value;
           }
           else
           {
               commentParameter.Value = comment;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_ApprovalWorkOrder @WorkOrderId, @MinutesOfMeetingId, @StatusID, @ActionTakenBy, @ActionTakenByUserid, @Comment, @ErrorCode OUT", workOrderIdParameter, minutesOfMeetingIdParameter, statusIDParameter, actionTakenByParameter, actionTakenByUseridParameter, commentParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_ApproveOrRejectDepreciations(Nullable<Int32> depreciationRequestId, Nullable<Int32> statusId, string depreciatedBy, string comments, ObjectParameter errorCode, Nullable<Int64> actionTakenByUserId)
        {

            var depreciationRequestIdParameter = depreciationRequestId.HasValue ?
                new SqlParameter("DepreciationRequestId", depreciationRequestId) :
                new SqlParameter("DepreciationRequestId", SqlDbType.Int);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

           var depreciatedByParameter = new SqlParameter("DepreciatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(depreciatedBy))
           {
               depreciatedByParameter.IsNullable = true;
               depreciatedByParameter.Value = DBNull.Value;
           }
           else
           {
               depreciatedByParameter.Value = depreciatedBy;
           }

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_ApproveOrRejectDepreciations @DepreciationRequestId, @StatusId, @DepreciatedBy, @Comments, @ErrorCode OUT, @ActionTakenByUserId", depreciationRequestIdParameter, statusIdParameter, depreciatedByParameter, commentsParameter, errorCodeParameter, actionTakenByUserIdParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_Asset_LedgerCreate_Mapping(Nullable<Int64> assetPurchaseId, Nullable<Int32> aPurchaseActionId, Nullable<Int32> purchaseStatusId, string updatedBy, ObjectParameter errorCode)
        {

            var assetPurchaseIdParameter = assetPurchaseId.HasValue ?
                new SqlParameter("AssetPurchaseId", assetPurchaseId) :
                new SqlParameter("AssetPurchaseId", SqlDbType.BigInt);

            var aPurchaseActionIdParameter = aPurchaseActionId.HasValue ?
                new SqlParameter("APurchaseActionId", aPurchaseActionId) :
                new SqlParameter("APurchaseActionId", SqlDbType.Int);

            var purchaseStatusIdParameter = purchaseStatusId.HasValue ?
                new SqlParameter("PurchaseStatusId", purchaseStatusId) :
                new SqlParameter("PurchaseStatusId", SqlDbType.Int);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_Asset_LedgerCreate_Mapping @AssetPurchaseId, @APurchaseActionId, @PurchaseStatusId, @UpdatedBy, @ErrorCode OUT", assetPurchaseIdParameter, aPurchaseActionIdParameter, purchaseStatusIdParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_AssetPurchaseOrder_PostToLedger(Nullable<Int64> assetPurchaseId, string updatedBy, ObjectParameter errorCode)
        {

            var assetPurchaseIdParameter = assetPurchaseId.HasValue ?
                new SqlParameter("AssetPurchaseId", assetPurchaseId) :
                new SqlParameter("AssetPurchaseId", SqlDbType.BigInt);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_AssetPurchaseOrder_PostToLedger @AssetPurchaseId, @UpdatedBy, @ErrorCode OUT", assetPurchaseIdParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_AssetPurchasePaymentPostToLedger(Nullable<Int32> aPurchaseActionId, Nullable<Int64> assetPurchaseId, string updatedBy, ObjectParameter errorCode)
        {

            var aPurchaseActionIdParameter = aPurchaseActionId.HasValue ?
                new SqlParameter("APurchaseActionId", aPurchaseActionId) :
                new SqlParameter("APurchaseActionId", SqlDbType.Int);

            var assetPurchaseIdParameter = assetPurchaseId.HasValue ?
                new SqlParameter("AssetPurchaseId", assetPurchaseId) :
                new SqlParameter("AssetPurchaseId", SqlDbType.BigInt);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_AssetPurchasePaymentPostToLedger @APurchaseActionId, @AssetPurchaseId, @UpdatedBy, @ErrorCode OUT", aPurchaseActionIdParameter, assetPurchaseIdParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_CancelCondoFacilitiesBooking(Nullable<Int32> condoFacilityBookingId, string cancelComments, string cancelledBy, ObjectParameter errorCode, Nullable<Int32> previousStatusID)
        {

            var condoFacilityBookingIdParameter = condoFacilityBookingId.HasValue ?
                new SqlParameter("CondoFacilityBookingId", condoFacilityBookingId) :
                new SqlParameter("CondoFacilityBookingId", SqlDbType.Int);

           var cancelCommentsParameter = new SqlParameter("CancelComments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelComments))
           {
               cancelCommentsParameter.IsNullable = true;
               cancelCommentsParameter.Value = DBNull.Value;
           }
           else
           {
               cancelCommentsParameter.Value = cancelComments;
           }

           var cancelledByParameter = new SqlParameter("CancelledBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelledBy))
           {
               cancelledByParameter.IsNullable = true;
               cancelledByParameter.Value = DBNull.Value;
           }
           else
           {
               cancelledByParameter.Value = cancelledBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_CancelCondoFacilitiesBooking @CondoFacilityBookingId, @CancelComments, @CancelledBy, @ErrorCode OUT, @PreviousStatusID", condoFacilityBookingIdParameter, cancelCommentsParameter, cancelledByParameter, errorCodeParameter, previousStatusIDParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_CancelDiscountSetUp(Nullable<Int32> discountSetUpId, string cancelledBy, string comment)
        {

            var discountSetUpIdParameter = discountSetUpId.HasValue ?
                new SqlParameter("DiscountSetUpId", discountSetUpId) :
                new SqlParameter("DiscountSetUpId", SqlDbType.Int);

           var cancelledByParameter = new SqlParameter("CancelledBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelledBy))
           {
               cancelledByParameter.IsNullable = true;
               cancelledByParameter.Value = DBNull.Value;
           }
           else
           {
               cancelledByParameter.Value = cancelledBy;
           }

           var commentParameter = new SqlParameter("Comment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comment))
           {
               commentParameter.IsNullable = true;
               commentParameter.Value = DBNull.Value;
           }
           else
           {
               commentParameter.Value = comment;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_CancelDiscountSetUp @DiscountSetUpId, @CancelledBy, @Comment", discountSetUpIdParameter, cancelledByParameter, commentParameter);


            return retVal;

        }
        public virtual int SP_DGC_CancelFacilitiesBooking(Nullable<Int64> facilitiesId, string cancelComments, string cancelledBy, ObjectParameter errorCode, Nullable<Int32> previousStatusID)
        {

            var facilitiesIdParameter = facilitiesId.HasValue ?
                new SqlParameter("FacilitiesId", facilitiesId) :
                new SqlParameter("FacilitiesId", SqlDbType.BigInt);

           var cancelCommentsParameter = new SqlParameter("CancelComments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelComments))
           {
               cancelCommentsParameter.IsNullable = true;
               cancelCommentsParameter.Value = DBNull.Value;
           }
           else
           {
               cancelCommentsParameter.Value = cancelComments;
           }

           var cancelledByParameter = new SqlParameter("CancelledBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelledBy))
           {
               cancelledByParameter.IsNullable = true;
               cancelledByParameter.Value = DBNull.Value;
           }
           else
           {
               cancelledByParameter.Value = cancelledBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_CancelFacilitiesBooking @FacilitiesId, @CancelComments, @CancelledBy, @ErrorCode OUT, @PreviousStatusID", facilitiesIdParameter, cancelCommentsParameter, cancelledByParameter, errorCodeParameter, previousStatusIDParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_CancelledVehicleParkingRequest(Nullable<Int64> vehicleParkingRequestID, string cancelledComment, string cancelledBy, ObjectParameter errorCode, Nullable<Int32> previousStatusId)
        {

            var vehicleParkingRequestIDParameter = vehicleParkingRequestID.HasValue ?
                new SqlParameter("VehicleParkingRequestID", vehicleParkingRequestID) :
                new SqlParameter("VehicleParkingRequestID", SqlDbType.BigInt);

           var cancelledCommentParameter = new SqlParameter("CancelledComment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelledComment))
           {
               cancelledCommentParameter.IsNullable = true;
               cancelledCommentParameter.Value = DBNull.Value;
           }
           else
           {
               cancelledCommentParameter.Value = cancelledComment;
           }

           var cancelledByParameter = new SqlParameter("CancelledBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelledBy))
           {
               cancelledByParameter.IsNullable = true;
               cancelledByParameter.Value = DBNull.Value;
           }
           else
           {
               cancelledByParameter.Value = cancelledBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var previousStatusIdParameter = previousStatusId.HasValue ?
                new SqlParameter("PreviousStatusId", previousStatusId) :
                new SqlParameter("PreviousStatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_CancelledVehicleParkingRequest @VehicleParkingRequestID, @CancelledComment, @CancelledBy, @ErrorCode OUT, @PreviousStatusId", vehicleParkingRequestIDParameter, cancelledCommentParameter, cancelledByParameter, errorCodeParameter, previousStatusIdParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_CancelledVisitorRequest(Nullable<Int32> visitorRequestId, string cancelledBy, string cancelledComments, ObjectParameter errorCode, Nullable<Int32> previousStatusId)
        {

            var visitorRequestIdParameter = visitorRequestId.HasValue ?
                new SqlParameter("VisitorRequestId", visitorRequestId) :
                new SqlParameter("VisitorRequestId", SqlDbType.Int);

           var cancelledByParameter = new SqlParameter("CancelledBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelledBy))
           {
               cancelledByParameter.IsNullable = true;
               cancelledByParameter.Value = DBNull.Value;
           }
           else
           {
               cancelledByParameter.Value = cancelledBy;
           }

           var cancelledCommentsParameter = new SqlParameter("CancelledComments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelledComments))
           {
               cancelledCommentsParameter.IsNullable = true;
               cancelledCommentsParameter.Value = DBNull.Value;
           }
           else
           {
               cancelledCommentsParameter.Value = cancelledComments;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var previousStatusIdParameter = previousStatusId.HasValue ?
                new SqlParameter("PreviousStatusId", previousStatusId) :
                new SqlParameter("PreviousStatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_CancelledVisitorRequest @VisitorRequestId, @CancelledBy, @CancelledComments, @ErrorCode OUT, @PreviousStatusId", visitorRequestIdParameter, cancelledByParameter, cancelledCommentsParameter, errorCodeParameter, previousStatusIdParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_CancelPurchseInvoice(Nullable<Int64> purchaseInvoiceId, string cancelReason, Nullable<Int64> cancelledByUserId, string cancelledBy, ObjectParameter errorCode)
        {

            var purchaseInvoiceIdParameter = purchaseInvoiceId.HasValue ?
                new SqlParameter("PurchaseInvoiceId", purchaseInvoiceId) :
                new SqlParameter("PurchaseInvoiceId", SqlDbType.BigInt);

           var cancelReasonParameter = new SqlParameter("CancelReason", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelReason))
           {
               cancelReasonParameter.IsNullable = true;
               cancelReasonParameter.Value = DBNull.Value;
           }
           else
           {
               cancelReasonParameter.Value = cancelReason;
           }

            var cancelledByUserIdParameter = cancelledByUserId.HasValue ?
                new SqlParameter("CancelledByUserId", cancelledByUserId) :
                new SqlParameter("CancelledByUserId", SqlDbType.BigInt);

           var cancelledByParameter = new SqlParameter("CancelledBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelledBy))
           {
               cancelledByParameter.IsNullable = true;
               cancelledByParameter.Value = DBNull.Value;
           }
           else
           {
               cancelledByParameter.Value = cancelledBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_CancelPurchseInvoice @PurchaseInvoiceId, @CancelReason, @CancelledByUserId, @CancelledBy, @ErrorCode OUT", purchaseInvoiceIdParameter, cancelReasonParameter, cancelledByUserIdParameter, cancelledByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_CancelRFQDetails(Nullable<Int64> rFQID, string cancelledBy, ObjectParameter errorCode, Nullable<Int32> previousStatusId)
        {

            var rFQIDParameter = rFQID.HasValue ?
                new SqlParameter("RFQID", rFQID) :
                new SqlParameter("RFQID", SqlDbType.BigInt);

           var cancelledByParameter = new SqlParameter("CancelledBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelledBy))
           {
               cancelledByParameter.IsNullable = true;
               cancelledByParameter.Value = DBNull.Value;
           }
           else
           {
               cancelledByParameter.Value = cancelledBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var previousStatusIdParameter = previousStatusId.HasValue ?
                new SqlParameter("PreviousStatusId", previousStatusId) :
                new SqlParameter("PreviousStatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_CancelRFQDetails @RFQID, @CancelledBy, @ErrorCode OUT, @PreviousStatusId", rFQIDParameter, cancelledByParameter, errorCodeParameter, previousStatusIdParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_CancelRFQQuotes(Nullable<Int64> rFQuotesID, string cancelledBy, string comment)
        {

            var rFQuotesIDParameter = rFQuotesID.HasValue ?
                new SqlParameter("RFQuotesID", rFQuotesID) :
                new SqlParameter("RFQuotesID", SqlDbType.BigInt);

           var cancelledByParameter = new SqlParameter("CancelledBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelledBy))
           {
               cancelledByParameter.IsNullable = true;
               cancelledByParameter.Value = DBNull.Value;
           }
           else
           {
               cancelledByParameter.Value = cancelledBy;
           }

           var commentParameter = new SqlParameter("Comment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comment))
           {
               commentParameter.IsNullable = true;
               commentParameter.Value = DBNull.Value;
           }
           else
           {
               commentParameter.Value = comment;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_CancelRFQQuotes @RFQuotesID, @CancelledBy, @Comment", rFQuotesIDParameter, cancelledByParameter, commentParameter);


            return retVal;

        }
        public virtual int SP_DGC_CancelStockCategory(Nullable<Int32> stockCategoryId, string cancelledBy, string comment)
        {

            var stockCategoryIdParameter = stockCategoryId.HasValue ?
                new SqlParameter("StockCategoryId", stockCategoryId) :
                new SqlParameter("StockCategoryId", SqlDbType.Int);

           var cancelledByParameter = new SqlParameter("CancelledBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelledBy))
           {
               cancelledByParameter.IsNullable = true;
               cancelledByParameter.Value = DBNull.Value;
           }
           else
           {
               cancelledByParameter.Value = cancelledBy;
           }

           var commentParameter = new SqlParameter("Comment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comment))
           {
               commentParameter.IsNullable = true;
               commentParameter.Value = DBNull.Value;
           }
           else
           {
               commentParameter.Value = comment;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_CancelStockCategory @StockCategoryId, @CancelledBy, @Comment", stockCategoryIdParameter, cancelledByParameter, commentParameter);


            return retVal;

        }
        public virtual int SP_DGC_CancelTaxSetUp(Nullable<Int32> taxSetUpId, string cancelledBy, string comment)
        {

            var taxSetUpIdParameter = taxSetUpId.HasValue ?
                new SqlParameter("TaxSetUpId", taxSetUpId) :
                new SqlParameter("TaxSetUpId", SqlDbType.Int);

           var cancelledByParameter = new SqlParameter("CancelledBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelledBy))
           {
               cancelledByParameter.IsNullable = true;
               cancelledByParameter.Value = DBNull.Value;
           }
           else
           {
               cancelledByParameter.Value = cancelledBy;
           }

           var commentParameter = new SqlParameter("Comment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comment))
           {
               commentParameter.IsNullable = true;
               commentParameter.Value = DBNull.Value;
           }
           else
           {
               commentParameter.Value = comment;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_CancelTaxSetUp @TaxSetUpId, @CancelledBy, @Comment", taxSetUpIdParameter, cancelledByParameter, commentParameter);


            return retVal;

        }
        public virtual int SP_DGC_CancelUtilityInvoice(Nullable<Int64> utilityInvoiceId, string cancelReason, Nullable<Int64> cancelledByUserId, string cancelledBy, ObjectParameter errorCode)
        {

            var utilityInvoiceIdParameter = utilityInvoiceId.HasValue ?
                new SqlParameter("UtilityInvoiceId", utilityInvoiceId) :
                new SqlParameter("UtilityInvoiceId", SqlDbType.BigInt);

           var cancelReasonParameter = new SqlParameter("CancelReason", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelReason))
           {
               cancelReasonParameter.IsNullable = true;
               cancelReasonParameter.Value = DBNull.Value;
           }
           else
           {
               cancelReasonParameter.Value = cancelReason;
           }

            var cancelledByUserIdParameter = cancelledByUserId.HasValue ?
                new SqlParameter("CancelledByUserId", cancelledByUserId) :
                new SqlParameter("CancelledByUserId", SqlDbType.BigInt);

           var cancelledByParameter = new SqlParameter("CancelledBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelledBy))
           {
               cancelledByParameter.IsNullable = true;
               cancelledByParameter.Value = DBNull.Value;
           }
           else
           {
               cancelledByParameter.Value = cancelledBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_CancelUtilityInvoice @UtilityInvoiceId, @CancelReason, @CancelledByUserId, @CancelledBy, @ErrorCode OUT", utilityInvoiceIdParameter, cancelReasonParameter, cancelledByUserIdParameter, cancelledByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_CancelVendorInvoice(Nullable<Int64> vendorInvoiceId, string cancelReason, Nullable<Int64> cancelledByUserId, string cancelledBy, ObjectParameter errorCode)
        {

            var vendorInvoiceIdParameter = vendorInvoiceId.HasValue ?
                new SqlParameter("VendorInvoiceId", vendorInvoiceId) :
                new SqlParameter("VendorInvoiceId", SqlDbType.BigInt);

           var cancelReasonParameter = new SqlParameter("CancelReason", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelReason))
           {
               cancelReasonParameter.IsNullable = true;
               cancelReasonParameter.Value = DBNull.Value;
           }
           else
           {
               cancelReasonParameter.Value = cancelReason;
           }

            var cancelledByUserIdParameter = cancelledByUserId.HasValue ?
                new SqlParameter("CancelledByUserId", cancelledByUserId) :
                new SqlParameter("CancelledByUserId", SqlDbType.BigInt);

           var cancelledByParameter = new SqlParameter("CancelledBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelledBy))
           {
               cancelledByParameter.IsNullable = true;
               cancelledByParameter.Value = DBNull.Value;
           }
           else
           {
               cancelledByParameter.Value = cancelledBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_CancelVendorInvoice @VendorInvoiceId, @CancelReason, @CancelledByUserId, @CancelledBy, @ErrorCode OUT", vendorInvoiceIdParameter, cancelReasonParameter, cancelledByUserIdParameter, cancelledByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_CancelWorkOrdersDetails(Nullable<Int64> workOrderID, string cancelledBy, ObjectParameter errorCode, Nullable<Int32> previousStatusId)
        {

            var workOrderIDParameter = workOrderID.HasValue ?
                new SqlParameter("WorkOrderID", workOrderID) :
                new SqlParameter("WorkOrderID", SqlDbType.BigInt);

           var cancelledByParameter = new SqlParameter("CancelledBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelledBy))
           {
               cancelledByParameter.IsNullable = true;
               cancelledByParameter.Value = DBNull.Value;
           }
           else
           {
               cancelledByParameter.Value = cancelledBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var previousStatusIdParameter = previousStatusId.HasValue ?
                new SqlParameter("PreviousStatusId", previousStatusId) :
                new SqlParameter("PreviousStatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_CancelWorkOrdersDetails @WorkOrderID, @CancelledBy, @ErrorCode OUT, @PreviousStatusId", workOrderIDParameter, cancelledByParameter, errorCodeParameter, previousStatusIdParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_CheckUserLoginCredentials(string userLogIn, string userPassword, ObjectParameter userId)
        {

           var userLogInParameter = new SqlParameter("UserLogIn", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userLogIn))
           {
               userLogInParameter.IsNullable = true;
               userLogInParameter.Value = DBNull.Value;
           }
           else
           {
               userLogInParameter.Value = userLogIn;
           }

           var userPasswordParameter = new SqlParameter("UserPassword", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userPassword))
           {
               userPasswordParameter.IsNullable = true;
               userPasswordParameter.Value = DBNull.Value;
           }
           else
           {
               userPasswordParameter.Value = userPassword;
           }

           var userIdParameter = new SqlParameter("UserId", SqlDbType.BigInt);
               userIdParameter.Direction = System.Data.ParameterDirection.Output;
               userIdParameter.Value = userId != null ? userId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_CheckUserLoginCredentials @UserLogIn, @UserPassword, @UserId OUT", userLogInParameter, userPasswordParameter, userIdParameter);

            userId.Value = userIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_CommercialUnitInvoice_PaymentByBalance(Nullable<Int32> unitId, Nullable<Int32> shopRegistrationId, string isFullPaid, Nullable<Decimal> paidAmount, string comments, string paymentMode, string bankName, string chequeNumber, string additionalReferencePath, string paymentReciptPath, Nullable<Int64> paidByUserId, string paidBy, Nullable<Int64> recievedByUserId, Nullable<DateTime> chequeDate, Nullable<DateTime> actualPaymentDate, string recievedBy, Nullable<Int32> managementAccountId, ObjectParameter errorCode)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var shopRegistrationIdParameter = shopRegistrationId.HasValue ?
                new SqlParameter("ShopRegistrationId", shopRegistrationId) :
                new SqlParameter("ShopRegistrationId", SqlDbType.Int);

           var isFullPaidParameter = new SqlParameter("IsFullPaid", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isFullPaid))
           {
               isFullPaidParameter.IsNullable = true;
               isFullPaidParameter.Value = DBNull.Value;
           }
           else
           {
               isFullPaidParameter.Value = isFullPaid;
           }

            var paidAmountParameter = paidAmount.HasValue ?
                new SqlParameter("PaidAmount", paidAmount) :
                new SqlParameter("PaidAmount", SqlDbType.Decimal);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var paymentModeParameter = new SqlParameter("PaymentMode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(paymentMode))
           {
               paymentModeParameter.IsNullable = true;
               paymentModeParameter.Value = DBNull.Value;
           }
           else
           {
               paymentModeParameter.Value = paymentMode;
           }

           var bankNameParameter = new SqlParameter("BankName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(bankName))
           {
               bankNameParameter.IsNullable = true;
               bankNameParameter.Value = DBNull.Value;
           }
           else
           {
               bankNameParameter.Value = bankName;
           }

           var chequeNumberParameter = new SqlParameter("ChequeNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(chequeNumber))
           {
               chequeNumberParameter.IsNullable = true;
               chequeNumberParameter.Value = DBNull.Value;
           }
           else
           {
               chequeNumberParameter.Value = chequeNumber;
           }

           var additionalReferencePathParameter = new SqlParameter("AdditionalReferencePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferencePath))
           {
               additionalReferencePathParameter.IsNullable = true;
               additionalReferencePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferencePathParameter.Value = additionalReferencePath;
           }

           var paymentReciptPathParameter = new SqlParameter("PaymentReciptPath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(paymentReciptPath))
           {
               paymentReciptPathParameter.IsNullable = true;
               paymentReciptPathParameter.Value = DBNull.Value;
           }
           else
           {
               paymentReciptPathParameter.Value = paymentReciptPath;
           }

            var paidByUserIdParameter = paidByUserId.HasValue ?
                new SqlParameter("PaidByUserId", paidByUserId) :
                new SqlParameter("PaidByUserId", SqlDbType.BigInt);

           var paidByParameter = new SqlParameter("PaidBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(paidBy))
           {
               paidByParameter.IsNullable = true;
               paidByParameter.Value = DBNull.Value;
           }
           else
           {
               paidByParameter.Value = paidBy;
           }

            var recievedByUserIdParameter = recievedByUserId.HasValue ?
                new SqlParameter("RecievedByUserId", recievedByUserId) :
                new SqlParameter("RecievedByUserId", SqlDbType.BigInt);

            var chequeDateParameter = chequeDate.HasValue ?
                new SqlParameter("ChequeDate", chequeDate) :
                new SqlParameter("ChequeDate", SqlDbType.DateTime);

            var actualPaymentDateParameter = actualPaymentDate.HasValue ?
                new SqlParameter("ActualPaymentDate", actualPaymentDate) :
                new SqlParameter("ActualPaymentDate", SqlDbType.DateTime);

           var recievedByParameter = new SqlParameter("RecievedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(recievedBy))
           {
               recievedByParameter.IsNullable = true;
               recievedByParameter.Value = DBNull.Value;
           }
           else
           {
               recievedByParameter.Value = recievedBy;
           }

            var managementAccountIdParameter = managementAccountId.HasValue ?
                new SqlParameter("ManagementAccountId", managementAccountId) :
                new SqlParameter("ManagementAccountId", SqlDbType.Int);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_CommercialUnitInvoice_PaymentByBalance @UnitId, @ShopRegistrationId, @IsFullPaid, @PaidAmount, @Comments, @PaymentMode, @BankName, @ChequeNumber, @AdditionalReferencePath, @PaymentReciptPath, @PaidByUserId, @PaidBy, @RecievedByUserId, @ChequeDate, @ActualPaymentDate, @RecievedBy, @ManagementAccountId, @ErrorCode OUT", unitIdParameter, shopRegistrationIdParameter, isFullPaidParameter, paidAmountParameter, commentsParameter, paymentModeParameter, bankNameParameter, chequeNumberParameter, additionalReferencePathParameter, paymentReciptPathParameter, paidByUserIdParameter, paidByParameter, recievedByUserIdParameter, chequeDateParameter, actualPaymentDateParameter, recievedByParameter, managementAccountIdParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_CommercialUnitInvoiceDuesummerybyBillcode_Result> SP_DGC_CommercialUnitInvoiceDuesummerybyBillcode(Nullable<Int32> unitId, string billCode)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

           var billCodeParameter = new SqlParameter("BillCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(billCode))
           {
               billCodeParameter.IsNullable = true;
               billCodeParameter.Value = DBNull.Value;
           }
           else
           {
               billCodeParameter.Value = billCode;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_CommercialUnitInvoiceDuesummerybyBillcode_Result>("SP_DGC_CommercialUnitInvoiceDuesummerybyBillcode @UnitId, @BillCode", unitIdParameter, billCodeParameter);


            return retVal;

        }
        public virtual int SP_DGC_DeactivateAsset(Nullable<Int32> assetId, string deActiveComment, string deActivatedBy, ObjectParameter errorCode)
        {

            var assetIdParameter = assetId.HasValue ?
                new SqlParameter("AssetId", assetId) :
                new SqlParameter("AssetId", SqlDbType.Int);

           var deActiveCommentParameter = new SqlParameter("DeActiveComment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deActiveComment))
           {
               deActiveCommentParameter.IsNullable = true;
               deActiveCommentParameter.Value = DBNull.Value;
           }
           else
           {
               deActiveCommentParameter.Value = deActiveComment;
           }

           var deActivatedByParameter = new SqlParameter("DeActivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deActivatedBy))
           {
               deActivatedByParameter.IsNullable = true;
               deActivatedByParameter.Value = DBNull.Value;
           }
           else
           {
               deActivatedByParameter.Value = deActivatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeactivateAsset @AssetId, @DeActiveComment, @DeActivatedBy, @ErrorCode OUT", assetIdParameter, deActiveCommentParameter, deActivatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeactivateCommitteeMember(Nullable<Int64> commiteeMemberId, string deletedBy, ObjectParameter errorCode)
        {

            var commiteeMemberIdParameter = commiteeMemberId.HasValue ?
                new SqlParameter("CommiteeMemberId", commiteeMemberId) :
                new SqlParameter("CommiteeMemberId", SqlDbType.BigInt);

           var deletedByParameter = new SqlParameter("DeletedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBy))
           {
               deletedByParameter.IsNullable = true;
               deletedByParameter.Value = DBNull.Value;
           }
           else
           {
               deletedByParameter.Value = deletedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeactivateCommitteeMember @CommiteeMemberId, @DeletedBy, @ErrorCode OUT", commiteeMemberIdParameter, deletedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeActivateParkingSlotSetting(Nullable<Int32> vehicleSlotId, string deletedBy, ObjectParameter errorCode)
        {

            var vehicleSlotIdParameter = vehicleSlotId.HasValue ?
                new SqlParameter("VehicleSlotId", vehicleSlotId) :
                new SqlParameter("VehicleSlotId", SqlDbType.Int);

           var deletedByParameter = new SqlParameter("DeletedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBy))
           {
               deletedByParameter.IsNullable = true;
               deletedByParameter.Value = DBNull.Value;
           }
           else
           {
               deletedByParameter.Value = deletedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeActivateParkingSlotSetting @VehicleSlotId, @DeletedBy, @ErrorCode OUT", vehicleSlotIdParameter, deletedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeActivateUnitMember(Nullable<Int64> unitOccupiedFamilyMemberId, string deactivatedBy, string comments, ObjectParameter errorCode)
        {

            var unitOccupiedFamilyMemberIdParameter = unitOccupiedFamilyMemberId.HasValue ?
                new SqlParameter("UnitOccupiedFamilyMemberId", unitOccupiedFamilyMemberId) :
                new SqlParameter("UnitOccupiedFamilyMemberId", SqlDbType.BigInt);

           var deactivatedByParameter = new SqlParameter("DeactivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deactivatedBy))
           {
               deactivatedByParameter.IsNullable = true;
               deactivatedByParameter.Value = DBNull.Value;
           }
           else
           {
               deactivatedByParameter.Value = deactivatedBy;
           }

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeActivateUnitMember @UnitOccupiedFamilyMemberId, @DeactivatedBy, @Comments, @ErrorCode OUT", unitOccupiedFamilyMemberIdParameter, deactivatedByParameter, commentsParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeActivateUnitMemberAccessGood(Nullable<Int64> accessGoodsRequestId, string aGRIssueCardIds, string deactivatedBy, Nullable<Int64> deactivatedByUserId, string comments, ObjectParameter errorCode, Nullable<DateTime> todaysClientDate)
        {

            var accessGoodsRequestIdParameter = accessGoodsRequestId.HasValue ?
                new SqlParameter("AccessGoodsRequestId", accessGoodsRequestId) :
                new SqlParameter("AccessGoodsRequestId", SqlDbType.BigInt);

           var aGRIssueCardIdsParameter = new SqlParameter("AGRIssueCardIds", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(aGRIssueCardIds))
           {
               aGRIssueCardIdsParameter.IsNullable = true;
               aGRIssueCardIdsParameter.Value = DBNull.Value;
           }
           else
           {
               aGRIssueCardIdsParameter.Value = aGRIssueCardIds;
           }

           var deactivatedByParameter = new SqlParameter("DeactivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deactivatedBy))
           {
               deactivatedByParameter.IsNullable = true;
               deactivatedByParameter.Value = DBNull.Value;
           }
           else
           {
               deactivatedByParameter.Value = deactivatedBy;
           }

            var deactivatedByUserIdParameter = deactivatedByUserId.HasValue ?
                new SqlParameter("DeactivatedByUserId", deactivatedByUserId) :
                new SqlParameter("DeactivatedByUserId", SqlDbType.BigInt);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeActivateUnitMemberAccessGood @AccessGoodsRequestId, @AGRIssueCardIds, @DeactivatedBy, @DeactivatedByUserId, @Comments, @ErrorCode OUT, @TodaysClientDate", accessGoodsRequestIdParameter, aGRIssueCardIdsParameter, deactivatedByParameter, deactivatedByUserIdParameter, commentsParameter, errorCodeParameter, todaysClientDateParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeactivateUnitOwner(Nullable<Int64> ownerUserId, Nullable<Int64> unitPurchaseRequestId, Nullable<Int64> centralisedUserId, string deactivatedBy, ObjectParameter numberOfAccessibleUnits, ObjectParameter errorCode)
        {

            var ownerUserIdParameter = ownerUserId.HasValue ?
                new SqlParameter("OwnerUserId", ownerUserId) :
                new SqlParameter("OwnerUserId", SqlDbType.BigInt);

            var unitPurchaseRequestIdParameter = unitPurchaseRequestId.HasValue ?
                new SqlParameter("UnitPurchaseRequestId", unitPurchaseRequestId) :
                new SqlParameter("UnitPurchaseRequestId", SqlDbType.BigInt);

            var centralisedUserIdParameter = centralisedUserId.HasValue ?
                new SqlParameter("CentralisedUserId", centralisedUserId) :
                new SqlParameter("CentralisedUserId", SqlDbType.BigInt);

           var deactivatedByParameter = new SqlParameter("DeactivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deactivatedBy))
           {
               deactivatedByParameter.IsNullable = true;
               deactivatedByParameter.Value = DBNull.Value;
           }
           else
           {
               deactivatedByParameter.Value = deactivatedBy;
           }

           var numberOfAccessibleUnitsParameter = new SqlParameter("NumberOfAccessibleUnits", SqlDbType.Int);
               numberOfAccessibleUnitsParameter.Direction = System.Data.ParameterDirection.Output;
               numberOfAccessibleUnitsParameter.Value = numberOfAccessibleUnits != null ? numberOfAccessibleUnits.Value : null;

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeactivateUnitOwner @OwnerUserId, @UnitPurchaseRequestId, @CentralisedUserId, @DeactivatedBy, @NumberOfAccessibleUnits OUT, @ErrorCode OUT", ownerUserIdParameter, unitPurchaseRequestIdParameter, centralisedUserIdParameter, deactivatedByParameter, numberOfAccessibleUnitsParameter, errorCodeParameter);

            numberOfAccessibleUnits.Value = numberOfAccessibleUnitsParameter.Value;
            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeactivateUnitTenant(Nullable<Int64> tenantUserId, Nullable<Int64> unitTenantRequestId, Nullable<Int64> centralisedUserId, ObjectParameter numberOfAccessibleUnits, string deactivatedBy, ObjectParameter errorCode)
        {

            var tenantUserIdParameter = tenantUserId.HasValue ?
                new SqlParameter("TenantUserId", tenantUserId) :
                new SqlParameter("TenantUserId", SqlDbType.BigInt);

            var unitTenantRequestIdParameter = unitTenantRequestId.HasValue ?
                new SqlParameter("UnitTenantRequestId", unitTenantRequestId) :
                new SqlParameter("UnitTenantRequestId", SqlDbType.BigInt);

            var centralisedUserIdParameter = centralisedUserId.HasValue ?
                new SqlParameter("CentralisedUserId", centralisedUserId) :
                new SqlParameter("CentralisedUserId", SqlDbType.BigInt);

           var numberOfAccessibleUnitsParameter = new SqlParameter("NumberOfAccessibleUnits", SqlDbType.Int);
               numberOfAccessibleUnitsParameter.Direction = System.Data.ParameterDirection.Output;
               numberOfAccessibleUnitsParameter.Value = numberOfAccessibleUnits != null ? numberOfAccessibleUnits.Value : null;

           var deactivatedByParameter = new SqlParameter("DeactivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deactivatedBy))
           {
               deactivatedByParameter.IsNullable = true;
               deactivatedByParameter.Value = DBNull.Value;
           }
           else
           {
               deactivatedByParameter.Value = deactivatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeactivateUnitTenant @TenantUserId, @UnitTenantRequestId, @CentralisedUserId, @NumberOfAccessibleUnits OUT, @DeactivatedBy, @ErrorCode OUT", tenantUserIdParameter, unitTenantRequestIdParameter, centralisedUserIdParameter, numberOfAccessibleUnitsParameter, deactivatedByParameter, errorCodeParameter);

            numberOfAccessibleUnits.Value = numberOfAccessibleUnitsParameter.Value;
            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeactivateUser(Nullable<Int64> userId, string deletedBy, ObjectParameter errorCode)
        {

            var userIdParameter = userId.HasValue ?
                new SqlParameter("UserId", userId) :
                new SqlParameter("UserId", SqlDbType.BigInt);

           var deletedByParameter = new SqlParameter("DeletedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBy))
           {
               deletedByParameter.IsNullable = true;
               deletedByParameter.Value = DBNull.Value;
           }
           else
           {
               deletedByParameter.Value = deletedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeactivateUser @UserId, @DeletedBy, @ErrorCode OUT", userIdParameter, deletedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeActiveCompanyMember(Nullable<Int32> vendorMemberId, Nullable<Int64> memberUserID, Nullable<Int64> membercentralUserid, string deActivatedBy)
        {

            var vendorMemberIdParameter = vendorMemberId.HasValue ?
                new SqlParameter("VendorMemberId", vendorMemberId) :
                new SqlParameter("VendorMemberId", SqlDbType.Int);

            var memberUserIDParameter = memberUserID.HasValue ?
                new SqlParameter("MemberUserID", memberUserID) :
                new SqlParameter("MemberUserID", SqlDbType.BigInt);

            var membercentralUseridParameter = membercentralUserid.HasValue ?
                new SqlParameter("MembercentralUserid", membercentralUserid) :
                new SqlParameter("MembercentralUserid", SqlDbType.BigInt);

           var deActivatedByParameter = new SqlParameter("DeActivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deActivatedBy))
           {
               deActivatedByParameter.IsNullable = true;
               deActivatedByParameter.Value = DBNull.Value;
           }
           else
           {
               deActivatedByParameter.Value = deActivatedBy;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeActiveCompanyMember @VendorMemberId, @MemberUserID, @MembercentralUserid, @DeActivatedBy", vendorMemberIdParameter, memberUserIDParameter, membercentralUseridParameter, deActivatedByParameter);


            return retVal;

        }
        public virtual int SP_DGC_DeActiveShopPIC(Nullable<Int32> shopPICId, string deActivatedBy, ObjectParameter errorCode)
        {

            var shopPICIdParameter = shopPICId.HasValue ?
                new SqlParameter("ShopPICId", shopPICId) :
                new SqlParameter("ShopPICId", SqlDbType.Int);

           var deActivatedByParameter = new SqlParameter("DeActivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deActivatedBy))
           {
               deActivatedByParameter.IsNullable = true;
               deActivatedByParameter.Value = DBNull.Value;
           }
           else
           {
               deActivatedByParameter.Value = deActivatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeActiveShopPIC @ShopPICId, @DeActivatedBy, @ErrorCode OUT", shopPICIdParameter, deActivatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeActiveVendorPIC(Nullable<Int32> vendorPICId, Nullable<Int64> picUserID, Nullable<Int64> pICcentralUserid, string deActivatedBy)
        {

            var vendorPICIdParameter = vendorPICId.HasValue ?
                new SqlParameter("VendorPICId", vendorPICId) :
                new SqlParameter("VendorPICId", SqlDbType.Int);

            var picUserIDParameter = picUserID.HasValue ?
                new SqlParameter("PicUserID", picUserID) :
                new SqlParameter("PicUserID", SqlDbType.BigInt);

            var pICcentralUseridParameter = pICcentralUserid.HasValue ?
                new SqlParameter("PICcentralUserid", pICcentralUserid) :
                new SqlParameter("PICcentralUserid", SqlDbType.BigInt);

           var deActivatedByParameter = new SqlParameter("DeActivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deActivatedBy))
           {
               deActivatedByParameter.IsNullable = true;
               deActivatedByParameter.Value = DBNull.Value;
           }
           else
           {
               deActivatedByParameter.Value = deActivatedBy;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeActiveVendorPIC @VendorPICId, @PicUserID, @PICcentralUserid, @DeActivatedBy", vendorPICIdParameter, picUserIDParameter, pICcentralUseridParameter, deActivatedByParameter);


            return retVal;

        }
        public virtual int SP_DGC_DeleteAdditionalServiceProviderById(Nullable<Int32> serviceProviderId, string deletedBy, ObjectParameter errorCode)
        {

            var serviceProviderIdParameter = serviceProviderId.HasValue ?
                new SqlParameter("ServiceProviderId", serviceProviderId) :
                new SqlParameter("ServiceProviderId", SqlDbType.Int);

           var deletedByParameter = new SqlParameter("DeletedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBy))
           {
               deletedByParameter.IsNullable = true;
               deletedByParameter.Value = DBNull.Value;
           }
           else
           {
               deletedByParameter.Value = deletedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteAdditionalServiceProviderById @ServiceProviderId, @DeletedBy, @ErrorCode OUT", serviceProviderIdParameter, deletedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteAnnouncement(Nullable<Int32> announcementId, string updatedBY, ObjectParameter errorCode)
        {

            var announcementIdParameter = announcementId.HasValue ?
                new SqlParameter("AnnouncementId", announcementId) :
                new SqlParameter("AnnouncementId", SqlDbType.Int);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteAnnouncement @AnnouncementId, @UpdatedBY, @ErrorCode OUT", announcementIdParameter, updatedBYParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteAssetsPurchaseLineItemByLineId(Nullable<Int32> assetsPurchaseLineID)
        {

            var assetsPurchaseLineIDParameter = assetsPurchaseLineID.HasValue ?
                new SqlParameter("AssetsPurchaseLineID", assetsPurchaseLineID) :
                new SqlParameter("AssetsPurchaseLineID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteAssetsPurchaseLineItemByLineId @AssetsPurchaseLineID", assetsPurchaseLineIDParameter);


            return retVal;

        }
        public virtual int SP_DGC_DeleteBlockById(Nullable<Int32> blockId, string updatedBy, ObjectParameter errorCode)
        {

            var blockIdParameter = blockId.HasValue ?
                new SqlParameter("BlockId", blockId) :
                new SqlParameter("BlockId", SqlDbType.Int);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteBlockById @BlockId, @UpdatedBy, @ErrorCode OUT", blockIdParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteChartsOfAccountItems(Nullable<Int32> accountItemId, string deActiveComment, string deActivatedBy, ObjectParameter errorCode)
        {

            var accountItemIdParameter = accountItemId.HasValue ?
                new SqlParameter("AccountItemId", accountItemId) :
                new SqlParameter("AccountItemId", SqlDbType.Int);

           var deActiveCommentParameter = new SqlParameter("DeActiveComment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deActiveComment))
           {
               deActiveCommentParameter.IsNullable = true;
               deActiveCommentParameter.Value = DBNull.Value;
           }
           else
           {
               deActiveCommentParameter.Value = deActiveComment;
           }

           var deActivatedByParameter = new SqlParameter("DeActivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deActivatedBy))
           {
               deActivatedByParameter.IsNullable = true;
               deActivatedByParameter.Value = DBNull.Value;
           }
           else
           {
               deActivatedByParameter.Value = deActivatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteChartsOfAccountItems @AccountItemId, @DeActiveComment, @DeActivatedBy, @ErrorCode OUT", accountItemIdParameter, deActiveCommentParameter, deActivatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteChartsOfAccounts(Nullable<Int32> accountId, string deActiveComment, string deActivatedBy, ObjectParameter errorCode)
        {

            var accountIdParameter = accountId.HasValue ?
                new SqlParameter("AccountId", accountId) :
                new SqlParameter("AccountId", SqlDbType.Int);

           var deActiveCommentParameter = new SqlParameter("DeActiveComment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deActiveComment))
           {
               deActiveCommentParameter.IsNullable = true;
               deActiveCommentParameter.Value = DBNull.Value;
           }
           else
           {
               deActiveCommentParameter.Value = deActiveComment;
           }

           var deActivatedByParameter = new SqlParameter("DeActivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deActivatedBy))
           {
               deActivatedByParameter.IsNullable = true;
               deActivatedByParameter.Value = DBNull.Value;
           }
           else
           {
               deActivatedByParameter.Value = deActivatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteChartsOfAccounts @AccountId, @DeActiveComment, @DeActivatedBy, @ErrorCode OUT", accountIdParameter, deActiveCommentParameter, deActivatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteCondoFacilities(Nullable<Int32> facilitiesId, string deletedBy, ObjectParameter errorCode)
        {

            var facilitiesIdParameter = facilitiesId.HasValue ?
                new SqlParameter("FacilitiesId", facilitiesId) :
                new SqlParameter("FacilitiesId", SqlDbType.Int);

           var deletedByParameter = new SqlParameter("DeletedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBy))
           {
               deletedByParameter.IsNullable = true;
               deletedByParameter.Value = DBNull.Value;
           }
           else
           {
               deletedByParameter.Value = deletedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteCondoFacilities @FacilitiesId, @DeletedBy, @ErrorCode OUT", facilitiesIdParameter, deletedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteCourt(Nullable<Int32> courtID, string deletedBy, ObjectParameter errorCode)
        {

            var courtIDParameter = courtID.HasValue ?
                new SqlParameter("CourtID", courtID) :
                new SqlParameter("CourtID", SqlDbType.Int);

           var deletedByParameter = new SqlParameter("DeletedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBy))
           {
               deletedByParameter.IsNullable = true;
               deletedByParameter.Value = DBNull.Value;
           }
           else
           {
               deletedByParameter.Value = deletedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteCourt @CourtID, @DeletedBy, @ErrorCode OUT", courtIDParameter, deletedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteEmergencyContactById(Nullable<Int32> contactId, string deletedBY, ObjectParameter errorCode)
        {

            var contactIdParameter = contactId.HasValue ?
                new SqlParameter("ContactId", contactId) :
                new SqlParameter("ContactId", SqlDbType.Int);

           var deletedBYParameter = new SqlParameter("DeletedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBY))
           {
               deletedBYParameter.IsNullable = true;
               deletedBYParameter.Value = DBNull.Value;
           }
           else
           {
               deletedBYParameter.Value = deletedBY;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteEmergencyContactById @ContactId, @DeletedBY, @ErrorCode OUT", contactIdParameter, deletedBYParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteFacilityAdding(Nullable<Int32> facilitiesId, string deletedBy, ObjectParameter errorCode)
        {

            var facilitiesIdParameter = facilitiesId.HasValue ?
                new SqlParameter("FacilitiesId", facilitiesId) :
                new SqlParameter("FacilitiesId", SqlDbType.Int);

           var deletedByParameter = new SqlParameter("DeletedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBy))
           {
               deletedByParameter.IsNullable = true;
               deletedByParameter.Value = DBNull.Value;
           }
           else
           {
               deletedByParameter.Value = deletedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteFacilityAdding @FacilitiesId, @DeletedBy, @ErrorCode OUT", facilitiesIdParameter, deletedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteFacilityLocation(Nullable<Int32> locationID, string deletedBy, ObjectParameter errorCode)
        {

            var locationIDParameter = locationID.HasValue ?
                new SqlParameter("LocationID", locationID) :
                new SqlParameter("LocationID", SqlDbType.Int);

           var deletedByParameter = new SqlParameter("DeletedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBy))
           {
               deletedByParameter.IsNullable = true;
               deletedByParameter.Value = DBNull.Value;
           }
           else
           {
               deletedByParameter.Value = deletedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteFacilityLocation @LocationID, @DeletedBy, @ErrorCode OUT", locationIDParameter, deletedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteFacilitySlotSettingBySlotId(Nullable<Int32> slotId, Nullable<DateTime> effectiveTo, Nullable<DateTime> clintDate, string updatedBy, ObjectParameter errorCode, Nullable<DateTime> lastBookingDate)
        {

            var slotIdParameter = slotId.HasValue ?
                new SqlParameter("SlotId", slotId) :
                new SqlParameter("SlotId", SqlDbType.Int);

            var effectiveToParameter = effectiveTo.HasValue ?
                new SqlParameter("EffectiveTo", effectiveTo) :
                new SqlParameter("EffectiveTo", SqlDbType.DateTime);

            var clintDateParameter = clintDate.HasValue ?
                new SqlParameter("ClintDate", clintDate) :
                new SqlParameter("ClintDate", SqlDbType.DateTime);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var lastBookingDateParameter = lastBookingDate.HasValue ?
                new SqlParameter("LastBookingDate", lastBookingDate) :
                new SqlParameter("LastBookingDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteFacilitySlotSettingBySlotId @SlotId, @EffectiveTo, @ClintDate, @UpdatedBy, @ErrorCode OUT, @LastBookingDate", slotIdParameter, effectiveToParameter, clintDateParameter, updatedByParameter, errorCodeParameter, lastBookingDateParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteFloorById(Nullable<Int32> floorId, string deletedBy, ObjectParameter errorCode)
        {

            var floorIdParameter = floorId.HasValue ?
                new SqlParameter("FloorId", floorId) :
                new SqlParameter("FloorId", SqlDbType.Int);

           var deletedByParameter = new SqlParameter("DeletedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBy))
           {
               deletedByParameter.IsNullable = true;
               deletedByParameter.Value = DBNull.Value;
           }
           else
           {
               deletedByParameter.Value = deletedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteFloorById @FloorId, @DeletedBy, @ErrorCode OUT", floorIdParameter, deletedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteGlAccountItems(Nullable<Int32> accountItemId, string deActiveComment, string deActivatedBy, ObjectParameter errorCode)
        {

            var accountItemIdParameter = accountItemId.HasValue ?
                new SqlParameter("AccountItemId", accountItemId) :
                new SqlParameter("AccountItemId", SqlDbType.Int);

           var deActiveCommentParameter = new SqlParameter("DeActiveComment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deActiveComment))
           {
               deActiveCommentParameter.IsNullable = true;
               deActiveCommentParameter.Value = DBNull.Value;
           }
           else
           {
               deActiveCommentParameter.Value = deActiveComment;
           }

           var deActivatedByParameter = new SqlParameter("DeActivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deActivatedBy))
           {
               deActivatedByParameter.IsNullable = true;
               deActivatedByParameter.Value = DBNull.Value;
           }
           else
           {
               deActivatedByParameter.Value = deActivatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteGlAccountItems @AccountItemId, @DeActiveComment, @DeActivatedBy, @ErrorCode OUT", accountItemIdParameter, deActiveCommentParameter, deActivatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteGlGroup(Nullable<Int32> accountId, string deActiveComment, string deActivatedBy, ObjectParameter errorCode)
        {

            var accountIdParameter = accountId.HasValue ?
                new SqlParameter("AccountId", accountId) :
                new SqlParameter("AccountId", SqlDbType.Int);

           var deActiveCommentParameter = new SqlParameter("DeActiveComment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deActiveComment))
           {
               deActiveCommentParameter.IsNullable = true;
               deActiveCommentParameter.Value = DBNull.Value;
           }
           else
           {
               deActiveCommentParameter.Value = deActiveComment;
           }

           var deActivatedByParameter = new SqlParameter("DeActivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deActivatedBy))
           {
               deActivatedByParameter.IsNullable = true;
               deActivatedByParameter.Value = DBNull.Value;
           }
           else
           {
               deActivatedByParameter.Value = deActivatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteGlGroup @AccountId, @DeActiveComment, @DeActivatedBy, @ErrorCode OUT", accountIdParameter, deActiveCommentParameter, deActivatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteHallSlotSettingBySlotId(Nullable<Int32> slotId, Nullable<DateTime> clintDate, string updatedBy, Nullable<DateTime> effectiveTo, ObjectParameter errorCode, Nullable<DateTime> lastBookingDate)
        {

            var slotIdParameter = slotId.HasValue ?
                new SqlParameter("SlotId", slotId) :
                new SqlParameter("SlotId", SqlDbType.Int);

            var clintDateParameter = clintDate.HasValue ?
                new SqlParameter("ClintDate", clintDate) :
                new SqlParameter("ClintDate", SqlDbType.DateTime);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

            var effectiveToParameter = effectiveTo.HasValue ?
                new SqlParameter("EffectiveTo", effectiveTo) :
                new SqlParameter("EffectiveTo", SqlDbType.DateTime);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var lastBookingDateParameter = lastBookingDate.HasValue ?
                new SqlParameter("LastBookingDate", lastBookingDate) :
                new SqlParameter("LastBookingDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteHallSlotSettingBySlotId @SlotId, @ClintDate, @UpdatedBy, @EffectiveTo, @ErrorCode OUT, @LastBookingDate", slotIdParameter, clintDateParameter, updatedByParameter, effectiveToParameter, errorCodeParameter, lastBookingDateParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteNotification(Nullable<Int32> notificationId, string updatedBY, ObjectParameter errorCode)
        {

            var notificationIdParameter = notificationId.HasValue ?
                new SqlParameter("NotificationId", notificationId) :
                new SqlParameter("NotificationId", SqlDbType.Int);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteNotification @NotificationId, @UpdatedBY, @ErrorCode OUT", notificationIdParameter, updatedBYParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeletePurchaseInvoiceLineItem(Nullable<Int32> purchaseInvoiceLineID)
        {

            var purchaseInvoiceLineIDParameter = purchaseInvoiceLineID.HasValue ?
                new SqlParameter("PurchaseInvoiceLineID", purchaseInvoiceLineID) :
                new SqlParameter("PurchaseInvoiceLineID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeletePurchaseInvoiceLineItem @PurchaseInvoiceLineID", purchaseInvoiceLineIDParameter);


            return retVal;

        }
        public virtual int SP_DGC_DeleteRennovationRequest(Nullable<Int64> rennovationRequestId, string deletedBy, ObjectParameter errorCode)
        {

            var rennovationRequestIdParameter = rennovationRequestId.HasValue ?
                new SqlParameter("RennovationRequestId", rennovationRequestId) :
                new SqlParameter("RennovationRequestId", SqlDbType.BigInt);

           var deletedByParameter = new SqlParameter("DeletedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBy))
           {
               deletedByParameter.IsNullable = true;
               deletedByParameter.Value = DBNull.Value;
           }
           else
           {
               deletedByParameter.Value = deletedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteRennovationRequest @RennovationRequestId, @DeletedBy, @ErrorCode OUT", rennovationRequestIdParameter, deletedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteRFQLineItem(Nullable<Int32> rFQItemID)
        {

            var rFQItemIDParameter = rFQItemID.HasValue ?
                new SqlParameter("RFQItemID", rFQItemID) :
                new SqlParameter("RFQItemID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteRFQLineItem @RFQItemID", rFQItemIDParameter);


            return retVal;

        }
        public virtual int SP_DGC_DeleteShopByShopId(Nullable<Int32> shopRegistrationId, string deletedBy, ObjectParameter errorCode)
        {

            var shopRegistrationIdParameter = shopRegistrationId.HasValue ?
                new SqlParameter("ShopRegistrationId", shopRegistrationId) :
                new SqlParameter("ShopRegistrationId", SqlDbType.Int);

           var deletedByParameter = new SqlParameter("DeletedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBy))
           {
               deletedByParameter.IsNullable = true;
               deletedByParameter.Value = DBNull.Value;
           }
           else
           {
               deletedByParameter.Value = deletedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteShopByShopId @ShopRegistrationId, @DeletedBy, @ErrorCode OUT", shopRegistrationIdParameter, deletedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteShopMemberDetails(Nullable<Int32> shopMemberId, string deletedBy, ObjectParameter errorCode)
        {

            var shopMemberIdParameter = shopMemberId.HasValue ?
                new SqlParameter("ShopMemberId", shopMemberId) :
                new SqlParameter("ShopMemberId", SqlDbType.Int);

           var deletedByParameter = new SqlParameter("DeletedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBy))
           {
               deletedByParameter.IsNullable = true;
               deletedByParameter.Value = DBNull.Value;
           }
           else
           {
               deletedByParameter.Value = deletedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteShopMemberDetails @ShopMemberId, @DeletedBy, @ErrorCode OUT", shopMemberIdParameter, deletedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteShopRegistrationById(Nullable<Int64> shopRegistrationId, string deletedBy, ObjectParameter errorCode)
        {

            var shopRegistrationIdParameter = shopRegistrationId.HasValue ?
                new SqlParameter("ShopRegistrationId", shopRegistrationId) :
                new SqlParameter("ShopRegistrationId", SqlDbType.BigInt);

           var deletedByParameter = new SqlParameter("DeletedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBy))
           {
               deletedByParameter.IsNullable = true;
               deletedByParameter.Value = DBNull.Value;
           }
           else
           {
               deletedByParameter.Value = deletedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteShopRegistrationById @ShopRegistrationId, @DeletedBy, @ErrorCode OUT", shopRegistrationIdParameter, deletedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteTrainer(Nullable<Int32> trainerId, string deletedBy, ObjectParameter errorCode)
        {

            var trainerIdParameter = trainerId.HasValue ?
                new SqlParameter("TrainerId", trainerId) :
                new SqlParameter("TrainerId", SqlDbType.Int);

           var deletedByParameter = new SqlParameter("DeletedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBy))
           {
               deletedByParameter.IsNullable = true;
               deletedByParameter.Value = DBNull.Value;
           }
           else
           {
               deletedByParameter.Value = deletedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteTrainer @TrainerId, @DeletedBy, @ErrorCode OUT", trainerIdParameter, deletedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteUnitById(Nullable<Int32> unitId, string updatedBy, ObjectParameter errorCode)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteUnitById @UnitId, @UpdatedBy, @ErrorCode OUT", unitIdParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteUtilityBillsProvider(Nullable<Int32> utiltityBillId, string deletedBy, ObjectParameter errorCode)
        {

            var utiltityBillIdParameter = utiltityBillId.HasValue ?
                new SqlParameter("UtiltityBillId", utiltityBillId) :
                new SqlParameter("UtiltityBillId", SqlDbType.Int);

           var deletedByParameter = new SqlParameter("DeletedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBy))
           {
               deletedByParameter.IsNullable = true;
               deletedByParameter.Value = DBNull.Value;
           }
           else
           {
               deletedByParameter.Value = deletedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteUtilityBillsProvider @UtiltityBillId, @DeletedBy, @ErrorCode OUT", utiltityBillIdParameter, deletedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteUtilityInvoiceLineItem(Nullable<Int32> utilityInvoiceLineId)
        {

            var utilityInvoiceLineIdParameter = utilityInvoiceLineId.HasValue ?
                new SqlParameter("UtilityInvoiceLineId", utilityInvoiceLineId) :
                new SqlParameter("UtilityInvoiceLineId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteUtilityInvoiceLineItem @UtilityInvoiceLineId", utilityInvoiceLineIdParameter);


            return retVal;

        }
        public virtual int SP_DGC_DeleteVendorInvoiceLineItem(Nullable<Int32> vendorInvoiceLineID)
        {

            var vendorInvoiceLineIDParameter = vendorInvoiceLineID.HasValue ?
                new SqlParameter("VendorInvoiceLineID", vendorInvoiceLineID) :
                new SqlParameter("VendorInvoiceLineID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteVendorInvoiceLineItem @VendorInvoiceLineID", vendorInvoiceLineIDParameter);


            return retVal;

        }
        public virtual int SP_DGC_DeleteVendorRegistrationById(Nullable<Int64> vendorRegId, string deletedBy, ObjectParameter errorCode)
        {

            var vendorRegIdParameter = vendorRegId.HasValue ?
                new SqlParameter("VendorRegId", vendorRegId) :
                new SqlParameter("VendorRegId", SqlDbType.BigInt);

           var deletedByParameter = new SqlParameter("DeletedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deletedBy))
           {
               deletedByParameter.IsNullable = true;
               deletedByParameter.Value = DBNull.Value;
           }
           else
           {
               deletedByParameter.Value = deletedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteVendorRegistrationById @VendorRegId, @DeletedBy, @ErrorCode OUT", vendorRegIdParameter, deletedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteWorkOrdersLineItem(Nullable<Int32> workOrderItemID)
        {

            var workOrderItemIDParameter = workOrderItemID.HasValue ?
                new SqlParameter("WorkOrderItemID", workOrderItemID) :
                new SqlParameter("WorkOrderItemID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteWorkOrdersLineItem @WorkOrderItemID", workOrderItemIDParameter);


            return retVal;

        }
        public virtual int SP_DGC_Depreciation_LedgerCreate_Mapping(Nullable<Int64> depreciationRequestId, string updatedBy, ObjectParameter errorCode)
        {

            var depreciationRequestIdParameter = depreciationRequestId.HasValue ?
                new SqlParameter("DepreciationRequestId", depreciationRequestId) :
                new SqlParameter("DepreciationRequestId", SqlDbType.BigInt);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_Depreciation_LedgerCreate_Mapping @DepreciationRequestId, @UpdatedBy, @ErrorCode OUT", depreciationRequestIdParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAccessGoodsRequest_PayLines_Result> SP_DGC_GetAccessGoodsRequest_PayLines(Nullable<Int64> accessGoodsRequestId)
        {

            var accessGoodsRequestIdParameter = accessGoodsRequestId.HasValue ?
                new SqlParameter("AccessGoodsRequestId", accessGoodsRequestId) :
                new SqlParameter("AccessGoodsRequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAccessGoodsRequest_PayLines_Result>("SP_DGC_GetAccessGoodsRequest_PayLines @AccessGoodsRequestId", accessGoodsRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAccessGoodsRequestDetailsById_Result> SP_DGC_GetAccessGoodsRequestDetailsById(Nullable<Int64> requestId)
        {

            var requestIdParameter = requestId.HasValue ?
                new SqlParameter("RequestId", requestId) :
                new SqlParameter("RequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAccessGoodsRequestDetailsById_Result>("SP_DGC_GetAccessGoodsRequestDetailsById @RequestId", requestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAccessGoodsRequestedMembers_Result> SP_DGC_GetAccessGoodsRequestedMembers(Nullable<Int64> accessGoodsRequestId)
        {

            var accessGoodsRequestIdParameter = accessGoodsRequestId.HasValue ?
                new SqlParameter("AccessGoodsRequestId", accessGoodsRequestId) :
                new SqlParameter("AccessGoodsRequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAccessGoodsRequestedMembers_Result>("SP_DGC_GetAccessGoodsRequestedMembers @AccessGoodsRequestId", accessGoodsRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAccessGoodsRequestHistoryById_Result> SP_DGC_GetAccessGoodsRequestHistoryById(Nullable<Int64> accessGoodsRequestId)
        {

            var accessGoodsRequestIdParameter = accessGoodsRequestId.HasValue ?
                new SqlParameter("AccessGoodsRequestId", accessGoodsRequestId) :
                new SqlParameter("AccessGoodsRequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAccessGoodsRequestHistoryById_Result>("SP_DGC_GetAccessGoodsRequestHistoryById @AccessGoodsRequestId", accessGoodsRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAccessGoodsRequestIssueDetails_Result> SP_DGC_GetAccessGoodsRequestIssueDetails(Nullable<Int64> accessGoodsRequestId)
        {

            var accessGoodsRequestIdParameter = accessGoodsRequestId.HasValue ?
                new SqlParameter("AccessGoodsRequestId", accessGoodsRequestId) :
                new SqlParameter("AccessGoodsRequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAccessGoodsRequestIssueDetails_Result>("SP_DGC_GetAccessGoodsRequestIssueDetails @AccessGoodsRequestId", accessGoodsRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveAccessGoodsByStockCatagoryId_Result> SP_DGC_GetActiveAccessGoodsByStockCatagoryId()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveAccessGoodsByStockCatagoryId_Result>("SP_DGC_GetActiveAccessGoodsByStockCatagoryId");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveAccountItemByAccountID_Result> SP_DGC_GetActiveAccountItemByAccountID(Nullable<Int32> accountId)
        {

            var accountIdParameter = accountId.HasValue ?
                new SqlParameter("AccountId", accountId) :
                new SqlParameter("AccountId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveAccountItemByAccountID_Result>("SP_DGC_GetActiveAccountItemByAccountID @AccountId", accountIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveAccounts_Result> SP_DGC_GetActiveAccounts()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveAccounts_Result>("SP_DGC_GetActiveAccounts");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveAdditionalServiceProviders_Result> SP_DGC_GetActiveAdditionalServiceProviders(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveAdditionalServiceProviders_Result>("SP_DGC_GetActiveAdditionalServiceProviders @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveApprovalRFQQuotes_Result> SP_DGC_GetActiveApprovalRFQQuotes()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveApprovalRFQQuotes_Result>("SP_DGC_GetActiveApprovalRFQQuotes");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveAssets_Result> SP_DGC_GetActiveAssets()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveAssets_Result>("SP_DGC_GetActiveAssets");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveBillType_Result> SP_DGC_GetActiveBillType()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveBillType_Result>("SP_DGC_GetActiveBillType");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveBlockSettings_Result> SP_DGC_GetActiveBlockSettings()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveBlockSettings_Result>("SP_DGC_GetActiveBlockSettings");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveCondoFacilities_Result> SP_DGC_GetActiveCondoFacilities()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveCondoFacilities_Result>("SP_DGC_GetActiveCondoFacilities");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveCondoMaterials_Result> SP_DGC_GetActiveCondoMaterials()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveCondoMaterials_Result>("SP_DGC_GetActiveCondoMaterials");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveCountriesByFlag_Result> SP_DGC_GetActiveCountriesByFlag(string isMalaysia)
        {

           var isMalaysiaParameter = new SqlParameter("IsMalaysia", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isMalaysia))
           {
               isMalaysiaParameter.IsNullable = true;
               isMalaysiaParameter.Value = DBNull.Value;
           }
           else
           {
               isMalaysiaParameter.Value = isMalaysia;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveCountriesByFlag_Result>("SP_DGC_GetActiveCountriesByFlag @IsMalaysia", isMalaysiaParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveCourtsAndTrainersByFacilitiesId_Result> SP_DGC_GetActiveCourtsAndTrainersByFacilitiesId(Nullable<Int32> facilitiesId, string facilityCategory)
        {

            var facilitiesIdParameter = facilitiesId.HasValue ?
                new SqlParameter("FacilitiesId", facilitiesId) :
                new SqlParameter("FacilitiesId", SqlDbType.Int);

           var facilityCategoryParameter = new SqlParameter("FacilityCategory", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(facilityCategory))
           {
               facilityCategoryParameter.IsNullable = true;
               facilityCategoryParameter.Value = DBNull.Value;
           }
           else
           {
               facilityCategoryParameter.Value = facilityCategory;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveCourtsAndTrainersByFacilitiesId_Result>("SP_DGC_GetActiveCourtsAndTrainersByFacilitiesId @FacilitiesId, @FacilityCategory", facilitiesIdParameter, facilityCategoryParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveCourtsByFacilitiesId_Result> SP_DGC_GetActiveCourtsByFacilitiesId(Nullable<Int32> facilitiesId)
        {

            var facilitiesIdParameter = facilitiesId.HasValue ?
                new SqlParameter("FacilitiesId", facilitiesId) :
                new SqlParameter("FacilitiesId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveCourtsByFacilitiesId_Result>("SP_DGC_GetActiveCourtsByFacilitiesId @FacilitiesId", facilitiesIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveCourtsorTrainersByFacilityId_Result> SP_DGC_GetActiveCourtsorTrainersByFacilityId(Nullable<Int32> facilityId, Nullable<Int32> facilityCategoryKey)
        {

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);

            var facilityCategoryKeyParameter = facilityCategoryKey.HasValue ?
                new SqlParameter("FacilityCategoryKey", facilityCategoryKey) :
                new SqlParameter("FacilityCategoryKey", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveCourtsorTrainersByFacilityId_Result>("SP_DGC_GetActiveCourtsorTrainersByFacilityId @FacilityId, @FacilityCategoryKey", facilityIdParameter, facilityCategoryKeyParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveDepartments_Result> SP_DGC_GetActiveDepartments()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveDepartments_Result>("SP_DGC_GetActiveDepartments");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveFacilityLineDetailsByFacilityId_Result> SP_DGC_GetActiveFacilityLineDetailsByFacilityId(Nullable<Int32> facilityId)
        {

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveFacilityLineDetailsByFacilityId_Result>("SP_DGC_GetActiveFacilityLineDetailsByFacilityId @FacilityId", facilityIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveFinancialPeriods_Result> SP_DGC_GetActiveFinancialPeriods()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveFinancialPeriods_Result>("SP_DGC_GetActiveFinancialPeriods");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveFloorSettingsByBlockId_Result> SP_DGC_GetActiveFloorSettingsByBlockId(Nullable<Int32> blockId)
        {

            var blockIdParameter = blockId.HasValue ?
                new SqlParameter("BlockId", blockId) :
                new SqlParameter("BlockId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveFloorSettingsByBlockId_Result>("SP_DGC_GetActiveFloorSettingsByBlockId @BlockId", blockIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveGlAccountItemsByGlId_Result> SP_DGC_GetActiveGlAccountItemsByGlId(Nullable<Int32> glAccountId)
        {

            var glAccountIdParameter = glAccountId.HasValue ?
                new SqlParameter("GlAccountId", glAccountId) :
                new SqlParameter("GlAccountId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveGlAccountItemsByGlId_Result>("SP_DGC_GetActiveGlAccountItemsByGlId @GlAccountId", glAccountIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveGlAccountNumbers_Result> SP_DGC_GetActiveGlAccountNumbers()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveGlAccountNumbers_Result>("SP_DGC_GetActiveGlAccountNumbers");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveHallFeeDetails_Result> SP_DGC_GetActiveHallFeeDetails()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveHallFeeDetails_Result>("SP_DGC_GetActiveHallFeeDetails");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveHouseRuleDetails_Result> SP_DGC_GetActiveHouseRuleDetails()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveHouseRuleDetails_Result>("SP_DGC_GetActiveHouseRuleDetails");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveInvoiceConfigurationDetails_Result> SP_DGC_GetActiveInvoiceConfigurationDetails(Nullable<Int32> billTypeId, string unitType)
        {

            var billTypeIdParameter = billTypeId.HasValue ?
                new SqlParameter("BillTypeId", billTypeId) :
                new SqlParameter("BillTypeId", SqlDbType.Int);

           var unitTypeParameter = new SqlParameter("UnitType", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitType))
           {
               unitTypeParameter.IsNullable = true;
               unitTypeParameter.Value = DBNull.Value;
           }
           else
           {
               unitTypeParameter.Value = unitType;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveInvoiceConfigurationDetails_Result>("SP_DGC_GetActiveInvoiceConfigurationDetails @BillTypeId, @UnitType", billTypeIdParameter, unitTypeParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveMinutesOfMeetingDates_Result> SP_DGC_GetActiveMinutesOfMeetingDates()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveMinutesOfMeetingDates_Result>("SP_DGC_GetActiveMinutesOfMeetingDates");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveNonStockItems_Result> SP_DGC_GetActiveNonStockItems()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveNonStockItems_Result>("SP_DGC_GetActiveNonStockItems");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveNonVisitorSlots_Result> SP_DGC_GetActiveNonVisitorSlots(Nullable<DateTime> bookingRequestDate)
        {

            var bookingRequestDateParameter = bookingRequestDate.HasValue ?
                new SqlParameter("BookingRequestDate", bookingRequestDate) :
                new SqlParameter("BookingRequestDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveNonVisitorSlots_Result>("SP_DGC_GetActiveNonVisitorSlots @BookingRequestDate", bookingRequestDateParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveNotifications_Result> SP_DGC_GetActiveNotifications(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveNotifications_Result>("SP_DGC_GetActiveNotifications @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActivePaidFacilities_Result> SP_DGC_GetActivePaidFacilities()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActivePaidFacilities_Result>("SP_DGC_GetActivePaidFacilities");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveProviderNamesForUtilityInvoice_Result> SP_DGC_GetActiveProviderNamesForUtilityInvoice(Nullable<Int32> utilityConfigKey)
        {

            var utilityConfigKeyParameter = utilityConfigKey.HasValue ?
                new SqlParameter("UtilityConfigKey", utilityConfigKey) :
                new SqlParameter("UtilityConfigKey", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveProviderNamesForUtilityInvoice_Result>("SP_DGC_GetActiveProviderNamesForUtilityInvoice @UtilityConfigKey", utilityConfigKeyParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveResidenceUnits_Result> SP_DGC_GetActiveResidenceUnits()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveResidenceUnits_Result>("SP_DGC_GetActiveResidenceUnits");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveRoles_Result> SP_DGC_GetActiveRoles()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveRoles_Result>("SP_DGC_GetActiveRoles");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveSecurityMemebers_Result> SP_DGC_GetActiveSecurityMemebers()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveSecurityMemebers_Result>("SP_DGC_GetActiveSecurityMemebers");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveShops_Result> SP_DGC_GetActiveShops()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveShops_Result>("SP_DGC_GetActiveShops");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveStockCategories_Result> SP_DGC_GetActiveStockCategories()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveStockCategories_Result>("SP_DGC_GetActiveStockCategories");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveSuppliers_Result> SP_DGC_GetActiveSuppliers()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveSuppliers_Result>("SP_DGC_GetActiveSuppliers");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveTaxCodes_Result> SP_DGC_GetActiveTaxCodes()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveTaxCodes_Result>("SP_DGC_GetActiveTaxCodes");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveUnitInvoiceByUnitId_Result> SP_DGC_GetActiveUnitInvoiceByUnitId(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveUnitInvoiceByUnitId_Result>("SP_DGC_GetActiveUnitInvoiceByUnitId @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveUnits_Result> SP_DGC_GetActiveUnits()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveUnits_Result>("SP_DGC_GetActiveUnits");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveUnitSettingsByFloorId_Result> SP_DGC_GetActiveUnitSettingsByFloorId(Nullable<Int32> floorId)
        {

            var floorIdParameter = floorId.HasValue ?
                new SqlParameter("FloorId", floorId) :
                new SqlParameter("FloorId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveUnitSettingsByFloorId_Result>("SP_DGC_GetActiveUnitSettingsByFloorId @FloorId", floorIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveUsers_Result> SP_DGC_GetActiveUsers()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveUsers_Result>("SP_DGC_GetActiveUsers");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveVendorComapaniesByDeptID_Result> SP_DGC_GetActiveVendorComapaniesByDeptID(Nullable<Int32> departmentId)
        {

            var departmentIdParameter = departmentId.HasValue ?
                new SqlParameter("DepartmentId", departmentId) :
                new SqlParameter("DepartmentId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveVendorComapaniesByDeptID_Result>("SP_DGC_GetActiveVendorComapaniesByDeptID @DepartmentId", departmentIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveVendorCompany_Result1> SP_DGC_GetActiveVendorCompany()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveVendorCompany_Result1>("SP_DGC_GetActiveVendorCompany");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveVendorInvoiceByVendorID_Result> SP_DGC_GetActiveVendorInvoiceByVendorID(Nullable<Int64> vendorRegId)
        {

            var vendorRegIdParameter = vendorRegId.HasValue ?
                new SqlParameter("VendorRegId", vendorRegId) :
                new SqlParameter("VendorRegId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveVendorInvoiceByVendorID_Result>("SP_DGC_GetActiveVendorInvoiceByVendorID @VendorRegId", vendorRegIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveVendorServiceDepartments_Result> SP_DGC_GetActiveVendorServiceDepartments()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveVendorServiceDepartments_Result>("SP_DGC_GetActiveVendorServiceDepartments");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveWorkOrders_Result> SP_DGC_GetActiveWorkOrders()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveWorkOrders_Result>("SP_DGC_GetActiveWorkOrders");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAdditionalServiceProviderById_Result> SP_DGC_GetAdditionalServiceProviderById(Nullable<Int32> serviceProviderId)
        {

            var serviceProviderIdParameter = serviceProviderId.HasValue ?
                new SqlParameter("ServiceProviderId", serviceProviderId) :
                new SqlParameter("ServiceProviderId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAdditionalServiceProviderById_Result>("SP_DGC_GetAdditionalServiceProviderById @ServiceProviderId", serviceProviderIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAdminOfficeUsersByAutoText_Result> SP_DGC_GetAdminOfficeUsersByAutoText(string name)
        {

           var nameParameter = new SqlParameter("Name", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(name))
           {
               nameParameter.IsNullable = true;
               nameParameter.Value = DBNull.Value;
           }
           else
           {
               nameParameter.Value = name;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAdminOfficeUsersByAutoText_Result>("SP_DGC_GetAdminOfficeUsersByAutoText @Name", nameParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllAccessGoodsRequests_Result> SP_DGC_GetAllAccessGoodsRequests(Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> unitId, Nullable<Int32> typeOfAccessCard, Nullable<DateTime> requestFromDate, Nullable<DateTime> requestToDate, Nullable<Int32> statusId)
        {

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var typeOfAccessCardParameter = typeOfAccessCard.HasValue ?
                new SqlParameter("TypeOfAccessCard", typeOfAccessCard) :
                new SqlParameter("TypeOfAccessCard", SqlDbType.Int);

            var requestFromDateParameter = requestFromDate.HasValue ?
                new SqlParameter("RequestFromDate", requestFromDate) :
                new SqlParameter("RequestFromDate", SqlDbType.DateTime);

            var requestToDateParameter = requestToDate.HasValue ?
                new SqlParameter("RequestToDate", requestToDate) :
                new SqlParameter("RequestToDate", SqlDbType.DateTime);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllAccessGoodsRequests_Result>("SP_DGC_GetAllAccessGoodsRequests @RequestedFromRole, @RequestedUserId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @UnitId, @TypeOfAccessCard, @RequestFromDate, @RequestToDate, @StatusId", requestedFromRoleParameter, requestedUserIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, unitIdParameter, typeOfAccessCardParameter, requestFromDateParameter, requestToDateParameter, statusIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllActiveCondoAccounts_Result> SP_DGC_GetAllActiveCondoAccounts()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllActiveCondoAccounts_Result>("SP_DGC_GetAllActiveCondoAccounts");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllActiveERContacts_Result> SP_DGC_GetAllActiveERContacts(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, string isActive)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllActiveERContacts_Result>("SP_DGC_GetAllActiveERContacts @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @IsActive", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, isActiveParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllAdditionalServiceProviders_Result> SP_DGC_GetAllAdditionalServiceProviders(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllAdditionalServiceProviders_Result>("SP_DGC_GetAllAdditionalServiceProviders @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllAnnouncements_Result> SP_DGC_GetAllAnnouncements(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<DateTime> todaysclintDate)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var todaysclintDateParameter = todaysclintDate.HasValue ?
                new SqlParameter("TodaysclintDate", todaysclintDate) :
                new SqlParameter("TodaysclintDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllAnnouncements_Result>("SP_DGC_GetAllAnnouncements @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @TodaysclintDate", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, todaysclintDateParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllAssetsDetails_Result> SP_DGC_GetAllAssetsDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllAssetsDetails_Result>("SP_DGC_GetAllAssetsDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllAssetsPurchaseActionDetails_Result> SP_DGC_GetAllAssetsPurchaseActionDetails(Nullable<Int64> assetPurchaseId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var assetPurchaseIdParameter = assetPurchaseId.HasValue ?
                new SqlParameter("AssetPurchaseId", assetPurchaseId) :
                new SqlParameter("AssetPurchaseId", SqlDbType.BigInt);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllAssetsPurchaseActionDetails_Result>("SP_DGC_GetAllAssetsPurchaseActionDetails @AssetPurchaseId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", assetPurchaseIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllAssetsPurchaseDetails_Result> SP_DGC_GetAllAssetsPurchaseDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllAssetsPurchaseDetails_Result>("SP_DGC_GetAllAssetsPurchaseDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllAssetsPurchaseLineItemDetails_Result> SP_DGC_GetAllAssetsPurchaseLineItemDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, Nullable<Int64> assetPurchaseId, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

            var assetPurchaseIdParameter = assetPurchaseId.HasValue ?
                new SqlParameter("AssetPurchaseId", assetPurchaseId) :
                new SqlParameter("AssetPurchaseId", SqlDbType.BigInt);

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllAssetsPurchaseLineItemDetails_Result>("SP_DGC_GetAllAssetsPurchaseLineItemDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @AssetPurchaseId, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, assetPurchaseIdParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllBlocksSettings_Result> SP_DGC_GetAllBlocksSettings(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllBlocksSettings_Result>("SP_DGC_GetAllBlocksSettings @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllChartsOfAccountItems_Result> SP_DGC_GetAllChartsOfAccountItems(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, Nullable<Int32> accountId, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

            var accountIdParameter = accountId.HasValue ?
                new SqlParameter("AccountId", accountId) :
                new SqlParameter("AccountId", SqlDbType.Int);

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllChartsOfAccountItems_Result>("SP_DGC_GetAllChartsOfAccountItems @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @AccountId, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, accountIdParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllChartsOfAccounts_Result> SP_DGC_GetAllChartsOfAccounts(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllChartsOfAccounts_Result>("SP_DGC_GetAllChartsOfAccounts @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllClampRequestDetails_Result> SP_DGC_GetAllClampRequestDetails(Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<DateTime> clampedFromDate, Nullable<DateTime> clampedToDate, Nullable<Int32> statusId)
        {

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var clampedFromDateParameter = clampedFromDate.HasValue ?
                new SqlParameter("ClampedFromDate", clampedFromDate) :
                new SqlParameter("ClampedFromDate", SqlDbType.DateTime);

            var clampedToDateParameter = clampedToDate.HasValue ?
                new SqlParameter("ClampedToDate", clampedToDate) :
                new SqlParameter("ClampedToDate", SqlDbType.DateTime);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllClampRequestDetails_Result>("SP_DGC_GetAllClampRequestDetails @RequestedFromRole, @RequestedUserId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @ClampedFromDate, @ClampedToDate, @StatusId", requestedFromRoleParameter, requestedUserIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, clampedFromDateParameter, clampedToDateParameter, statusIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllComiteeMembers_Result> SP_DGC_GetAllComiteeMembers(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllComiteeMembers_Result>("SP_DGC_GetAllComiteeMembers @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllComplaintDetails_Result> SP_DGC_GetAllComplaintDetails(Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, string statusCode, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<DateTime> complaintFromDate, Nullable<DateTime> complaintToDate, Nullable<Int32> departmentID, Nullable<Int32> statusId)
        {

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

           var statusCodeParameter = new SqlParameter("StatusCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(statusCode))
           {
               statusCodeParameter.IsNullable = true;
               statusCodeParameter.Value = DBNull.Value;
           }
           else
           {
               statusCodeParameter.Value = statusCode;
           }

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var complaintFromDateParameter = complaintFromDate.HasValue ?
                new SqlParameter("ComplaintFromDate", complaintFromDate) :
                new SqlParameter("ComplaintFromDate", SqlDbType.DateTime);

            var complaintToDateParameter = complaintToDate.HasValue ?
                new SqlParameter("ComplaintToDate", complaintToDate) :
                new SqlParameter("ComplaintToDate", SqlDbType.DateTime);

            var departmentIDParameter = departmentID.HasValue ?
                new SqlParameter("DepartmentID", departmentID) :
                new SqlParameter("DepartmentID", SqlDbType.Int);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllComplaintDetails_Result>("SP_DGC_GetAllComplaintDetails @RequestedFromRole, @RequestedUserId, @StatusCode, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @ComplaintFromDate, @ComplaintToDate, @DepartmentID, @StatusId", requestedFromRoleParameter, requestedUserIdParameter, statusCodeParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, complaintFromDateParameter, complaintToDateParameter, departmentIDParameter, statusIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllCondoAssetDepreciationDetails_Result> SP_DGC_GetAllCondoAssetDepreciationDetails(Nullable<Int32> depreciationRequestId)
        {

            var depreciationRequestIdParameter = depreciationRequestId.HasValue ?
                new SqlParameter("DepreciationRequestId", depreciationRequestId) :
                new SqlParameter("DepreciationRequestId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllCondoAssetDepreciationDetails_Result>("SP_DGC_GetAllCondoAssetDepreciationDetails @DepreciationRequestId", depreciationRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllCondoBankAccounts_Result> SP_DGC_GetAllCondoBankAccounts(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllCondoBankAccounts_Result>("SP_DGC_GetAllCondoBankAccounts @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllCondoFacilityBookingDetails_Result> SP_DGC_GetAllCondoFacilityBookingDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, Nullable<Int32> unitId, Nullable<DateTime> facilityFromDate, Nullable<DateTime> facilityToDate, Nullable<DateTime> raisedFomDate, Nullable<DateTime> raisedToDate, Nullable<Int32> statusId)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var facilityFromDateParameter = facilityFromDate.HasValue ?
                new SqlParameter("FacilityFromDate", facilityFromDate) :
                new SqlParameter("FacilityFromDate", SqlDbType.DateTime);

            var facilityToDateParameter = facilityToDate.HasValue ?
                new SqlParameter("FacilityToDate", facilityToDate) :
                new SqlParameter("FacilityToDate", SqlDbType.DateTime);

            var raisedFomDateParameter = raisedFomDate.HasValue ?
                new SqlParameter("RaisedFomDate", raisedFomDate) :
                new SqlParameter("RaisedFomDate", SqlDbType.DateTime);

            var raisedToDateParameter = raisedToDate.HasValue ?
                new SqlParameter("RaisedToDate", raisedToDate) :
                new SqlParameter("RaisedToDate", SqlDbType.DateTime);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllCondoFacilityBookingDetails_Result>("SP_DGC_GetAllCondoFacilityBookingDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @RequestedFromRole, @RequestedUserId, @UnitId, @FacilityFromDate, @FacilityToDate, @RaisedFomDate, @RaisedToDate, @StatusId", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, requestedFromRoleParameter, requestedUserIdParameter, unitIdParameter, facilityFromDateParameter, facilityToDateParameter, raisedFomDateParameter, raisedToDateParameter, statusIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllCondoItem_GLItem_MappingDetails_Result> SP_DGC_GetAllCondoItem_GLItem_MappingDetails(string gLItemType, Nullable<Int32> showMapOrUnMap, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

           var gLItemTypeParameter = new SqlParameter("GLItemType", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(gLItemType))
           {
               gLItemTypeParameter.IsNullable = true;
               gLItemTypeParameter.Value = DBNull.Value;
           }
           else
           {
               gLItemTypeParameter.Value = gLItemType;
           }

            var showMapOrUnMapParameter = showMapOrUnMap.HasValue ?
                new SqlParameter("ShowMapOrUnMap", showMapOrUnMap) :
                new SqlParameter("ShowMapOrUnMap", SqlDbType.Int);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllCondoItem_GLItem_MappingDetails_Result>("SP_DGC_GetAllCondoItem_GLItem_MappingDetails @GLItemType, @ShowMapOrUnMap, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", gLItemTypeParameter, showMapOrUnMapParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllCondoMeterials_Result> SP_DGC_GetAllCondoMeterials(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllCondoMeterials_Result>("SP_DGC_GetAllCondoMeterials @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllConfigurationDetails_Result> SP_DGC_GetAllConfigurationDetails()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllConfigurationDetails_Result>("SP_DGC_GetAllConfigurationDetails");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllCountriesDetails_Result> SP_DGC_GetAllCountriesDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllCountriesDetails_Result>("SP_DGC_GetAllCountriesDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllCourtsDetailsByFacilityId_Result> SP_DGC_GetAllCourtsDetailsByFacilityId(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> facilityId)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllCourtsDetailsByFacilityId_Result>("SP_DGC_GetAllCourtsDetailsByFacilityId @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @FacilityId", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, facilityIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllCreditNotes_Result> SP_DGC_GetAllCreditNotes(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllCreditNotes_Result>("SP_DGC_GetAllCreditNotes @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllCreditNoteUnitInvoiceLineItemDetails_Result> SP_DGC_GetAllCreditNoteUnitInvoiceLineItemDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, Nullable<Int64> unitInvoiceID, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

            var unitInvoiceIDParameter = unitInvoiceID.HasValue ?
                new SqlParameter("UnitInvoiceID", unitInvoiceID) :
                new SqlParameter("UnitInvoiceID", SqlDbType.BigInt);

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllCreditNoteUnitInvoiceLineItemDetails_Result>("SP_DGC_GetAllCreditNoteUnitInvoiceLineItemDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @UnitInvoiceID, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, unitInvoiceIDParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllCreditNoteVendorInvoiceLineItemDetails_Result> SP_DGC_GetAllCreditNoteVendorInvoiceLineItemDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, Nullable<Int64> vendorInvoiceID, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

            var vendorInvoiceIDParameter = vendorInvoiceID.HasValue ?
                new SqlParameter("VendorInvoiceID", vendorInvoiceID) :
                new SqlParameter("VendorInvoiceID", SqlDbType.BigInt);

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllCreditNoteVendorInvoiceLineItemDetails_Result>("SP_DGC_GetAllCreditNoteVendorInvoiceLineItemDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @VendorInvoiceID, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, vendorInvoiceIDParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllDebitNotes_Result> SP_DGC_GetAllDebitNotes(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllDebitNotes_Result>("SP_DGC_GetAllDebitNotes @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllDebitNoteUnitInvoiceLineItemDetails_Result> SP_DGC_GetAllDebitNoteUnitInvoiceLineItemDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, Nullable<Int64> unitInvoiceID, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

            var unitInvoiceIDParameter = unitInvoiceID.HasValue ?
                new SqlParameter("UnitInvoiceID", unitInvoiceID) :
                new SqlParameter("UnitInvoiceID", SqlDbType.BigInt);

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllDebitNoteUnitInvoiceLineItemDetails_Result>("SP_DGC_GetAllDebitNoteUnitInvoiceLineItemDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @UnitInvoiceID, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, unitInvoiceIDParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllDebitNoteVendorInvoiceLineItemDetails_Result> SP_DGC_GetAllDebitNoteVendorInvoiceLineItemDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, Nullable<Int64> vendorInvoiceID, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

            var vendorInvoiceIDParameter = vendorInvoiceID.HasValue ?
                new SqlParameter("VendorInvoiceID", vendorInvoiceID) :
                new SqlParameter("VendorInvoiceID", SqlDbType.BigInt);

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllDebitNoteVendorInvoiceLineItemDetails_Result>("SP_DGC_GetAllDebitNoteVendorInvoiceLineItemDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @VendorInvoiceID, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, vendorInvoiceIDParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllDepartmentsDetails_Result> SP_DGC_GetAllDepartmentsDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllDepartmentsDetails_Result>("SP_DGC_GetAllDepartmentsDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllDiscountSetUp_Result> SP_DGC_GetAllDiscountSetUp(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllDiscountSetUp_Result>("SP_DGC_GetAllDiscountSetUp @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllEmailTemplates_Result> SP_DGC_GetAllEmailTemplates(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllEmailTemplates_Result>("SP_DGC_GetAllEmailTemplates @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllEmergencyContacts_Result> SP_DGC_GetAllEmergencyContacts(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllEmergencyContacts_Result>("SP_DGC_GetAllEmergencyContacts @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllFacilitiesBooking_Result> SP_DGC_GetAllFacilitiesBooking(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllFacilitiesBooking_Result>("SP_DGC_GetAllFacilitiesBooking @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllFacilitiesBookingReq_Result> SP_DGC_GetAllFacilitiesBookingReq(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, Nullable<Int32> unitId)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllFacilitiesBookingReq_Result>("SP_DGC_GetAllFacilitiesBookingReq @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @RequestedFromRole, @RequestedUserId, @UnitId", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, requestedFromRoleParameter, requestedUserIdParameter, unitIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllFacilityDetails_Result> SP_DGC_GetAllFacilityDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllFacilityDetails_Result>("SP_DGC_GetAllFacilityDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllFacilitySlotSettingDetails_Result> SP_DGC_GetAllFacilitySlotSettingDetails(Nullable<Int32> facilityId, Nullable<Int32> courtOrLocationOrTrinerId)
        {

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);

            var courtOrLocationOrTrinerIdParameter = courtOrLocationOrTrinerId.HasValue ?
                new SqlParameter("CourtOrLocationOrTrinerId", courtOrLocationOrTrinerId) :
                new SqlParameter("CourtOrLocationOrTrinerId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllFacilitySlotSettingDetails_Result>("SP_DGC_GetAllFacilitySlotSettingDetails @FacilityId, @CourtOrLocationOrTrinerId", facilityIdParameter, courtOrLocationOrTrinerIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllFcmNotificationDetails_Result> SP_DGC_GetAllFcmNotificationDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllFcmNotificationDetails_Result>("SP_DGC_GetAllFcmNotificationDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllFinancialPeriodDetails_Result> SP_DGC_GetAllFinancialPeriodDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllFinancialPeriodDetails_Result>("SP_DGC_GetAllFinancialPeriodDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllFloorNotifications_Result> SP_DGC_GetAllFloorNotifications(string blockid)
        {

           var blockidParameter = new SqlParameter("Blockid", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(blockid))
           {
               blockidParameter.IsNullable = true;
               blockidParameter.Value = DBNull.Value;
           }
           else
           {
               blockidParameter.Value = blockid;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllFloorNotifications_Result>("SP_DGC_GetAllFloorNotifications @Blockid", blockidParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllFloorSettings_Result> SP_DGC_GetAllFloorSettings(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllFloorSettings_Result>("SP_DGC_GetAllFloorSettings @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllGasConsumeDetails_Result> SP_DGC_GetAllGasConsumeDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllGasConsumeDetails_Result>("SP_DGC_GetAllGasConsumeDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllGeneralLedgerEntryDetails_Result> SP_DGC_GetAllGeneralLedgerEntryDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllGeneralLedgerEntryDetails_Result>("SP_DGC_GetAllGeneralLedgerEntryDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllGlAccountItems_Result> SP_DGC_GetAllGlAccountItems(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, Nullable<Int32> accountId, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

            var accountIdParameter = accountId.HasValue ?
                new SqlParameter("AccountId", accountId) :
                new SqlParameter("AccountId", SqlDbType.Int);

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllGlAccountItems_Result>("SP_DGC_GetAllGlAccountItems @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @AccountId, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, accountIdParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllGlGroup_Result> SP_DGC_GetAllGlGroup(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllGlGroup_Result>("SP_DGC_GetAllGlGroup @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllHallBookingInitialSetupDetails_Result> SP_DGC_GetAllHallBookingInitialSetupDetails(ObjectParameter actualTotalRecords)
        {

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllHallBookingInitialSetupDetails_Result>("SP_DGC_GetAllHallBookingInitialSetupDetails @ActualTotalRecords OUT", actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllHallBookingRequest_Result> SP_DGC_GetAllHallBookingRequest(Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> unitId, Nullable<DateTime> eventFromDate, Nullable<DateTime> eventToDate, Nullable<DateTime> raisedFomDate, Nullable<DateTime> raisedToDate, Nullable<Int32> statusID)
        {

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var eventFromDateParameter = eventFromDate.HasValue ?
                new SqlParameter("EventFromDate", eventFromDate) :
                new SqlParameter("EventFromDate", SqlDbType.DateTime);

            var eventToDateParameter = eventToDate.HasValue ?
                new SqlParameter("EventToDate", eventToDate) :
                new SqlParameter("EventToDate", SqlDbType.DateTime);

            var raisedFomDateParameter = raisedFomDate.HasValue ?
                new SqlParameter("RaisedFomDate", raisedFomDate) :
                new SqlParameter("RaisedFomDate", SqlDbType.DateTime);

            var raisedToDateParameter = raisedToDate.HasValue ?
                new SqlParameter("RaisedToDate", raisedToDate) :
                new SqlParameter("RaisedToDate", SqlDbType.DateTime);

            var statusIDParameter = statusID.HasValue ?
                new SqlParameter("StatusID", statusID) :
                new SqlParameter("StatusID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllHallBookingRequest_Result>("SP_DGC_GetAllHallBookingRequest @RequestedFromRole, @RequestedUserId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @UnitId, @EventFromDate, @EventToDate, @RaisedFomDate, @RaisedToDate, @StatusID", requestedFromRoleParameter, requestedUserIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, unitIdParameter, eventFromDateParameter, eventToDateParameter, raisedFomDateParameter, raisedToDateParameter, statusIDParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllHallSlotSettingDetails_Result> SP_DGC_GetAllHallSlotSettingDetails()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllHallSlotSettingDetails_Result>("SP_DGC_GetAllHallSlotSettingDetails");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllHouseRulesDetails_Result> SP_DGC_GetAllHouseRulesDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllHouseRulesDetails_Result>("SP_DGC_GetAllHouseRulesDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllLoanPaymentDetails_Result> SP_DGC_GetAllLoanPaymentDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllLoanPaymentDetails_Result>("SP_DGC_GetAllLoanPaymentDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllLocationDetailsByFacilityId_Result> SP_DGC_GetAllLocationDetailsByFacilityId(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> facilitiesId)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var facilitiesIdParameter = facilitiesId.HasValue ?
                new SqlParameter("FacilitiesId", facilitiesId) :
                new SqlParameter("FacilitiesId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllLocationDetailsByFacilityId_Result>("SP_DGC_GetAllLocationDetailsByFacilityId @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @FacilitiesId", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, facilitiesIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllMaintenanceBillInitialSetupDetails_Result> SP_DGC_GetAllMaintenanceBillInitialSetupDetails(ObjectParameter actualTotalRecords)
        {

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllMaintenanceBillInitialSetupDetails_Result>("SP_DGC_GetAllMaintenanceBillInitialSetupDetails @ActualTotalRecords OUT", actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllMenuDetails_Result> SP_DGC_GetAllMenuDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllMenuDetails_Result>("SP_DGC_GetAllMenuDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllMinutesOfMeetingDetails_Result> SP_DGC_GetAllMinutesOfMeetingDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllMinutesOfMeetingDetails_Result>("SP_DGC_GetAllMinutesOfMeetingDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllNonStockItemDetails_Result> SP_DGC_GetAllNonStockItemDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllNonStockItemDetails_Result>("SP_DGC_GetAllNonStockItemDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllNotifications_Result> SP_DGC_GetAllNotifications(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<DateTime> todaysclintDate)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var todaysclintDateParameter = todaysclintDate.HasValue ?
                new SqlParameter("TodaysclintDate", todaysclintDate) :
                new SqlParameter("TodaysclintDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllNotifications_Result>("SP_DGC_GetAllNotifications @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @TodaysclintDate", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, todaysclintDateParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllPurchaseInvoiceDetails_Result> SP_DGC_GetAllPurchaseInvoiceDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllPurchaseInvoiceDetails_Result>("SP_DGC_GetAllPurchaseInvoiceDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllPurchaseInvoiceLineItemDetails_Result> SP_DGC_GetAllPurchaseInvoiceLineItemDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, Nullable<Int64> purchaseInvoiceID, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new SqlParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new SqlParameter("PurchaseInvoiceID", SqlDbType.BigInt);

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllPurchaseInvoiceLineItemDetails_Result>("SP_DGC_GetAllPurchaseInvoiceLineItemDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @PurchaseInvoiceID, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, purchaseInvoiceIDParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllReconcilationDetailsByMonth_Result> SP_DGC_GetAllReconcilationDetailsByMonth(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, string monthName, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var monthNameParameter = new SqlParameter("MonthName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(monthName))
           {
               monthNameParameter.IsNullable = true;
               monthNameParameter.Value = DBNull.Value;
           }
           else
           {
               monthNameParameter.Value = monthName;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllReconcilationDetailsByMonth_Result>("SP_DGC_GetAllReconcilationDetailsByMonth @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @MonthName, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, monthNameParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllReconciliationAmendments_Result> SP_DGC_GetAllReconciliationAmendments(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, string monthName)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

           var monthNameParameter = new SqlParameter("MonthName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(monthName))
           {
               monthNameParameter.IsNullable = true;
               monthNameParameter.Value = DBNull.Value;
           }
           else
           {
               monthNameParameter.Value = monthName;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllReconciliationAmendments_Result>("SP_DGC_GetAllReconciliationAmendments @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @MonthName", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, monthNameParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllRennovationRequestDetails_Result> SP_DGC_GetAllRennovationRequestDetails(string isSelfRequests, Nullable<Int64> raisedByUserId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> unitId, Nullable<Int32> requestedFromRole, Nullable<DateTime> contractFromDate, Nullable<DateTime> contractToDate, Nullable<DateTime> raisedFomDate, Nullable<DateTime> raisedToDate, Nullable<Int32> statusId, Nullable<DateTime> todaysClientDate)
        {

           var isSelfRequestsParameter = new SqlParameter("IsSelfRequests", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isSelfRequests))
           {
               isSelfRequestsParameter.IsNullable = true;
               isSelfRequestsParameter.Value = DBNull.Value;
           }
           else
           {
               isSelfRequestsParameter.Value = isSelfRequests;
           }

            var raisedByUserIdParameter = raisedByUserId.HasValue ?
                new SqlParameter("RaisedByUserId", raisedByUserId) :
                new SqlParameter("RaisedByUserId", SqlDbType.BigInt);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var contractFromDateParameter = contractFromDate.HasValue ?
                new SqlParameter("ContractFromDate", contractFromDate) :
                new SqlParameter("ContractFromDate", SqlDbType.DateTime);

            var contractToDateParameter = contractToDate.HasValue ?
                new SqlParameter("ContractToDate", contractToDate) :
                new SqlParameter("ContractToDate", SqlDbType.DateTime);

            var raisedFomDateParameter = raisedFomDate.HasValue ?
                new SqlParameter("RaisedFomDate", raisedFomDate) :
                new SqlParameter("RaisedFomDate", SqlDbType.DateTime);

            var raisedToDateParameter = raisedToDate.HasValue ?
                new SqlParameter("RaisedToDate", raisedToDate) :
                new SqlParameter("RaisedToDate", SqlDbType.DateTime);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllRennovationRequestDetails_Result>("SP_DGC_GetAllRennovationRequestDetails @IsSelfRequests, @RaisedByUserId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @UnitId, @RequestedFromRole, @ContractFromDate, @ContractToDate, @RaisedFomDate, @RaisedToDate, @StatusId, @TodaysClientDate", isSelfRequestsParameter, raisedByUserIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, unitIdParameter, requestedFromRoleParameter, contractFromDateParameter, contractToDateParameter, raisedFomDateParameter, raisedToDateParameter, statusIdParameter, todaysClientDateParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllRennovationRequestInitialSetupDetails_Result> SP_DGC_GetAllRennovationRequestInitialSetupDetails(ObjectParameter actualTotalRecords)
        {

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllRennovationRequestInitialSetupDetails_Result>("SP_DGC_GetAllRennovationRequestInitialSetupDetails @ActualTotalRecords OUT", actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllRequestForQuotation_Result> SP_DGC_GetAllRequestForQuotation(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllRequestForQuotation_Result>("SP_DGC_GetAllRequestForQuotation @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllRFQItemsDetails_Result> SP_DGC_GetAllRFQItemsDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> rFQID)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var rFQIDParameter = rFQID.HasValue ?
                new SqlParameter("RFQID", rFQID) :
                new SqlParameter("RFQID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllRFQItemsDetails_Result>("SP_DGC_GetAllRFQItemsDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @RFQID", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, rFQIDParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllRFQQuotesDetails_Result> SP_DGC_GetAllRFQQuotesDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> rFQID)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var rFQIDParameter = rFQID.HasValue ?
                new SqlParameter("RFQID", rFQID) :
                new SqlParameter("RFQID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllRFQQuotesDetails_Result>("SP_DGC_GetAllRFQQuotesDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @RFQID", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, rFQIDParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllRoleNotifications_Result> SP_DGC_GetAllRoleNotifications(string departmentid)
        {

           var departmentidParameter = new SqlParameter("Departmentid", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(departmentid))
           {
               departmentidParameter.IsNullable = true;
               departmentidParameter.Value = DBNull.Value;
           }
           else
           {
               departmentidParameter.Value = departmentid;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllRoleNotifications_Result>("SP_DGC_GetAllRoleNotifications @Departmentid", departmentidParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllRoles_Result> SP_DGC_GetAllRoles(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllRoles_Result>("SP_DGC_GetAllRoles @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllShopMembersDetails_Result> SP_DGC_GetAllShopMembersDetails(Nullable<Int32> shopRegistrationId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var shopRegistrationIdParameter = shopRegistrationId.HasValue ?
                new SqlParameter("ShopRegistrationId", shopRegistrationId) :
                new SqlParameter("ShopRegistrationId", SqlDbType.Int);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllShopMembersDetails_Result>("SP_DGC_GetAllShopMembersDetails @ShopRegistrationId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", shopRegistrationIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllShopRegistrationDetails_Result> SP_DGC_GetAllShopRegistrationDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllShopRegistrationDetails_Result>("SP_DGC_GetAllShopRegistrationDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllSinkFundByFiscalPeriod_Result> SP_DGC_GetAllSinkFundByFiscalPeriod(Nullable<Int32> financialPeriodId)
        {

            var financialPeriodIdParameter = financialPeriodId.HasValue ?
                new SqlParameter("FinancialPeriodId", financialPeriodId) :
                new SqlParameter("FinancialPeriodId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllSinkFundByFiscalPeriod_Result>("SP_DGC_GetAllSinkFundByFiscalPeriod @FinancialPeriodId", financialPeriodIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllStockCategory_Result> SP_DGC_GetAllStockCategory(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllStockCategory_Result>("SP_DGC_GetAllStockCategory @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllStockDispatchDetails_Result> SP_DGC_GetAllStockDispatchDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllStockDispatchDetails_Result>("SP_DGC_GetAllStockDispatchDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllTaxSetUp_Result> SP_DGC_GetAllTaxSetUp(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllTaxSetUp_Result>("SP_DGC_GetAllTaxSetUp @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllTenantRequestDetailsByUnitIds_Result> SP_DGC_GetAllTenantRequestDetailsByUnitIds(string unitIds, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

           var unitIdsParameter = new SqlParameter("UnitIds", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitIds))
           {
               unitIdsParameter.IsNullable = true;
               unitIdsParameter.Value = DBNull.Value;
           }
           else
           {
               unitIdsParameter.Value = unitIds;
           }

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllTenantRequestDetailsByUnitIds_Result>("SP_DGC_GetAllTenantRequestDetailsByUnitIds @UnitIds, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", unitIdsParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUitRequestItemDetails_Result> SP_DGC_GetAllUitRequestItemDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUitRequestItemDetails_Result>("SP_DGC_GetAllUitRequestItemDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnitDisplayFormats_Result> SP_DGC_GetAllUnitDisplayFormats()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnitDisplayFormats_Result>("SP_DGC_GetAllUnitDisplayFormats");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnitGasBillDetails_Result> SP_DGC_GetAllUnitGasBillDetails(Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> unitId)
        {

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnitGasBillDetails_Result>("SP_DGC_GetAllUnitGasBillDetails @RequestedFromRole, @RequestedUserId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @UnitId", requestedFromRoleParameter, requestedUserIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, unitIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnitInvoiceBillDetails_Result> SP_DGC_GetAllUnitInvoiceBillDetails(Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> unitId)
        {

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnitInvoiceBillDetails_Result>("SP_DGC_GetAllUnitInvoiceBillDetails @RequestedFromRole, @RequestedUserId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @UnitId", requestedFromRoleParameter, requestedUserIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, unitIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnitInvoicePaidDetailsByUnitId_Result> SP_DGC_GetAllUnitInvoicePaidDetailsByUnitId(Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> unitId, Nullable<DateTime> entryFromDate, Nullable<DateTime> entryToDate)
        {

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var entryFromDateParameter = entryFromDate.HasValue ?
                new SqlParameter("EntryFromDate", entryFromDate) :
                new SqlParameter("EntryFromDate", SqlDbType.DateTime);

            var entryToDateParameter = entryToDate.HasValue ?
                new SqlParameter("EntryToDate", entryToDate) :
                new SqlParameter("EntryToDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnitInvoicePaidDetailsByUnitId_Result>("SP_DGC_GetAllUnitInvoicePaidDetailsByUnitId @RequestedFromRole, @RequestedUserId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @UnitId, @EntryFromDate, @EntryToDate", requestedFromRoleParameter, requestedUserIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, unitIdParameter, entryFromDateParameter, entryToDateParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnitManintanceBillDetails_Result> SP_DGC_GetAllUnitManintanceBillDetails(Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> unitId)
        {

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnitManintanceBillDetails_Result>("SP_DGC_GetAllUnitManintanceBillDetails @RequestedFromRole, @RequestedUserId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @UnitId", requestedFromRoleParameter, requestedUserIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, unitIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnitNotifications_Result> SP_DGC_GetAllUnitNotifications(string floorid)
        {

           var flooridParameter = new SqlParameter("Floorid", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(floorid))
           {
               flooridParameter.IsNullable = true;
               flooridParameter.Value = DBNull.Value;
           }
           else
           {
               flooridParameter.Value = floorid;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnitNotifications_Result>("SP_DGC_GetAllUnitNotifications @Floorid", flooridParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnitOpenCreditDetails_Result> SP_DGC_GetAllUnitOpenCreditDetails(Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> unitId)
        {

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnitOpenCreditDetails_Result>("SP_DGC_GetAllUnitOpenCreditDetails @RequestedFromRole, @RequestedUserId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @UnitId", requestedFromRoleParameter, requestedUserIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, unitIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnitOwnerSetupDetails_Result> SP_DGC_GetAllUnitOwnerSetupDetails(ObjectParameter actualTotalRecords)
        {

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnitOwnerSetupDetails_Result>("SP_DGC_GetAllUnitOwnerSetupDetails @ActualTotalRecords OUT", actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnitPurchaseDetailsByUnitIds_Result> SP_DGC_GetAllUnitPurchaseDetailsByUnitIds(string unitIds, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

           var unitIdsParameter = new SqlParameter("UnitIds", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitIds))
           {
               unitIdsParameter.IsNullable = true;
               unitIdsParameter.Value = DBNull.Value;
           }
           else
           {
               unitIdsParameter.Value = unitIds;
           }

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnitPurchaseDetailsByUnitIds_Result>("SP_DGC_GetAllUnitPurchaseDetailsByUnitIds @UnitIds, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", unitIdsParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnitRequestAccountItemMappingDetails_Result> SP_DGC_GetAllUnitRequestAccountItemMappingDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnitRequestAccountItemMappingDetails_Result>("SP_DGC_GetAllUnitRequestAccountItemMappingDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnitSettings_Result> SP_DGC_GetAllUnitSettings(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnitSettings_Result>("SP_DGC_GetAllUnitSettings @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnitShopRentBillDetails_Result> SP_DGC_GetAllUnitShopRentBillDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> shopRegistrationId, Nullable<Int32> unitId)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var shopRegistrationIdParameter = shopRegistrationId.HasValue ?
                new SqlParameter("ShopRegistrationId", shopRegistrationId) :
                new SqlParameter("ShopRegistrationId", SqlDbType.Int);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnitShopRentBillDetails_Result>("SP_DGC_GetAllUnitShopRentBillDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @ShopRegistrationId, @UnitId", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, shopRegistrationIdParameter, unitIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnitsOfCondomium_Result> SP_DGC_GetAllUnitsOfCondomium(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnitsOfCondomium_Result>("SP_DGC_GetAllUnitsOfCondomium @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnitWaterBillDetails_Result> SP_DGC_GetAllUnitWaterBillDetails(Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> unitId)
        {

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnitWaterBillDetails_Result>("SP_DGC_GetAllUnitWaterBillDetails @RequestedFromRole, @RequestedUserId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @UnitId", requestedFromRoleParameter, requestedUserIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, unitIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnSourceExpenseRequest_Result> SP_DGC_GetAllUnSourceExpenseRequest(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnSourceExpenseRequest_Result>("SP_DGC_GetAllUnSourceExpenseRequest @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnSourceExpensiveIntraAccountTransfer_Result> SP_DGC_GetAllUnSourceExpensiveIntraAccountTransfer(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnSourceExpensiveIntraAccountTransfer_Result>("SP_DGC_GetAllUnSourceExpensiveIntraAccountTransfer @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnSourceExpensivePayments_Result> SP_DGC_GetAllUnSourceExpensivePayments(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnSourceExpensivePayments_Result>("SP_DGC_GetAllUnSourceExpensivePayments @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUnSourceExpensiveReceipts_Result> SP_DGC_GetAllUnSourceExpensiveReceipts(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUnSourceExpensiveReceipts_Result>("SP_DGC_GetAllUnSourceExpensiveReceipts @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUserDetails_Result> SP_DGC_GetAllUserDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUserDetails_Result>("SP_DGC_GetAllUserDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUtilityBillServices_Result> SP_DGC_GetAllUtilityBillServices()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUtilityBillServices_Result>("SP_DGC_GetAllUtilityBillServices");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUtilityInvoiceDetails_Result> SP_DGC_GetAllUtilityInvoiceDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUtilityInvoiceDetails_Result>("SP_DGC_GetAllUtilityInvoiceDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUtilityInvoiceLineItemDetails_Result> SP_DGC_GetAllUtilityInvoiceLineItemDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, Nullable<Int64> utilityInvoiceID, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

            var utilityInvoiceIDParameter = utilityInvoiceID.HasValue ?
                new SqlParameter("UtilityInvoiceID", utilityInvoiceID) :
                new SqlParameter("UtilityInvoiceID", SqlDbType.BigInt);

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUtilityInvoiceLineItemDetails_Result>("SP_DGC_GetAllUtilityInvoiceLineItemDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @UtilityInvoiceID, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, utilityInvoiceIDParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllUtiltityBillsDetails_Result> SP_DGC_GetAllUtiltityBillsDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllUtiltityBillsDetails_Result>("SP_DGC_GetAllUtiltityBillsDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllVehicleParkingRequest_Result> SP_DGC_GetAllVehicleParkingRequest(Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> unitId, Nullable<DateTime> bookedFromDate, Nullable<DateTime> bookedToDate, Nullable<DateTime> raisedFomDate, Nullable<DateTime> raisedToDate, Nullable<Int32> statusId)
        {

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var bookedFromDateParameter = bookedFromDate.HasValue ?
                new SqlParameter("BookedFromDate", bookedFromDate) :
                new SqlParameter("BookedFromDate", SqlDbType.DateTime);

            var bookedToDateParameter = bookedToDate.HasValue ?
                new SqlParameter("BookedToDate", bookedToDate) :
                new SqlParameter("BookedToDate", SqlDbType.DateTime);

            var raisedFomDateParameter = raisedFomDate.HasValue ?
                new SqlParameter("RaisedFomDate", raisedFomDate) :
                new SqlParameter("RaisedFomDate", SqlDbType.DateTime);

            var raisedToDateParameter = raisedToDate.HasValue ?
                new SqlParameter("RaisedToDate", raisedToDate) :
                new SqlParameter("RaisedToDate", SqlDbType.DateTime);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllVehicleParkingRequest_Result>("SP_DGC_GetAllVehicleParkingRequest @RequestedFromRole, @RequestedUserId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @UnitId, @BookedFromDate, @BookedToDate, @RaisedFomDate, @RaisedToDate, @StatusId", requestedFromRoleParameter, requestedUserIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, unitIdParameter, bookedFromDateParameter, bookedToDateParameter, raisedFomDateParameter, raisedToDateParameter, statusIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllVehicleParkingSlotSetting_Result> SP_DGC_GetAllVehicleParkingSlotSetting(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllVehicleParkingSlotSetting_Result>("SP_DGC_GetAllVehicleParkingSlotSetting @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllVendorComapnyMembersDetails_Result> SP_DGC_GetAllVendorComapnyMembersDetails(Nullable<Int32> vendorRegId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var vendorRegIdParameter = vendorRegId.HasValue ?
                new SqlParameter("VendorRegId", vendorRegId) :
                new SqlParameter("VendorRegId", SqlDbType.Int);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllVendorComapnyMembersDetails_Result>("SP_DGC_GetAllVendorComapnyMembersDetails @VendorRegId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", vendorRegIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllVendorInvoiceActionDetails_Result> SP_DGC_GetAllVendorInvoiceActionDetails(Nullable<Int64> vendorInvoiceId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var vendorInvoiceIdParameter = vendorInvoiceId.HasValue ?
                new SqlParameter("VendorInvoiceId", vendorInvoiceId) :
                new SqlParameter("VendorInvoiceId", SqlDbType.BigInt);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllVendorInvoiceActionDetails_Result>("SP_DGC_GetAllVendorInvoiceActionDetails @VendorInvoiceId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", vendorInvoiceIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllVendorInvoiceDetails_Result> SP_DGC_GetAllVendorInvoiceDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllVendorInvoiceDetails_Result>("SP_DGC_GetAllVendorInvoiceDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllVendorInvoiceLineItemDetails_Result> SP_DGC_GetAllVendorInvoiceLineItemDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, Nullable<Int64> vendorInvoiceID, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

            var vendorInvoiceIDParameter = vendorInvoiceID.HasValue ?
                new SqlParameter("VendorInvoiceID", vendorInvoiceID) :
                new SqlParameter("VendorInvoiceID", SqlDbType.BigInt);

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllVendorInvoiceLineItemDetails_Result>("SP_DGC_GetAllVendorInvoiceLineItemDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @VendorInvoiceID, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, vendorInvoiceIDParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllVendorMappingDetails_Result> SP_DGC_GetAllVendorMappingDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllVendorMappingDetails_Result>("SP_DGC_GetAllVendorMappingDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllVendorRegistrationDetails_Result> SP_DGC_GetAllVendorRegistrationDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllVendorRegistrationDetails_Result>("SP_DGC_GetAllVendorRegistrationDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllVisitorRequestDetails_Result> SP_DGC_GetAllVisitorRequestDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, Nullable<Int32> unitId)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllVisitorRequestDetails_Result>("SP_DGC_GetAllVisitorRequestDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @RequestedFromRole, @RequestedUserId, @UnitId", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, requestedFromRoleParameter, requestedUserIdParameter, unitIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllVisitorRequests_Result> SP_DGC_GetAllVisitorRequests(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, string statusCode, Nullable<Int32> unitId)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

           var statusCodeParameter = new SqlParameter("StatusCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(statusCode))
           {
               statusCodeParameter.IsNullable = true;
               statusCodeParameter.Value = DBNull.Value;
           }
           else
           {
               statusCodeParameter.Value = statusCode;
           }

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllVisitorRequests_Result>("SP_DGC_GetAllVisitorRequests @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @RequestedFromRole, @RequestedUserId, @StatusCode, @UnitId", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, requestedFromRoleParameter, requestedUserIdParameter, statusCodeParameter, unitIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllVisitorsRequestsDetails_Result> SP_DGC_GetAllVisitorsRequestsDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, string statusCode, Nullable<Int32> unitId, Nullable<DateTime> visitingFromDate, Nullable<DateTime> visitingToDate, Nullable<DateTime> reqestRaisedFomDate, Nullable<DateTime> reqestRaisedToDate, Nullable<Int32> statusId)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

           var statusCodeParameter = new SqlParameter("StatusCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(statusCode))
           {
               statusCodeParameter.IsNullable = true;
               statusCodeParameter.Value = DBNull.Value;
           }
           else
           {
               statusCodeParameter.Value = statusCode;
           }

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var visitingFromDateParameter = visitingFromDate.HasValue ?
                new SqlParameter("VisitingFromDate", visitingFromDate) :
                new SqlParameter("VisitingFromDate", SqlDbType.DateTime);

            var visitingToDateParameter = visitingToDate.HasValue ?
                new SqlParameter("VisitingToDate", visitingToDate) :
                new SqlParameter("VisitingToDate", SqlDbType.DateTime);

            var reqestRaisedFomDateParameter = reqestRaisedFomDate.HasValue ?
                new SqlParameter("ReqestRaisedFomDate", reqestRaisedFomDate) :
                new SqlParameter("ReqestRaisedFomDate", SqlDbType.DateTime);

            var reqestRaisedToDateParameter = reqestRaisedToDate.HasValue ?
                new SqlParameter("ReqestRaisedToDate", reqestRaisedToDate) :
                new SqlParameter("ReqestRaisedToDate", SqlDbType.DateTime);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllVisitorsRequestsDetails_Result>("SP_DGC_GetAllVisitorsRequestsDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @RequestedFromRole, @RequestedUserId, @StatusCode, @UnitId, @VisitingFromDate, @VisitingToDate, @ReqestRaisedFomDate, @ReqestRaisedToDate, @StatusId", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, requestedFromRoleParameter, requestedUserIdParameter, statusCodeParameter, unitIdParameter, visitingFromDateParameter, visitingToDateParameter, reqestRaisedFomDateParameter, reqestRaisedToDateParameter, statusIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllVoucherPaymentDetails_Result> SP_DGC_GetAllVoucherPaymentDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllVoucherPaymentDetails_Result>("SP_DGC_GetAllVoucherPaymentDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllWaterBillInitialSetupDetails_Result> SP_DGC_GetAllWaterBillInitialSetupDetails(ObjectParameter actualTotalRecords)
        {

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllWaterBillInitialSetupDetails_Result>("SP_DGC_GetAllWaterBillInitialSetupDetails @ActualTotalRecords OUT", actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllWaterConsumeDetails_Result> SP_DGC_GetAllWaterConsumeDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllWaterConsumeDetails_Result>("SP_DGC_GetAllWaterConsumeDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllWOrkOrderItemsDetails_Result> SP_DGC_GetAllWOrkOrderItemsDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> workOrderID)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var workOrderIDParameter = workOrderID.HasValue ?
                new SqlParameter("WorkOrderID", workOrderID) :
                new SqlParameter("WorkOrderID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllWOrkOrderItemsDetails_Result>("SP_DGC_GetAllWOrkOrderItemsDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @WorkOrderID", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, workOrderIDParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllWOrkOrders_Result> SP_DGC_GetAllWOrkOrders(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllWOrkOrders_Result>("SP_DGC_GetAllWOrkOrders @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAnnouncementById_Result> SP_DGC_GetAnnouncementById(Nullable<Int32> announcementId)
        {

            var announcementIdParameter = announcementId.HasValue ?
                new SqlParameter("AnnouncementId", announcementId) :
                new SqlParameter("AnnouncementId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAnnouncementById_Result>("SP_DGC_GetAnnouncementById @AnnouncementId", announcementIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAssetPurchaselineitemByLineId_Result> SP_DGC_GetAssetPurchaselineitemByLineId(Nullable<Int32> assetsPurchaseLineID)
        {

            var assetsPurchaseLineIDParameter = assetsPurchaseLineID.HasValue ?
                new SqlParameter("AssetsPurchaseLineID", assetsPurchaseLineID) :
                new SqlParameter("AssetsPurchaseLineID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAssetPurchaselineitemByLineId_Result>("SP_DGC_GetAssetPurchaselineitemByLineId @AssetsPurchaseLineID", assetsPurchaseLineIDParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAssetsByAssetId_Result> SP_DGC_GetAssetsByAssetId(Nullable<Int32> assetId)
        {

            var assetIdParameter = assetId.HasValue ?
                new SqlParameter("AssetId", assetId) :
                new SqlParameter("AssetId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAssetsByAssetId_Result>("SP_DGC_GetAssetsByAssetId @AssetId", assetIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAssetsPurchaseByAPurchaseId_Result> SP_DGC_GetAssetsPurchaseByAPurchaseId(Nullable<Int64> assetPurchaseId)
        {

            var assetPurchaseIdParameter = assetPurchaseId.HasValue ?
                new SqlParameter("AssetPurchaseId", assetPurchaseId) :
                new SqlParameter("AssetPurchaseId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAssetsPurchaseByAPurchaseId_Result>("SP_DGC_GetAssetsPurchaseByAPurchaseId @AssetPurchaseId", assetPurchaseIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAssetsPurchasePayableLines_Result> SP_DGC_GetAssetsPurchasePayableLines(Nullable<Int64> assetPurchaseId)
        {

            var assetPurchaseIdParameter = assetPurchaseId.HasValue ?
                new SqlParameter("AssetPurchaseId", assetPurchaseId) :
                new SqlParameter("AssetPurchaseId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAssetsPurchasePayableLines_Result>("SP_DGC_GetAssetsPurchasePayableLines @AssetPurchaseId", assetPurchaseIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAvailableFacilitySlotsByDate_Result> SP_DGC_GetAvailableFacilitySlotsByDate(Nullable<Int32> facilityId, Nullable<Int32> courtOrLocationOrTrainerId, Nullable<DateTime> bookingDate, Nullable<DateTime> toDaysClintsDate)
        {

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);

            var courtOrLocationOrTrainerIdParameter = courtOrLocationOrTrainerId.HasValue ?
                new SqlParameter("CourtOrLocationOrTrainerId", courtOrLocationOrTrainerId) :
                new SqlParameter("CourtOrLocationOrTrainerId", SqlDbType.Int);

            var bookingDateParameter = bookingDate.HasValue ?
                new SqlParameter("BookingDate", bookingDate) :
                new SqlParameter("BookingDate", SqlDbType.DateTime);

            var toDaysClintsDateParameter = toDaysClintsDate.HasValue ?
                new SqlParameter("ToDaysClintsDate", toDaysClintsDate) :
                new SqlParameter("ToDaysClintsDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAvailableFacilitySlotsByDate_Result>("SP_DGC_GetAvailableFacilitySlotsByDate @FacilityId, @CourtOrLocationOrTrainerId, @BookingDate, @ToDaysClintsDate", facilityIdParameter, courtOrLocationOrTrainerIdParameter, bookingDateParameter, toDaysClintsDateParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAvailableSlotsByDate_Result> SP_DGC_GetAvailableSlotsByDate(Nullable<DateTime> bookingDate, Nullable<DateTime> toDaysClintsDate)
        {

            var bookingDateParameter = bookingDate.HasValue ?
                new SqlParameter("BookingDate", bookingDate) :
                new SqlParameter("BookingDate", SqlDbType.DateTime);

            var toDaysClintsDateParameter = toDaysClintsDate.HasValue ?
                new SqlParameter("ToDaysClintsDate", toDaysClintsDate) :
                new SqlParameter("ToDaysClintsDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAvailableSlotsByDate_Result>("SP_DGC_GetAvailableSlotsByDate @BookingDate, @ToDaysClintsDate", bookingDateParameter, toDaysClintsDateParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetBillTypeDetailsById_Result> SP_DGC_GetBillTypeDetailsById(Nullable<Int32> billTypeId, string unitType)
        {

            var billTypeIdParameter = billTypeId.HasValue ?
                new SqlParameter("BillTypeId", billTypeId) :
                new SqlParameter("BillTypeId", SqlDbType.Int);

           var unitTypeParameter = new SqlParameter("UnitType", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitType))
           {
               unitTypeParameter.IsNullable = true;
               unitTypeParameter.Value = DBNull.Value;
           }
           else
           {
               unitTypeParameter.Value = unitType;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetBillTypeDetailsById_Result>("SP_DGC_GetBillTypeDetailsById @BillTypeId, @UnitType", billTypeIdParameter, unitTypeParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetBlockSettingsById_Result> SP_DGC_GetBlockSettingsById(Nullable<Int32> blockId)
        {

            var blockIdParameter = blockId.HasValue ?
                new SqlParameter("BlockId", blockId) :
                new SqlParameter("BlockId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetBlockSettingsById_Result>("SP_DGC_GetBlockSettingsById @BlockId", blockIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetClampFeeDetails_Result> SP_DGC_GetClampFeeDetails(string isShowAllFuturePrice)
        {

           var isShowAllFuturePriceParameter = new SqlParameter("IsShowAllFuturePrice", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isShowAllFuturePrice))
           {
               isShowAllFuturePriceParameter.IsNullable = true;
               isShowAllFuturePriceParameter.Value = DBNull.Value;
           }
           else
           {
               isShowAllFuturePriceParameter.Value = isShowAllFuturePrice;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetClampFeeDetails_Result>("SP_DGC_GetClampFeeDetails @IsShowAllFuturePrice", isShowAllFuturePriceParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetClampFeePayItemDetails_Result> SP_DGC_GetClampFeePayItemDetails(Nullable<Int64> clampRequestId, Nullable<Int32> currentStatusId)
        {

            var clampRequestIdParameter = clampRequestId.HasValue ?
                new SqlParameter("ClampRequestId", clampRequestId) :
                new SqlParameter("ClampRequestId", SqlDbType.BigInt);

            var currentStatusIdParameter = currentStatusId.HasValue ?
                new SqlParameter("CurrentStatusId", currentStatusId) :
                new SqlParameter("CurrentStatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetClampFeePayItemDetails_Result>("SP_DGC_GetClampFeePayItemDetails @ClampRequestId, @CurrentStatusId", clampRequestIdParameter, currentStatusIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetClampPriceDetails_V1_Result> SP_DGC_GetClampPriceDetails_V1()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetClampPriceDetails_V1_Result>("SP_DGC_GetClampPriceDetails_V1");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetClampRequestDetailsById_Result> SP_DGC_GetClampRequestDetailsById(Nullable<Int64> clampRequestId)
        {

            var clampRequestIdParameter = clampRequestId.HasValue ?
                new SqlParameter("ClampRequestId", clampRequestId) :
                new SqlParameter("ClampRequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetClampRequestDetailsById_Result>("SP_DGC_GetClampRequestDetailsById @ClampRequestId", clampRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetClampRequestHistoryById_Result> SP_DGC_GetClampRequestHistoryById(Nullable<Int64> clampRequestId)
        {

            var clampRequestIdParameter = clampRequestId.HasValue ?
                new SqlParameter("ClampRequestId", clampRequestId) :
                new SqlParameter("ClampRequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetClampRequestHistoryById_Result>("SP_DGC_GetClampRequestHistoryById @ClampRequestId", clampRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCommercialUNitInvoiceBillSummeryByUnitID_Result> SP_DGC_GetCommercialUNitInvoiceBillSummeryByUnitID(Nullable<Int32> unitId, Nullable<Int32> shopregistrationid)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var shopregistrationidParameter = shopregistrationid.HasValue ?
                new SqlParameter("shopregistrationid", shopregistrationid) :
                new SqlParameter("shopregistrationid", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCommercialUNitInvoiceBillSummeryByUnitID_Result>("SP_DGC_GetCommercialUNitInvoiceBillSummeryByUnitID @UnitId, @shopregistrationid", unitIdParameter, shopregistrationidParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCommercialUnitLineDetailsByCommercialUnitId_Result> SP_DGC_GetCommercialUnitLineDetailsByCommercialUnitId(Nullable<Int32> commercialUnitId)
        {

            var commercialUnitIdParameter = commercialUnitId.HasValue ?
                new SqlParameter("CommercialUnitId", commercialUnitId) :
                new SqlParameter("CommercialUnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCommercialUnitLineDetailsByCommercialUnitId_Result>("SP_DGC_GetCommercialUnitLineDetailsByCommercialUnitId @CommercialUnitId", commercialUnitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCommercialUnitLinePackagePriceDetailsByUnitId_Result> SP_DGC_GetCommercialUnitLinePackagePriceDetailsByUnitId(Nullable<Int32> commercialUnitId, string isShowAllFuturePrice)
        {

            var commercialUnitIdParameter = commercialUnitId.HasValue ?
                new SqlParameter("CommercialUnitId", commercialUnitId) :
                new SqlParameter("CommercialUnitId", SqlDbType.Int);

           var isShowAllFuturePriceParameter = new SqlParameter("IsShowAllFuturePrice", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isShowAllFuturePrice))
           {
               isShowAllFuturePriceParameter.IsNullable = true;
               isShowAllFuturePriceParameter.Value = DBNull.Value;
           }
           else
           {
               isShowAllFuturePriceParameter.Value = isShowAllFuturePrice;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCommercialUnitLinePackagePriceDetailsByUnitId_Result>("SP_DGC_GetCommercialUnitLinePackagePriceDetailsByUnitId @CommercialUnitId, @IsShowAllFuturePrice", commercialUnitIdParameter, isShowAllFuturePriceParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCommercialUnitRentPayments_ToDoReversal_Result> SP_DGC_GetCommercialUnitRentPayments_ToDoReversal(Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> unitId, Nullable<Int32> shopRegistrationId, Nullable<DateTime> entryFromDate, Nullable<DateTime> entryToDate)
        {

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var shopRegistrationIdParameter = shopRegistrationId.HasValue ?
                new SqlParameter("ShopRegistrationId", shopRegistrationId) :
                new SqlParameter("ShopRegistrationId", SqlDbType.Int);

            var entryFromDateParameter = entryFromDate.HasValue ?
                new SqlParameter("EntryFromDate", entryFromDate) :
                new SqlParameter("EntryFromDate", SqlDbType.DateTime);

            var entryToDateParameter = entryToDate.HasValue ?
                new SqlParameter("EntryToDate", entryToDate) :
                new SqlParameter("EntryToDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCommercialUnitRentPayments_ToDoReversal_Result>("SP_DGC_GetCommercialUnitRentPayments_ToDoReversal @RequestedFromRole, @RequestedUserId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @UnitId, @ShopRegistrationId, @EntryFromDate, @EntryToDate", requestedFromRoleParameter, requestedUserIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, unitIdParameter, shopRegistrationIdParameter, entryFromDateParameter, entryToDateParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCommercialUnits_Result> SP_DGC_GetCommercialUnits()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCommercialUnits_Result>("SP_DGC_GetCommercialUnits");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCommitieMemberDetailsById_Result> SP_DGC_GetCommitieMemberDetailsById(Nullable<Int32> commiteeMemberId)
        {

            var commiteeMemberIdParameter = commiteeMemberId.HasValue ?
                new SqlParameter("CommiteeMemberId", commiteeMemberId) :
                new SqlParameter("CommiteeMemberId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCommitieMemberDetailsById_Result>("SP_DGC_GetCommitieMemberDetailsById @CommiteeMemberId", commiteeMemberIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCompanyMemberDetailsByMemberId_Result> SP_DGC_GetCompanyMemberDetailsByMemberId(Nullable<Int32> vendorMemberId)
        {

            var vendorMemberIdParameter = vendorMemberId.HasValue ?
                new SqlParameter("VendorMemberId", vendorMemberId) :
                new SqlParameter("VendorMemberId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCompanyMemberDetailsByMemberId_Result>("SP_DGC_GetCompanyMemberDetailsByMemberId @VendorMemberId", vendorMemberIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetComplaintDetaisById_Result> SP_DGC_GetComplaintDetaisById(Nullable<Int64> complaintId)
        {

            var complaintIdParameter = complaintId.HasValue ?
                new SqlParameter("ComplaintId", complaintId) :
                new SqlParameter("ComplaintId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetComplaintDetaisById_Result>("SP_DGC_GetComplaintDetaisById @ComplaintId", complaintIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetComplaintHistoryDetailsById_Result> SP_DGC_GetComplaintHistoryDetailsById(Nullable<Int64> complaintId)
        {

            var complaintIdParameter = complaintId.HasValue ?
                new SqlParameter("ComplaintId", complaintId) :
                new SqlParameter("ComplaintId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetComplaintHistoryDetailsById_Result>("SP_DGC_GetComplaintHistoryDetailsById @ComplaintId", complaintIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetComplaintInProgressDetailsById_Result> SP_DGC_GetComplaintInProgressDetailsById(Nullable<Int64> complaintId)
        {

            var complaintIdParameter = complaintId.HasValue ?
                new SqlParameter("ComplaintId", complaintId) :
                new SqlParameter("ComplaintId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetComplaintInProgressDetailsById_Result>("SP_DGC_GetComplaintInProgressDetailsById @ComplaintId", complaintIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCondoAssetDepreciationByDRequestId_Result> SP_DGC_GetCondoAssetDepreciationByDRequestId(Nullable<Int32> depreciationRequestId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var depreciationRequestIdParameter = depreciationRequestId.HasValue ?
                new SqlParameter("DepreciationRequestId", depreciationRequestId) :
                new SqlParameter("DepreciationRequestId", SqlDbType.Int);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCondoAssetDepreciationByDRequestId_Result>("SP_DGC_GetCondoAssetDepreciationByDRequestId @DepreciationRequestId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", depreciationRequestIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCondoAssetDetailsByAPurchaseId_Result> SP_DGC_GetCondoAssetDetailsByAPurchaseId(Nullable<Int64> assetPurchaseId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, string createdBy)
        {

            var assetPurchaseIdParameter = assetPurchaseId.HasValue ?
                new SqlParameter("AssetPurchaseId", assetPurchaseId) :
                new SqlParameter("AssetPurchaseId", SqlDbType.BigInt);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCondoAssetDetailsByAPurchaseId_Result>("SP_DGC_GetCondoAssetDetailsByAPurchaseId @AssetPurchaseId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @CreatedBy", assetPurchaseIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, createdByParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCondoBankAccountByAccountId_Result> SP_DGC_GetCondoBankAccountByAccountId(Nullable<Int32> condoBankAccountID)
        {

            var condoBankAccountIDParameter = condoBankAccountID.HasValue ?
                new SqlParameter("CondoBankAccountID", condoBankAccountID) :
                new SqlParameter("CondoBankAccountID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCondoBankAccountByAccountId_Result>("SP_DGC_GetCondoBankAccountByAccountId @CondoBankAccountID", condoBankAccountIDParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCondoDepreciationRequestDetails_Result> SP_DGC_GetCondoDepreciationRequestDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCondoDepreciationRequestDetails_Result>("SP_DGC_GetCondoDepreciationRequestDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCondoGlItemMappingDetailsByItemRqid_Result> SP_DGC_GetCondoGlItemMappingDetailsByItemRqid(Nullable<Int32> itemRequestId, string glMappingRequestType)
        {

            var itemRequestIdParameter = itemRequestId.HasValue ?
                new SqlParameter("ItemRequestId", itemRequestId) :
                new SqlParameter("ItemRequestId", SqlDbType.Int);

           var glMappingRequestTypeParameter = new SqlParameter("GlMappingRequestType", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(glMappingRequestType))
           {
               glMappingRequestTypeParameter.IsNullable = true;
               glMappingRequestTypeParameter.Value = DBNull.Value;
           }
           else
           {
               glMappingRequestTypeParameter.Value = glMappingRequestType;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCondoGlItemMappingDetailsByItemRqid_Result>("SP_DGC_GetCondoGlItemMappingDetailsByItemRqid @ItemRequestId, @GlMappingRequestType", itemRequestIdParameter, glMappingRequestTypeParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCondomiumSettings_Result> SP_DGC_GetCondomiumSettings()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCondomiumSettings_Result>("SP_DGC_GetCondomiumSettings");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetConfigurationById_Result> SP_DGC_GetConfigurationById(Nullable<Int32> configurationId)
        {

            var configurationIdParameter = configurationId.HasValue ?
                new SqlParameter("ConfigurationId", configurationId) :
                new SqlParameter("ConfigurationId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetConfigurationById_Result>("SP_DGC_GetConfigurationById @ConfigurationId", configurationIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetConfigurationValuesByName_Result> SP_DGC_GetConfigurationValuesByName(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, string configurationName)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

           var configurationNameParameter = new SqlParameter("ConfigurationName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(configurationName))
           {
               configurationNameParameter.IsNullable = true;
               configurationNameParameter.Value = DBNull.Value;
           }
           else
           {
               configurationNameParameter.Value = configurationName;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetConfigurationValuesByName_Result>("SP_DGC_GetConfigurationValuesByName @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @ConfigurationName", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, configurationNameParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetConfigValuesByName_Result> SP_DGC_GetConfigValuesByName(string configName)
        {

           var configNameParameter = new SqlParameter("ConfigName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(configName))
           {
               configNameParameter.IsNullable = true;
               configNameParameter.Value = DBNull.Value;
           }
           else
           {
               configNameParameter.Value = configName;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetConfigValuesByName_Result>("SP_DGC_GetConfigValuesByName @ConfigName", configNameParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCountries_Result> SP_DGC_GetCountries(string isMalaySia)
        {

           var isMalaySiaParameter = new SqlParameter("IsMalaySia", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isMalaySia))
           {
               isMalaySiaParameter.IsNullable = true;
               isMalaySiaParameter.Value = DBNull.Value;
           }
           else
           {
               isMalaySiaParameter.Value = isMalaySia;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCountries_Result>("SP_DGC_GetCountries @IsMalaySia", isMalaySiaParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCountryDetailsById_Result> SP_DGC_GetCountryDetailsById(Nullable<Int32> countryId)
        {

            var countryIdParameter = countryId.HasValue ?
                new SqlParameter("CountryId", countryId) :
                new SqlParameter("CountryId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCountryDetailsById_Result>("SP_DGC_GetCountryDetailsById @CountryId", countryIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCourtNameById_Result> SP_DGC_GetCourtNameById(Nullable<Int32> gameId)
        {

            var gameIdParameter = gameId.HasValue ?
                new SqlParameter("GameId", gameId) :
                new SqlParameter("GameId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCourtNameById_Result>("SP_DGC_GetCourtNameById @GameId", gameIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCourtPaymentPackagesId_Result> SP_DGC_GetCourtPaymentPackagesId(Nullable<Int32> courtID)
        {

            var courtIDParameter = courtID.HasValue ?
                new SqlParameter("CourtID", courtID) :
                new SqlParameter("CourtID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCourtPaymentPackagesId_Result>("SP_DGC_GetCourtPaymentPackagesId @CourtID", courtIDParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCourtsByFacilityId_Result> SP_DGC_GetCourtsByFacilityId(Nullable<Int32> facilityId)
        {

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCourtsByFacilityId_Result>("SP_DGC_GetCourtsByFacilityId @FacilityId", facilityIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCourtShutDownDatesById_Result> SP_DGC_GetCourtShutDownDatesById(Nullable<Int32> courtID)
        {

            var courtIDParameter = courtID.HasValue ?
                new SqlParameter("CourtID", courtID) :
                new SqlParameter("CourtID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCourtShutDownDatesById_Result>("SP_DGC_GetCourtShutDownDatesById @CourtID", courtIDParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCourtWorkingHoursByCourtId_Result> SP_DGC_GetCourtWorkingHoursByCourtId(Nullable<Int32> courtID)
        {

            var courtIDParameter = courtID.HasValue ?
                new SqlParameter("CourtID", courtID) :
                new SqlParameter("CourtID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCourtWorkingHoursByCourtId_Result>("SP_DGC_GetCourtWorkingHoursByCourtId @CourtID", courtIDParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCreditNoteDetailsbyId_Result> SP_DGC_GetCreditNoteDetailsbyId(Nullable<Int64> creditNoteID, string createdBy, ObjectParameter currentCreditNumber, ObjectParameter currentCreditNoteId)
        {

            var creditNoteIDParameter = creditNoteID.HasValue ?
                new SqlParameter("CreditNoteID", creditNoteID) :
                new SqlParameter("CreditNoteID", SqlDbType.BigInt);

           var createdByParameter = new SqlParameter("createdBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var currentCreditNumberParameter = new SqlParameter("CurrentCreditNumber", SqlDbType.VarChar, 500);
               currentCreditNumberParameter.Direction = System.Data.ParameterDirection.Output;
               currentCreditNumberParameter.Value = currentCreditNumber != null ? currentCreditNumber.Value : null;

           var currentCreditNoteIdParameter = new SqlParameter("CurrentCreditNoteId", SqlDbType.BigInt);
               currentCreditNoteIdParameter.Direction = System.Data.ParameterDirection.Output;
               currentCreditNoteIdParameter.Value = currentCreditNoteId != null ? currentCreditNoteId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCreditNoteDetailsbyId_Result>("SP_DGC_GetCreditNoteDetailsbyId @CreditNoteID, @createdBy, @CurrentCreditNumber OUT, @CurrentCreditNoteId OUT", creditNoteIDParameter, createdByParameter, currentCreditNumberParameter, currentCreditNoteIdParameter);

            currentCreditNumber.Value = currentCreditNumberParameter.Value;
            currentCreditNoteId.Value = currentCreditNoteIdParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCurrentAccessGoodsInfoByUnitId_Result> SP_DGC_GetCurrentAccessGoodsInfoByUnitId(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCurrentAccessGoodsInfoByUnitId_Result>("SP_DGC_GetCurrentAccessGoodsInfoByUnitId @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCurrentActiveCommiteeMembers_Result> SP_DGC_GetCurrentActiveCommiteeMembers()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCurrentActiveCommiteeMembers_Result>("SP_DGC_GetCurrentActiveCommiteeMembers");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCurrentAnnouncements_Result> SP_DGC_GetCurrentAnnouncements(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<DateTime> todaysclintDate)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var todaysclintDateParameter = todaysclintDate.HasValue ?
                new SqlParameter("TodaysclintDate", todaysclintDate) :
                new SqlParameter("TodaysclintDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCurrentAnnouncements_Result>("SP_DGC_GetCurrentAnnouncements @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @TodaysclintDate", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, todaysclintDateParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCurrentCommiteeMembers_Result> SP_DGC_GetCurrentCommiteeMembers()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCurrentCommiteeMembers_Result>("SP_DGC_GetCurrentCommiteeMembers");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCurrentInvoiceInfoByUnitId_Result> SP_DGC_GetCurrentInvoiceInfoByUnitId(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCurrentInvoiceInfoByUnitId_Result>("SP_DGC_GetCurrentInvoiceInfoByUnitId @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCurrentNotifications_Result> SP_DGC_GetCurrentNotifications(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCurrentNotifications_Result>("SP_DGC_GetCurrentNotifications @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetDebitNoteDetailsbyId_Result> SP_DGC_GetDebitNoteDetailsbyId(Nullable<Int64> debitNoteID, string createdBy, ObjectParameter currentDebitNumber, ObjectParameter currentDebitNoteId)
        {

            var debitNoteIDParameter = debitNoteID.HasValue ?
                new SqlParameter("DebitNoteID", debitNoteID) :
                new SqlParameter("DebitNoteID", SqlDbType.BigInt);

           var createdByParameter = new SqlParameter("createdBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var currentDebitNumberParameter = new SqlParameter("CurrentDebitNumber", SqlDbType.VarChar, 500);
               currentDebitNumberParameter.Direction = System.Data.ParameterDirection.Output;
               currentDebitNumberParameter.Value = currentDebitNumber != null ? currentDebitNumber.Value : null;

           var currentDebitNoteIdParameter = new SqlParameter("CurrentDebitNoteId", SqlDbType.BigInt);
               currentDebitNoteIdParameter.Direction = System.Data.ParameterDirection.Output;
               currentDebitNoteIdParameter.Value = currentDebitNoteId != null ? currentDebitNoteId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetDebitNoteDetailsbyId_Result>("SP_DGC_GetDebitNoteDetailsbyId @DebitNoteID, @createdBy, @CurrentDebitNumber OUT, @CurrentDebitNoteId OUT", debitNoteIDParameter, createdByParameter, currentDebitNumberParameter, currentDebitNoteIdParameter);

            currentDebitNumber.Value = currentDebitNumberParameter.Value;
            currentDebitNoteId.Value = currentDebitNoteIdParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetDepartmentByDptId_Result> SP_DGC_GetDepartmentByDptId(Nullable<Int32> departmentId)
        {

            var departmentIdParameter = departmentId.HasValue ?
                new SqlParameter("DepartmentId", departmentId) :
                new SqlParameter("DepartmentId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetDepartmentByDptId_Result>("SP_DGC_GetDepartmentByDptId @DepartmentId", departmentIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetDepreciatioRequestByRequestId_Result> SP_DGC_GetDepreciatioRequestByRequestId(Nullable<Int32> depreciationRequestId)
        {

            var depreciationRequestIdParameter = depreciationRequestId.HasValue ?
                new SqlParameter("DepreciationRequestId", depreciationRequestId) :
                new SqlParameter("DepreciationRequestId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetDepreciatioRequestByRequestId_Result>("SP_DGC_GetDepreciatioRequestByRequestId @DepreciationRequestId", depreciationRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetDiscountSetUpById_Result> SP_DGC_GetDiscountSetUpById(Nullable<Int32> discountSetUpId)
        {

            var discountSetUpIdParameter = discountSetUpId.HasValue ?
                new SqlParameter("DiscountSetUpId", discountSetUpId) :
                new SqlParameter("DiscountSetUpId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetDiscountSetUpById_Result>("SP_DGC_GetDiscountSetUpById @DiscountSetUpId", discountSetUpIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetEligibileVendorInvociesForDNFwd_Result> SP_DGC_GetEligibileVendorInvociesForDNFwd(Nullable<Int64> debitNoteId, Nullable<Int64> vendorRegistrationId)
        {

            var debitNoteIdParameter = debitNoteId.HasValue ?
                new SqlParameter("DebitNoteId", debitNoteId) :
                new SqlParameter("DebitNoteId", SqlDbType.BigInt);

            var vendorRegistrationIdParameter = vendorRegistrationId.HasValue ?
                new SqlParameter("VendorRegistrationId", vendorRegistrationId) :
                new SqlParameter("VendorRegistrationId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetEligibileVendorInvociesForDNFwd_Result>("SP_DGC_GetEligibileVendorInvociesForDNFwd @DebitNoteId, @VendorRegistrationId", debitNoteIdParameter, vendorRegistrationIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetEmailTemplate_Result> SP_DGC_GetEmailTemplate(string templateName)
        {

           var templateNameParameter = new SqlParameter("TemplateName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(templateName))
           {
               templateNameParameter.IsNullable = true;
               templateNameParameter.Value = DBNull.Value;
           }
           else
           {
               templateNameParameter.Value = templateName;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetEmailTemplate_Result>("SP_DGC_GetEmailTemplate @TemplateName", templateNameParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetEmailTemplateByID_Result> SP_DGC_GetEmailTemplateByID(Nullable<Int32> templateId)
        {

            var templateIdParameter = templateId.HasValue ?
                new SqlParameter("TemplateId", templateId) :
                new SqlParameter("TemplateId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetEmailTemplateByID_Result>("SP_DGC_GetEmailTemplateByID @TemplateId", templateIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetEmergencyContactById_Result> SP_DGC_GetEmergencyContactById(Nullable<Int32> contactId)
        {

            var contactIdParameter = contactId.HasValue ?
                new SqlParameter("ContactId", contactId) :
                new SqlParameter("ContactId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetEmergencyContactById_Result>("SP_DGC_GetEmergencyContactById @ContactId", contactIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFacilitiesDetialsById_Result> SP_DGC_GetFacilitiesDetialsById(Nullable<Int32> condoFacilityBookingId)
        {

            var condoFacilityBookingIdParameter = condoFacilityBookingId.HasValue ?
                new SqlParameter("CondoFacilityBookingId", condoFacilityBookingId) :
                new SqlParameter("CondoFacilityBookingId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFacilitiesDetialsById_Result>("SP_DGC_GetFacilitiesDetialsById @CondoFacilityBookingId", condoFacilityBookingIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFacilityBookFeePayItemDetails_Result> SP_DGC_GetFacilityBookFeePayItemDetails(Nullable<Int64> facilityBookingRequestId, Nullable<Int32> currentStatusId)
        {

            var facilityBookingRequestIdParameter = facilityBookingRequestId.HasValue ?
                new SqlParameter("FacilityBookingRequestId", facilityBookingRequestId) :
                new SqlParameter("FacilityBookingRequestId", SqlDbType.BigInt);

            var currentStatusIdParameter = currentStatusId.HasValue ?
                new SqlParameter("CurrentStatusId", currentStatusId) :
                new SqlParameter("CurrentStatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFacilityBookFeePayItemDetails_Result>("SP_DGC_GetFacilityBookFeePayItemDetails @FacilityBookingRequestId, @CurrentStatusId", facilityBookingRequestIdParameter, currentStatusIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFacilityBookingDetailsForNext60Days_Result> SP_DGC_GetFacilityBookingDetailsForNext60Days(Nullable<DateTime> todaysClientDate, Nullable<Int32> facilityId)
        {

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFacilityBookingDetailsForNext60Days_Result>("SP_DGC_GetFacilityBookingDetailsForNext60Days @TodaysClientDate, @FacilityId", todaysClientDateParameter, facilityIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFacilityBookingFeeRefundItemDetails_Result> SP_DGC_GetFacilityBookingFeeRefundItemDetails(Nullable<Int64> condoFacilityBookingId, Nullable<Int32> currentStatusId)
        {

            var condoFacilityBookingIdParameter = condoFacilityBookingId.HasValue ?
                new SqlParameter("CondoFacilityBookingId", condoFacilityBookingId) :
                new SqlParameter("CondoFacilityBookingId", SqlDbType.BigInt);

            var currentStatusIdParameter = currentStatusId.HasValue ?
                new SqlParameter("CurrentStatusId", currentStatusId) :
                new SqlParameter("CurrentStatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFacilityBookingFeeRefundItemDetails_Result>("SP_DGC_GetFacilityBookingFeeRefundItemDetails @CondoFacilityBookingId, @CurrentStatusId", condoFacilityBookingIdParameter, currentStatusIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFacilityBookingHistoryById_Result> SP_DGC_GetFacilityBookingHistoryById(Nullable<Int32> condoFacilityBookingId)
        {

            var condoFacilityBookingIdParameter = condoFacilityBookingId.HasValue ?
                new SqlParameter("CondoFacilityBookingId", condoFacilityBookingId) :
                new SqlParameter("CondoFacilityBookingId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFacilityBookingHistoryById_Result>("SP_DGC_GetFacilityBookingHistoryById @CondoFacilityBookingId", condoFacilityBookingIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFacilityChargesByBookingSlotId_Result> SP_DGC_GetFacilityChargesByBookingSlotId(Nullable<Int32> facilityId, Nullable<Int32> slotId)
        {

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);

            var slotIdParameter = slotId.HasValue ?
                new SqlParameter("SlotId", slotId) :
                new SqlParameter("SlotId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFacilityChargesByBookingSlotId_Result>("SP_DGC_GetFacilityChargesByBookingSlotId @FacilityId, @SlotId", facilityIdParameter, slotIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFacilityCourtByCourtId_Result> SP_DGC_GetFacilityCourtByCourtId(Nullable<Int32> courtID)
        {

            var courtIDParameter = courtID.HasValue ?
                new SqlParameter("CourtID", courtID) :
                new SqlParameter("CourtID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFacilityCourtByCourtId_Result>("SP_DGC_GetFacilityCourtByCourtId @CourtID", courtIDParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFacilityDetailsById_Result> SP_DGC_GetFacilityDetailsById(Nullable<Int32> facilityId)
        {

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFacilityDetailsById_Result>("SP_DGC_GetFacilityDetailsById @FacilityId", facilityIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFacilityLastBookingDateBySlotId_Result> SP_DGC_GetFacilityLastBookingDateBySlotId(Nullable<Int32> slotId, Nullable<Int32> courtOrLocationOrTrinerId)
        {

            var slotIdParameter = slotId.HasValue ?
                new SqlParameter("SlotId", slotId) :
                new SqlParameter("SlotId", SqlDbType.Int);

            var courtOrLocationOrTrinerIdParameter = courtOrLocationOrTrinerId.HasValue ?
                new SqlParameter("CourtOrLocationOrTrinerId", courtOrLocationOrTrinerId) :
                new SqlParameter("CourtOrLocationOrTrinerId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFacilityLastBookingDateBySlotId_Result>("SP_DGC_GetFacilityLastBookingDateBySlotId @SlotId, @CourtOrLocationOrTrinerId", slotIdParameter, courtOrLocationOrTrinerIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFacilityLineDetailsByFacilityId_Result> SP_DGC_GetFacilityLineDetailsByFacilityId(Nullable<Int32> facilityId)
        {

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFacilityLineDetailsByFacilityId_Result>("SP_DGC_GetFacilityLineDetailsByFacilityId @FacilityId", facilityIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFacilityLinePackagePriceDetailsByFacilityId_Result> SP_DGC_GetFacilityLinePackagePriceDetailsByFacilityId(Nullable<Int32> facilityId)
        {

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFacilityLinePackagePriceDetailsByFacilityId_Result>("SP_DGC_GetFacilityLinePackagePriceDetailsByFacilityId @FacilityId", facilityIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFacilityLinePackagePriceDetailsByLineId_Result> SP_DGC_GetFacilityLinePackagePriceDetailsByLineId(Nullable<Int32> facilityId, string isShowAllFuturePrice)
        {

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);

           var isShowAllFuturePriceParameter = new SqlParameter("IsShowAllFuturePrice", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isShowAllFuturePrice))
           {
               isShowAllFuturePriceParameter.IsNullable = true;
               isShowAllFuturePriceParameter.Value = DBNull.Value;
           }
           else
           {
               isShowAllFuturePriceParameter.Value = isShowAllFuturePrice;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFacilityLinePackagePriceDetailsByLineId_Result>("SP_DGC_GetFacilityLinePackagePriceDetailsByLineId @FacilityId, @IsShowAllFuturePrice", facilityIdParameter, isShowAllFuturePriceParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFacilityLocationByLocationId_Result> SP_DGC_GetFacilityLocationByLocationId(Nullable<Int32> locationID)
        {

            var locationIDParameter = locationID.HasValue ?
                new SqlParameter("LocationID", locationID) :
                new SqlParameter("LocationID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFacilityLocationByLocationId_Result>("SP_DGC_GetFacilityLocationByLocationId @LocationID", locationIDParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetfacilityReqById_Result> SP_DGC_GetfacilityReqById(Nullable<Int32> facilitiesId)
        {

            var facilitiesIdParameter = facilitiesId.HasValue ?
                new SqlParameter("FacilitiesId", facilitiesId) :
                new SqlParameter("FacilitiesId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetfacilityReqById_Result>("SP_DGC_GetfacilityReqById @FacilitiesId", facilitiesIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFcmNotificationDetailsByControllerName_Result> SP_DGC_GetFcmNotificationDetailsByControllerName(string controllerName, Nullable<Int32> statusId, string actionName)
        {

           var controllerNameParameter = new SqlParameter("ControllerName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(controllerName))
           {
               controllerNameParameter.IsNullable = true;
               controllerNameParameter.Value = DBNull.Value;
           }
           else
           {
               controllerNameParameter.Value = controllerName;
           }

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

           var actionNameParameter = new SqlParameter("ActionName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(actionName))
           {
               actionNameParameter.IsNullable = true;
               actionNameParameter.Value = DBNull.Value;
           }
           else
           {
               actionNameParameter.Value = actionName;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFcmNotificationDetailsByControllerName_Result>("SP_DGC_GetFcmNotificationDetailsByControllerName @ControllerName, @StatusId, @ActionName", controllerNameParameter, statusIdParameter, actionNameParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFcmNotificationDetailsById_Result> SP_DGC_GetFcmNotificationDetailsById(Nullable<Int32> fcmNotificationId)
        {

            var fcmNotificationIdParameter = fcmNotificationId.HasValue ?
                new SqlParameter("FcmNotificationId", fcmNotificationId) :
                new SqlParameter("FcmNotificationId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFcmNotificationDetailsById_Result>("SP_DGC_GetFcmNotificationDetailsById @FcmNotificationId", fcmNotificationIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFinancialPeriodDetailsByID_Result> SP_DGC_GetFinancialPeriodDetailsByID(Nullable<Int32> financialPeriodId)
        {

            var financialPeriodIdParameter = financialPeriodId.HasValue ?
                new SqlParameter("FinancialPeriodId", financialPeriodId) :
                new SqlParameter("FinancialPeriodId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFinancialPeriodDetailsByID_Result>("SP_DGC_GetFinancialPeriodDetailsByID @FinancialPeriodId", financialPeriodIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFloorSettingsById_Result> SP_DGC_GetFloorSettingsById(Nullable<Int32> floorId)
        {

            var floorIdParameter = floorId.HasValue ?
                new SqlParameter("FloorId", floorId) :
                new SqlParameter("FloorId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFloorSettingsById_Result>("SP_DGC_GetFloorSettingsById @FloorId", floorIdParameter);


            return retVal;

        }
        public virtual int SP_DGC_GetGameCourtByCourtId(Nullable<Int32> courtID)
        {

            var courtIDParameter = courtID.HasValue ?
                new SqlParameter("CourtID", courtID) :
                new SqlParameter("CourtID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_GetGameCourtByCourtId @CourtID", courtIDParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetGasConsumeByMeterReadingId_Result> SP_DGC_GetGasConsumeByMeterReadingId(Nullable<Int64> meterReadingId)
        {

            var meterReadingIdParameter = meterReadingId.HasValue ?
                new SqlParameter("MeterReadingId", meterReadingId) :
                new SqlParameter("MeterReadingId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetGasConsumeByMeterReadingId_Result>("SP_DGC_GetGasConsumeByMeterReadingId @MeterReadingId", meterReadingIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetGlAccountMappingByRequestId_Result> SP_DGC_GetGlAccountMappingByRequestId(Nullable<Int32> itemRequestId, string glItemMapType)
        {

            var itemRequestIdParameter = itemRequestId.HasValue ?
                new SqlParameter("itemRequestId", itemRequestId) :
                new SqlParameter("itemRequestId", SqlDbType.Int);

           var glItemMapTypeParameter = new SqlParameter("GlItemMapType", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(glItemMapType))
           {
               glItemMapTypeParameter.IsNullable = true;
               glItemMapTypeParameter.Value = DBNull.Value;
           }
           else
           {
               glItemMapTypeParameter.Value = glItemMapType;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetGlAccountMappingByRequestId_Result>("SP_DGC_GetGlAccountMappingByRequestId @itemRequestId, @GlItemMapType", itemRequestIdParameter, glItemMapTypeParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetGoodsPriceDetails_Result> SP_DGC_GetGoodsPriceDetails()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetGoodsPriceDetails_Result>("SP_DGC_GetGoodsPriceDetails");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetHallBookFeePayItemDetails_Result> SP_DGC_GetHallBookFeePayItemDetails(Nullable<Int64> hallBookingRequestId, Nullable<Int32> currentStatusId)
        {

            var hallBookingRequestIdParameter = hallBookingRequestId.HasValue ?
                new SqlParameter("HallBookingRequestId", hallBookingRequestId) :
                new SqlParameter("HallBookingRequestId", SqlDbType.BigInt);

            var currentStatusIdParameter = currentStatusId.HasValue ?
                new SqlParameter("CurrentStatusId", currentStatusId) :
                new SqlParameter("CurrentStatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetHallBookFeePayItemDetails_Result>("SP_DGC_GetHallBookFeePayItemDetails @HallBookingRequestId, @CurrentStatusId", hallBookingRequestIdParameter, currentStatusIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetHallBookFeeRefundItemDetails_Result> SP_DGC_GetHallBookFeeRefundItemDetails(Nullable<Int64> hallBookingRequestId, Nullable<Int32> currentStatusId)
        {

            var hallBookingRequestIdParameter = hallBookingRequestId.HasValue ?
                new SqlParameter("HallBookingRequestId", hallBookingRequestId) :
                new SqlParameter("HallBookingRequestId", SqlDbType.BigInt);

            var currentStatusIdParameter = currentStatusId.HasValue ?
                new SqlParameter("CurrentStatusId", currentStatusId) :
                new SqlParameter("CurrentStatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetHallBookFeeRefundItemDetails_Result>("SP_DGC_GetHallBookFeeRefundItemDetails @HallBookingRequestId, @CurrentStatusId", hallBookingRequestIdParameter, currentStatusIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetHallBookingHistoryById_Result> SP_DGC_GetHallBookingHistoryById(Nullable<Int64> hallBookingRequestId)
        {

            var hallBookingRequestIdParameter = hallBookingRequestId.HasValue ?
                new SqlParameter("HallBookingRequestId", hallBookingRequestId) :
                new SqlParameter("HallBookingRequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetHallBookingHistoryById_Result>("SP_DGC_GetHallBookingHistoryById @HallBookingRequestId", hallBookingRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetHallBookingRequestByHBRId_Result> SP_DGC_GetHallBookingRequestByHBRId(Nullable<Int64> hallBookingRequestId)
        {

            var hallBookingRequestIdParameter = hallBookingRequestId.HasValue ?
                new SqlParameter("HallBookingRequestId", hallBookingRequestId) :
                new SqlParameter("HallBookingRequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetHallBookingRequestByHBRId_Result>("SP_DGC_GetHallBookingRequestByHBRId @HallBookingRequestId", hallBookingRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetHallDetailsForNext60Days_Result> SP_DGC_GetHallDetailsForNext60Days(Nullable<DateTime> todaysClientDate)
        {

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetHallDetailsForNext60Days_Result>("SP_DGC_GetHallDetailsForNext60Days @TodaysClientDate", todaysClientDateParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetHallFeeDetails_Result> SP_DGC_GetHallFeeDetails(string isShowAllFuturePrice)
        {

           var isShowAllFuturePriceParameter = new SqlParameter("IsShowAllFuturePrice", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isShowAllFuturePrice))
           {
               isShowAllFuturePriceParameter.IsNullable = true;
               isShowAllFuturePriceParameter.Value = DBNull.Value;
           }
           else
           {
               isShowAllFuturePriceParameter.Value = isShowAllFuturePrice;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetHallFeeDetails_Result>("SP_DGC_GetHallFeeDetails @IsShowAllFuturePrice", isShowAllFuturePriceParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetHallFeeDetailsByBookinglotId_Result> SP_DGC_GetHallFeeDetailsByBookinglotId(Nullable<Int32> slotId)
        {

            var slotIdParameter = slotId.HasValue ?
                new SqlParameter("SlotId", slotId) :
                new SqlParameter("SlotId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetHallFeeDetailsByBookinglotId_Result>("SP_DGC_GetHallFeeDetailsByBookinglotId @SlotId", slotIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetHallLastBookingDateBySlotId_Result> SP_DGC_GetHallLastBookingDateBySlotId(Nullable<Int32> slotId)
        {

            var slotIdParameter = slotId.HasValue ?
                new SqlParameter("SlotId", slotId) :
                new SqlParameter("SlotId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetHallLastBookingDateBySlotId_Result>("SP_DGC_GetHallLastBookingDateBySlotId @SlotId", slotIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetHallPriceDetails_V1_Result> SP_DGC_GetHallPriceDetails_V1()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetHallPriceDetails_V1_Result>("SP_DGC_GetHallPriceDetails_V1");


            return retVal;

        }
        public virtual int SP_DGC_GetInitialRFQDetails(Nullable<Int32> rFQID, string createdBy, ObjectParameter rFQNumber, ObjectParameter currentRFQId)
        {

            var rFQIDParameter = rFQID.HasValue ?
                new SqlParameter("RFQID", rFQID) :
                new SqlParameter("RFQID", SqlDbType.Int);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var rFQNumberParameter = new SqlParameter("RFQNumber", SqlDbType.VarChar, 500);
               rFQNumberParameter.Direction = System.Data.ParameterDirection.Output;
               rFQNumberParameter.Value = rFQNumber != null ? rFQNumber.Value : null;

           var currentRFQIdParameter = new SqlParameter("CurrentRFQId", SqlDbType.Int);
               currentRFQIdParameter.Direction = System.Data.ParameterDirection.Output;
               currentRFQIdParameter.Value = currentRFQId != null ? currentRFQId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_GetInitialRFQDetails @RFQID, @CreatedBy, @RFQNumber OUT, @CurrentRFQId OUT", rFQIDParameter, createdByParameter, rFQNumberParameter, currentRFQIdParameter);

            rFQNumber.Value = rFQNumberParameter.Value;
            currentRFQId.Value = currentRFQIdParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetInitialSetupErrorsBasedOnLineNumber_Result> SP_DGC_GetInitialSetupErrorsBasedOnLineNumber(Nullable<Int32> lineNumber, string errorTable)
        {

            var lineNumberParameter = lineNumber.HasValue ?
                new SqlParameter("LineNumber", lineNumber) :
                new SqlParameter("LineNumber", SqlDbType.Int);

           var errorTableParameter = new SqlParameter("ErrorTable", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(errorTable))
           {
               errorTableParameter.IsNullable = true;
               errorTableParameter.Value = DBNull.Value;
           }
           else
           {
               errorTableParameter.Value = errorTable;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetInitialSetupErrorsBasedOnLineNumber_Result>("SP_DGC_GetInitialSetupErrorsBasedOnLineNumber @LineNumber, @ErrorTable", lineNumberParameter, errorTableParameter);


            return retVal;

        }
        public virtual int SP_DGC_GetInitialWorkOrderDetails(Nullable<Int32> workOrderID, ObjectParameter workOrederNumber, ObjectParameter currentWorkOrderId)
        {

            var workOrderIDParameter = workOrderID.HasValue ?
                new SqlParameter("WorkOrderID", workOrderID) :
                new SqlParameter("WorkOrderID", SqlDbType.Int);

           var workOrederNumberParameter = new SqlParameter("WorkOrederNumber", SqlDbType.VarChar, 500);
               workOrederNumberParameter.Direction = System.Data.ParameterDirection.Output;
               workOrederNumberParameter.Value = workOrederNumber != null ? workOrederNumber.Value : null;

           var currentWorkOrderIdParameter = new SqlParameter("CurrentWorkOrderId", SqlDbType.Int);
               currentWorkOrderIdParameter.Direction = System.Data.ParameterDirection.Output;
               currentWorkOrderIdParameter.Value = currentWorkOrderId != null ? currentWorkOrderId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_GetInitialWorkOrderDetails @WorkOrderID, @WorkOrederNumber OUT, @CurrentWorkOrderId OUT", workOrderIDParameter, workOrederNumberParameter, currentWorkOrderIdParameter);

            workOrederNumber.Value = workOrederNumberParameter.Value;
            currentWorkOrderId.Value = currentWorkOrderIdParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetInvoiceBillSummeryByUnitId_Result> SP_DGC_GetInvoiceBillSummeryByUnitId(Nullable<Int32> unitID, string billCode)
        {

            var unitIDParameter = unitID.HasValue ?
                new SqlParameter("UnitID", unitID) :
                new SqlParameter("UnitID", SqlDbType.Int);

           var billCodeParameter = new SqlParameter("BillCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(billCode))
           {
               billCodeParameter.IsNullable = true;
               billCodeParameter.Value = DBNull.Value;
           }
           else
           {
               billCodeParameter.Value = billCode;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetInvoiceBillSummeryByUnitId_Result>("SP_DGC_GetInvoiceBillSummeryByUnitId @UnitID, @BillCode", unitIDParameter, billCodeParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetIPayMerchantDetails_Result> SP_DGC_GetIPayMerchantDetails()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetIPayMerchantDetails_Result>("SP_DGC_GetIPayMerchantDetails");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetLast12MonthsMaintanceBillsOfUnit_Result> SP_DGC_GetLast12MonthsMaintanceBillsOfUnit(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetLast12MonthsMaintanceBillsOfUnit_Result>("SP_DGC_GetLast12MonthsMaintanceBillsOfUnit @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetLast12MonthsWaterBillsOfUnit_Result> SP_DGC_GetLast12MonthsWaterBillsOfUnit(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetLast12MonthsWaterBillsOfUnit_Result>("SP_DGC_GetLast12MonthsWaterBillsOfUnit @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetLast12MonthsWaterReadingOfUnit_Result> SP_DGC_GetLast12MonthsWaterReadingOfUnit(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetLast12MonthsWaterReadingOfUnit_Result>("SP_DGC_GetLast12MonthsWaterReadingOfUnit @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetLastGasReadingOfUnit_Result> SP_DGC_GetLastGasReadingOfUnit(string blockFloorUnitName)
        {

           var blockFloorUnitNameParameter = new SqlParameter("BlockFloorUnitName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(blockFloorUnitName))
           {
               blockFloorUnitNameParameter.IsNullable = true;
               blockFloorUnitNameParameter.Value = DBNull.Value;
           }
           else
           {
               blockFloorUnitNameParameter.Value = blockFloorUnitName;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetLastGasReadingOfUnit_Result>("SP_DGC_GetLastGasReadingOfUnit @BlockFloorUnitName", blockFloorUnitNameParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetLastGasReadingOfUnitByUnitId_Result> SP_DGC_GetLastGasReadingOfUnitByUnitId(Nullable<Int64> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetLastGasReadingOfUnitByUnitId_Result>("SP_DGC_GetLastGasReadingOfUnitByUnitId @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetLastInvoicePaymentDetailsByUnitId_Result> SP_DGC_GetLastInvoicePaymentDetailsByUnitId(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetLastInvoicePaymentDetailsByUnitId_Result>("SP_DGC_GetLastInvoicePaymentDetailsByUnitId @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetLastWaterReadingOfUnit_Result> SP_DGC_GetLastWaterReadingOfUnit(string blockFloorUnitName)
        {

           var blockFloorUnitNameParameter = new SqlParameter("BlockFloorUnitName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(blockFloorUnitName))
           {
               blockFloorUnitNameParameter.IsNullable = true;
               blockFloorUnitNameParameter.Value = DBNull.Value;
           }
           else
           {
               blockFloorUnitNameParameter.Value = blockFloorUnitName;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetLastWaterReadingOfUnit_Result>("SP_DGC_GetLastWaterReadingOfUnit @BlockFloorUnitName", blockFloorUnitNameParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetLastWaterReadingOfUnitByUnitId_Result> SP_DGC_GetLastWaterReadingOfUnitByUnitId(Nullable<Int64> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetLastWaterReadingOfUnitByUnitId_Result>("SP_DGC_GetLastWaterReadingOfUnitByUnitId @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetlatestHouseRules_Result> SP_DGC_GetlatestHouseRules()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetlatestHouseRules_Result>("SP_DGC_GetlatestHouseRules");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetLivingMembersByUnitId_Result> SP_DGC_GetLivingMembersByUnitId(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetLivingMembersByUnitId_Result>("SP_DGC_GetLivingMembersByUnitId @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetLivingMembersByUnitIdForSecurity_Result> SP_DGC_GetLivingMembersByUnitIdForSecurity(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetLivingMembersByUnitIdForSecurity_Result>("SP_DGC_GetLivingMembersByUnitIdForSecurity @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetLivingMembersByUnitIdforVMS_Result> SP_DGC_GetLivingMembersByUnitIdforVMS(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetLivingMembersByUnitIdforVMS_Result>("SP_DGC_GetLivingMembersByUnitIdforVMS @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetLivingOwnerByUnitIdforVMS_Result> SP_DGC_GetLivingOwnerByUnitIdforVMS(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetLivingOwnerByUnitIdforVMS_Result>("SP_DGC_GetLivingOwnerByUnitIdforVMS @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetLocationShutDownDatesById_Result> SP_DGC_GetLocationShutDownDatesById(Nullable<Int32> locationID)
        {

            var locationIDParameter = locationID.HasValue ?
                new SqlParameter("LocationID", locationID) :
                new SqlParameter("LocationID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetLocationShutDownDatesById_Result>("SP_DGC_GetLocationShutDownDatesById @LocationID", locationIDParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetMenuDetailsById_Result> SP_DGC_GetMenuDetailsById(Nullable<Int32> menuId)
        {

            var menuIdParameter = menuId.HasValue ?
                new SqlParameter("MenuId", menuId) :
                new SqlParameter("MenuId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetMenuDetailsById_Result>("SP_DGC_GetMenuDetailsById @MenuId", menuIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetMenusBasedOnRole_Result> SP_DGC_GetMenusBasedOnRole(Nullable<Int32> userId)
        {

            var userIdParameter = userId.HasValue ?
                new SqlParameter("UserId", userId) :
                new SqlParameter("UserId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetMenusBasedOnRole_Result>("SP_DGC_GetMenusBasedOnRole @UserId", userIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetMonthWiseFacilityBookingDates_Result> SP_DGC_GetMonthWiseFacilityBookingDates(string bookingMonth, Nullable<DateTime> todaysClientDate, Nullable<Int32> facilityId)
        {

           var bookingMonthParameter = new SqlParameter("BookingMonth", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(bookingMonth))
           {
               bookingMonthParameter.IsNullable = true;
               bookingMonthParameter.Value = DBNull.Value;
           }
           else
           {
               bookingMonthParameter.Value = bookingMonth;
           }

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetMonthWiseFacilityBookingDates_Result>("SP_DGC_GetMonthWiseFacilityBookingDates @BookingMonth, @TodaysClientDate, @FacilityId", bookingMonthParameter, todaysClientDateParameter, facilityIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetMonthWiseHallBookingDates_Result> SP_DGC_GetMonthWiseHallBookingDates(string bookingMonth, Nullable<DateTime> todaysClientDate)
        {

           var bookingMonthParameter = new SqlParameter("BookingMonth", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(bookingMonth))
           {
               bookingMonthParameter.IsNullable = true;
               bookingMonthParameter.Value = DBNull.Value;
           }
           else
           {
               bookingMonthParameter.Value = bookingMonth;
           }

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetMonthWiseHallBookingDates_Result>("SP_DGC_GetMonthWiseHallBookingDates @BookingMonth, @TodaysClientDate", bookingMonthParameter, todaysClientDateParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetNonStockItemCollectionByNonstockId_Result> SP_DGC_GetNonStockItemCollectionByNonstockId(Nullable<Int32> nonStockItemId)
        {

            var nonStockItemIdParameter = nonStockItemId.HasValue ?
                new SqlParameter("NonStockItemId", nonStockItemId) :
                new SqlParameter("NonStockItemId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetNonStockItemCollectionByNonstockId_Result>("SP_DGC_GetNonStockItemCollectionByNonstockId @NonStockItemId", nonStockItemIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetNotificationById_Result> SP_DGC_GetNotificationById(Nullable<Int32> notificationId)
        {

            var notificationIdParameter = notificationId.HasValue ?
                new SqlParameter("NotificationId", notificationId) :
                new SqlParameter("NotificationId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetNotificationById_Result>("SP_DGC_GetNotificationById @NotificationId", notificationIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetNotificationByUserid_Result> SP_DGC_GetNotificationByUserid(Nullable<Int32> userId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, ObjectParameter actualTotalRecords, Nullable<DateTime> todaysclintDate)
        {

            var userIdParameter = userId.HasValue ?
                new SqlParameter("UserId", userId) :
                new SqlParameter("UserId", SqlDbType.Int);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var todaysclintDateParameter = todaysclintDate.HasValue ?
                new SqlParameter("TodaysclintDate", todaysclintDate) :
                new SqlParameter("TodaysclintDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetNotificationByUserid_Result>("SP_DGC_GetNotificationByUserid @UserId, @PageNumber, @PageSize, @ActualTotalRecords OUT, @TodaysclintDate", userIdParameter, pageNumberParameter, pageSizeParameter, actualTotalRecordsParameter, todaysclintDateParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetNotificationReceivers_Result> SP_DGC_GetNotificationReceivers(Nullable<Int32> notificationId)
        {

            var notificationIdParameter = notificationId.HasValue ?
                new SqlParameter("NotificationId", notificationId) :
                new SqlParameter("NotificationId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetNotificationReceivers_Result>("SP_DGC_GetNotificationReceivers @NotificationId", notificationIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetOwnerDetailsByNameSearch_Result> SP_DGC_GetOwnerDetailsByNameSearch(string ownerName)
        {

           var ownerNameParameter = new SqlParameter("OwnerName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ownerName))
           {
               ownerNameParameter.IsNullable = true;
               ownerNameParameter.Value = DBNull.Value;
           }
           else
           {
               ownerNameParameter.Value = ownerName;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetOwnerDetailsByNameSearch_Result>("SP_DGC_GetOwnerDetailsByNameSearch @OwnerName", ownerNameParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetOwnerTenantByUnitId_Result> SP_DGC_GetOwnerTenantByUnitId(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetOwnerTenantByUnitId_Result>("SP_DGC_GetOwnerTenantByUnitId @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetPaidParkingHistoryByRequestId_Result> SP_DGC_GetPaidParkingHistoryByRequestId(Nullable<Int64> paidParkingRequestId)
        {

            var paidParkingRequestIdParameter = paidParkingRequestId.HasValue ?
                new SqlParameter("PaidParkingRequestId", paidParkingRequestId) :
                new SqlParameter("PaidParkingRequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetPaidParkingHistoryByRequestId_Result>("SP_DGC_GetPaidParkingHistoryByRequestId @PaidParkingRequestId", paidParkingRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetParentMenuDetails_Result> SP_DGC_GetParentMenuDetails()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetParentMenuDetails_Result>("SP_DGC_GetParentMenuDetails");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetPaymentItemDetailsBySourceRequestID_Result> SP_DGC_GetPaymentItemDetailsBySourceRequestID(Nullable<Int32> paymentSourceRequestId, Nullable<Int32> paymentSourceRequestType)
        {

            var paymentSourceRequestIdParameter = paymentSourceRequestId.HasValue ?
                new SqlParameter("PaymentSourceRequestId", paymentSourceRequestId) :
                new SqlParameter("PaymentSourceRequestId", SqlDbType.Int);

            var paymentSourceRequestTypeParameter = paymentSourceRequestType.HasValue ?
                new SqlParameter("PaymentSourceRequestType", paymentSourceRequestType) :
                new SqlParameter("PaymentSourceRequestType", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetPaymentItemDetailsBySourceRequestID_Result>("SP_DGC_GetPaymentItemDetailsBySourceRequestID @PaymentSourceRequestId, @PaymentSourceRequestType", paymentSourceRequestIdParameter, paymentSourceRequestTypeParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetPurchaseInVoiceByPInoiceId_Result> SP_DGC_GetPurchaseInVoiceByPInoiceId(Nullable<Int64> purchaseInvoiceId)
        {

            var purchaseInvoiceIdParameter = purchaseInvoiceId.HasValue ?
                new SqlParameter("PurchaseInvoiceId", purchaseInvoiceId) :
                new SqlParameter("PurchaseInvoiceId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetPurchaseInVoiceByPInoiceId_Result>("SP_DGC_GetPurchaseInVoiceByPInoiceId @PurchaseInvoiceId", purchaseInvoiceIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetPurchaseInvoicelineitemByLineId_Result> SP_DGC_GetPurchaseInvoicelineitemByLineId(Nullable<Int32> purchaseInvoiceLineID)
        {

            var purchaseInvoiceLineIDParameter = purchaseInvoiceLineID.HasValue ?
                new SqlParameter("PurchaseInvoiceLineID", purchaseInvoiceLineID) :
                new SqlParameter("PurchaseInvoiceLineID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetPurchaseInvoicelineitemByLineId_Result>("SP_DGC_GetPurchaseInvoicelineitemByLineId @PurchaseInvoiceLineID", purchaseInvoiceLineIDParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetRennovationRefundItemDetails_Result> SP_DGC_GetRennovationRefundItemDetails(Nullable<Int64> rennovationRequestId)
        {

            var rennovationRequestIdParameter = rennovationRequestId.HasValue ?
                new SqlParameter("RennovationRequestId", rennovationRequestId) :
                new SqlParameter("RennovationRequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetRennovationRefundItemDetails_Result>("SP_DGC_GetRennovationRefundItemDetails @RennovationRequestId", rennovationRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetRennovationRequestDepositItemDetails_Result> SP_DGC_GetRennovationRequestDepositItemDetails(Nullable<Int64> rennovationRequestId, ObjectParameter errorCode)
        {

            var rennovationRequestIdParameter = rennovationRequestId.HasValue ?
                new SqlParameter("RennovationRequestId", rennovationRequestId) :
                new SqlParameter("RennovationRequestId", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetRennovationRequestDepositItemDetails_Result>("SP_DGC_GetRennovationRequestDepositItemDetails @RennovationRequestId, @ErrorCode OUT", rennovationRequestIdParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetRennovationRequestDetailsById_Result> SP_DGC_GetRennovationRequestDetailsById(Nullable<Int64> renvRequestId)
        {

            var renvRequestIdParameter = renvRequestId.HasValue ?
                new SqlParameter("RenvRequestId", renvRequestId) :
                new SqlParameter("RenvRequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetRennovationRequestDetailsById_Result>("SP_DGC_GetRennovationRequestDetailsById @RenvRequestId", renvRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetRennovationRequestHistoryById_Result> SP_DGC_GetRennovationRequestHistoryById(Nullable<Int64> rennovationRequestId)
        {

            var rennovationRequestIdParameter = rennovationRequestId.HasValue ?
                new SqlParameter("RennovationRequestId", rennovationRequestId) :
                new SqlParameter("RennovationRequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetRennovationRequestHistoryById_Result>("SP_DGC_GetRennovationRequestHistoryById @RennovationRequestId", rennovationRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetResUnitOwnerDetailsById_Result> SP_DGC_GetResUnitOwnerDetailsById(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetResUnitOwnerDetailsById_Result>("SP_DGC_GetResUnitOwnerDetailsById @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetResUnitTenantDetailsByUnitId_Result> SP_DGC_GetResUnitTenantDetailsByUnitId(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetResUnitTenantDetailsByUnitId_Result>("SP_DGC_GetResUnitTenantDetailsByUnitId @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetRFQDetailsbyId_Result> SP_DGC_GetRFQDetailsbyId(Nullable<Int32> rFQID)
        {

            var rFQIDParameter = rFQID.HasValue ?
                new SqlParameter("RFQID", rFQID) :
                new SqlParameter("RFQID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetRFQDetailsbyId_Result>("SP_DGC_GetRFQDetailsbyId @RFQID", rFQIDParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetRFQItemDetailsbyItemId_Result> SP_DGC_GetRFQItemDetailsbyItemId(Nullable<Int64> rFQItemID)
        {

            var rFQItemIDParameter = rFQItemID.HasValue ?
                new SqlParameter("RFQItemID", rFQItemID) :
                new SqlParameter("RFQItemID", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetRFQItemDetailsbyItemId_Result>("SP_DGC_GetRFQItemDetailsbyItemId @RFQItemID", rFQItemIDParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetRFQQuotesDetailsbyId_Result> SP_DGC_GetRFQQuotesDetailsbyId(Nullable<Int64> rFQuotesID)
        {

            var rFQuotesIDParameter = rFQuotesID.HasValue ?
                new SqlParameter("RFQuotesID", rFQuotesID) :
                new SqlParameter("RFQuotesID", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetRFQQuotesDetailsbyId_Result>("SP_DGC_GetRFQQuotesDetailsbyId @RFQuotesID", rFQuotesIDParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetRolesByDepartmentId_Result> SP_DGC_GetRolesByDepartmentId(Nullable<Int32> departmentId)
        {

            var departmentIdParameter = departmentId.HasValue ?
                new SqlParameter("DepartmentId", departmentId) :
                new SqlParameter("DepartmentId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetRolesByDepartmentId_Result>("SP_DGC_GetRolesByDepartmentId @DepartmentId", departmentIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetRolesByDeptName_Result> SP_DGC_GetRolesByDeptName(string departmentName)
        {

           var departmentNameParameter = new SqlParameter("DepartmentName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(departmentName))
           {
               departmentNameParameter.IsNullable = true;
               departmentNameParameter.Value = DBNull.Value;
           }
           else
           {
               departmentNameParameter.Value = departmentName;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetRolesByDeptName_Result>("SP_DGC_GetRolesByDeptName @DepartmentName", departmentNameParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetRolesByRoleId_Result> SP_DGC_GetRolesByRoleId(Nullable<Int32> roleId)
        {

            var roleIdParameter = roleId.HasValue ?
                new SqlParameter("RoleId", roleId) :
                new SqlParameter("RoleId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetRolesByRoleId_Result>("SP_DGC_GetRolesByRoleId @RoleId", roleIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetShopCommercialUnits_Result> SP_DGC_GetShopCommercialUnits()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetShopCommercialUnits_Result>("SP_DGC_GetShopCommercialUnits");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetShopDepositPayItemDetails_Result> SP_DGC_GetShopDepositPayItemDetails(Nullable<Int64> shopRegistrationId, Nullable<Int32> currentStatusId)
        {

            var shopRegistrationIdParameter = shopRegistrationId.HasValue ?
                new SqlParameter("ShopRegistrationId", shopRegistrationId) :
                new SqlParameter("ShopRegistrationId", SqlDbType.BigInt);

            var currentStatusIdParameter = currentStatusId.HasValue ?
                new SqlParameter("CurrentStatusId", currentStatusId) :
                new SqlParameter("CurrentStatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetShopDepositPayItemDetails_Result>("SP_DGC_GetShopDepositPayItemDetails @ShopRegistrationId, @CurrentStatusId", shopRegistrationIdParameter, currentStatusIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetShopDepositRefundItemDetails_Result> SP_DGC_GetShopDepositRefundItemDetails(Nullable<Int64> shopRegistrationId, Nullable<Int32> currentStatusId)
        {

            var shopRegistrationIdParameter = shopRegistrationId.HasValue ?
                new SqlParameter("ShopRegistrationId", shopRegistrationId) :
                new SqlParameter("ShopRegistrationId", SqlDbType.BigInt);

            var currentStatusIdParameter = currentStatusId.HasValue ?
                new SqlParameter("CurrentStatusId", currentStatusId) :
                new SqlParameter("CurrentStatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetShopDepositRefundItemDetails_Result>("SP_DGC_GetShopDepositRefundItemDetails @ShopRegistrationId, @CurrentStatusId", shopRegistrationIdParameter, currentStatusIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetShopMemberDetailsBySMId_Result> SP_DGC_GetShopMemberDetailsBySMId(Nullable<Int32> shopMemberId)
        {

            var shopMemberIdParameter = shopMemberId.HasValue ?
                new SqlParameter("ShopMemberId", shopMemberId) :
                new SqlParameter("ShopMemberId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetShopMemberDetailsBySMId_Result>("SP_DGC_GetShopMemberDetailsBySMId @ShopMemberId", shopMemberIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetShopPICDetailsBySRId_Result> SP_DGC_GetShopPICDetailsBySRId(Nullable<Int32> shopRegistrationId)
        {

            var shopRegistrationIdParameter = shopRegistrationId.HasValue ?
                new SqlParameter("ShopRegistrationId", shopRegistrationId) :
                new SqlParameter("ShopRegistrationId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetShopPICDetailsBySRId_Result>("SP_DGC_GetShopPICDetailsBySRId @ShopRegistrationId", shopRegistrationIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetShopRegistrationById_Result> SP_DGC_GetShopRegistrationById(Nullable<Int32> shopRegistrationId)
        {

            var shopRegistrationIdParameter = shopRegistrationId.HasValue ?
                new SqlParameter("ShopRegistrationId", shopRegistrationId) :
                new SqlParameter("ShopRegistrationId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetShopRegistrationById_Result>("SP_DGC_GetShopRegistrationById @ShopRegistrationId", shopRegistrationIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetSinkFundDetails_Result> SP_DGC_GetSinkFundDetails(Nullable<Int32> financialPeriodId, Nullable<Int32> sinkFundPlanId)
        {

            var financialPeriodIdParameter = financialPeriodId.HasValue ?
                new SqlParameter("FinancialPeriodId", financialPeriodId) :
                new SqlParameter("FinancialPeriodId", SqlDbType.Int);

            var sinkFundPlanIdParameter = sinkFundPlanId.HasValue ?
                new SqlParameter("SinkFundPlanId", sinkFundPlanId) :
                new SqlParameter("SinkFundPlanId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetSinkFundDetails_Result>("SP_DGC_GetSinkFundDetails @FinancialPeriodId, @SinkFundPlanId", financialPeriodIdParameter, sinkFundPlanIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetStockCategoryById_Result> SP_DGC_GetStockCategoryById(Nullable<Int32> stockCategoryId)
        {

            var stockCategoryIdParameter = stockCategoryId.HasValue ?
                new SqlParameter("StockCategoryId", stockCategoryId) :
                new SqlParameter("StockCategoryId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetStockCategoryById_Result>("SP_DGC_GetStockCategoryById @StockCategoryId", stockCategoryIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetStockSellingPriceByStockId_Result> SP_DGC_GetStockSellingPriceByStockId(Nullable<Int32> stockID)
        {

            var stockIDParameter = stockID.HasValue ?
                new SqlParameter("StockID", stockID) :
                new SqlParameter("StockID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetStockSellingPriceByStockId_Result>("SP_DGC_GetStockSellingPriceByStockId @StockID", stockIDParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetTaxSetUpByTaxId_Result> SP_DGC_GetTaxSetUpByTaxId(Nullable<Int32> taxSetUpId)
        {

            var taxSetUpIdParameter = taxSetUpId.HasValue ?
                new SqlParameter("TaxSetUpId", taxSetUpId) :
                new SqlParameter("TaxSetUpId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetTaxSetUpByTaxId_Result>("SP_DGC_GetTaxSetUpByTaxId @TaxSetUpId", taxSetUpIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetTodayAllVisitorRequests_Result> SP_DGC_GetTodayAllVisitorRequests(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, string statusCode, Nullable<Int32> unitId, Nullable<DateTime> todayDate)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

           var statusCodeParameter = new SqlParameter("StatusCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(statusCode))
           {
               statusCodeParameter.IsNullable = true;
               statusCodeParameter.Value = DBNull.Value;
           }
           else
           {
               statusCodeParameter.Value = statusCode;
           }

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var todayDateParameter = todayDate.HasValue ?
                new SqlParameter("TodayDate", todayDate) :
                new SqlParameter("TodayDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetTodayAllVisitorRequests_Result>("SP_DGC_GetTodayAllVisitorRequests @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @RequestedFromRole, @RequestedUserId, @StatusCode, @UnitId, @TodayDate", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, requestedFromRoleParameter, requestedUserIdParameter, statusCodeParameter, unitIdParameter, todayDateParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetTodaysVisitorRequests_Result> SP_DGC_GetTodaysVisitorRequests(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetTodaysVisitorRequests_Result>("SP_DGC_GetTodaysVisitorRequests @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetTrainerDetailsByFacilityId_Result> SP_DGC_GetTrainerDetailsByFacilityId(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> facilitiesId)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var facilitiesIdParameter = facilitiesId.HasValue ?
                new SqlParameter("FacilitiesId", facilitiesId) :
                new SqlParameter("FacilitiesId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetTrainerDetailsByFacilityId_Result>("SP_DGC_GetTrainerDetailsByFacilityId @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @FacilitiesId", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, facilitiesIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetTrainerDetailsById_Result> SP_DGC_GetTrainerDetailsById(Nullable<Int32> trainerId)
        {

            var trainerIdParameter = trainerId.HasValue ?
                new SqlParameter("TrainerId", trainerId) :
                new SqlParameter("TrainerId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetTrainerDetailsById_Result>("SP_DGC_GetTrainerDetailsById @TrainerId", trainerIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUNitBillSummaryByInvoiceID_Result> SP_DGC_GetUNitBillSummaryByInvoiceID(Nullable<Int64> invoiceId)
        {

            var invoiceIdParameter = invoiceId.HasValue ?
                new SqlParameter("InvoiceId", invoiceId) :
                new SqlParameter("InvoiceId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUNitBillSummaryByInvoiceID_Result>("SP_DGC_GetUNitBillSummaryByInvoiceID @InvoiceId", invoiceIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUNitBillSummeryByUnitID_Result> SP_DGC_GetUNitBillSummeryByUnitID(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUNitBillSummeryByUnitID_Result>("SP_DGC_GetUNitBillSummeryByUnitID @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUnitInvoiceBillPayments_ToDoReversal_Result> SP_DGC_GetUnitInvoiceBillPayments_ToDoReversal(Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> unitId, Nullable<DateTime> entryFromDate, Nullable<DateTime> entryToDate)
        {

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var entryFromDateParameter = entryFromDate.HasValue ?
                new SqlParameter("EntryFromDate", entryFromDate) :
                new SqlParameter("EntryFromDate", SqlDbType.DateTime);

            var entryToDateParameter = entryToDate.HasValue ?
                new SqlParameter("EntryToDate", entryToDate) :
                new SqlParameter("EntryToDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUnitInvoiceBillPayments_ToDoReversal_Result>("SP_DGC_GetUnitInvoiceBillPayments_ToDoReversal @RequestedFromRole, @RequestedUserId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @UnitId, @EntryFromDate, @EntryToDate", requestedFromRoleParameter, requestedUserIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, unitIdParameter, entryFromDateParameter, entryToDateParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUnitInvoiceBillsHistoryByInvoiceId_Result> SP_DGC_GetUnitInvoiceBillsHistoryByInvoiceId(Nullable<Int64> invoiceId)
        {

            var invoiceIdParameter = invoiceId.HasValue ?
                new SqlParameter("InvoiceId", invoiceId) :
                new SqlParameter("InvoiceId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUnitInvoiceBillsHistoryByInvoiceId_Result>("SP_DGC_GetUnitInvoiceBillsHistoryByInvoiceId @InvoiceId", invoiceIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUNitInvoiceBillSummeryByUnitID_Result> SP_DGC_GetUNitInvoiceBillSummeryByUnitID(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUNitInvoiceBillSummeryByUnitID_Result>("SP_DGC_GetUNitInvoiceBillSummeryByUnitID @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUnitInvoiceCofigurationDetails_Result> SP_DGC_GetUnitInvoiceCofigurationDetails()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUnitInvoiceCofigurationDetails_Result>("SP_DGC_GetUnitInvoiceCofigurationDetails");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUnitInvoiceConfigurationBillTypes_Result> SP_DGC_GetUnitInvoiceConfigurationBillTypes()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUnitInvoiceConfigurationBillTypes_Result>("SP_DGC_GetUnitInvoiceConfigurationBillTypes");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUnitInvoiceLineDetailsByInvoiceId_Result> SP_DGC_GetUnitInvoiceLineDetailsByInvoiceId(Nullable<Int64> invoiceId)
        {

            var invoiceIdParameter = invoiceId.HasValue ?
                new SqlParameter("InvoiceId", invoiceId) :
                new SqlParameter("InvoiceId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUnitInvoiceLineDetailsByInvoiceId_Result>("SP_DGC_GetUnitInvoiceLineDetailsByInvoiceId @InvoiceId", invoiceIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUnitOwnerDependentDetails_Result> SP_DGC_GetUnitOwnerDependentDetails(Nullable<Int64> unitPurchaseRequestId)
        {

            var unitPurchaseRequestIdParameter = unitPurchaseRequestId.HasValue ?
                new SqlParameter("UnitPurchaseRequestId", unitPurchaseRequestId) :
                new SqlParameter("UnitPurchaseRequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUnitOwnerDependentDetails_Result>("SP_DGC_GetUnitOwnerDependentDetails @UnitPurchaseRequestId", unitPurchaseRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUnitPurchaseDetailsById_Result> SP_DGC_GetUnitPurchaseDetailsById(Nullable<Int64> purchaseRequestId)
        {

            var purchaseRequestIdParameter = purchaseRequestId.HasValue ?
                new SqlParameter("PurchaseRequestId", purchaseRequestId) :
                new SqlParameter("PurchaseRequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUnitPurchaseDetailsById_Result>("SP_DGC_GetUnitPurchaseDetailsById @PurchaseRequestId", purchaseRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUnitRequestItemById_Result> SP_DGC_GetUnitRequestItemById(Nullable<Int32> unitRequestItemId)
        {

            var unitRequestItemIdParameter = unitRequestItemId.HasValue ?
                new SqlParameter("UnitRequestItemId", unitRequestItemId) :
                new SqlParameter("UnitRequestItemId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUnitRequestItemById_Result>("SP_DGC_GetUnitRequestItemById @UnitRequestItemId", unitRequestItemIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUnitRequestItemsByRequestType_Result> SP_DGC_GetUnitRequestItemsByRequestType(Nullable<Int32> unitRequestTypeId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var unitRequestTypeIdParameter = unitRequestTypeId.HasValue ?
                new SqlParameter("UnitRequestTypeId", unitRequestTypeId) :
                new SqlParameter("UnitRequestTypeId", SqlDbType.Int);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUnitRequestItemsByRequestType_Result>("SP_DGC_GetUnitRequestItemsByRequestType @UnitRequestTypeId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", unitRequestTypeIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUnitSettingDetailsById_Result> SP_DGC_GetUnitSettingDetailsById(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUnitSettingDetailsById_Result>("SP_DGC_GetUnitSettingDetailsById @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUnitSettingsById_Result> SP_DGC_GetUnitSettingsById(Nullable<Int32> unitId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUnitSettingsById_Result>("SP_DGC_GetUnitSettingsById @UnitId", unitIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUnitTenantDependentDetails_Result> SP_DGC_GetUnitTenantDependentDetails(Nullable<Int64> unitTenantRequestId)
        {

            var unitTenantRequestIdParameter = unitTenantRequestId.HasValue ?
                new SqlParameter("UnitTenantRequestId", unitTenantRequestId) :
                new SqlParameter("UnitTenantRequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUnitTenantDependentDetails_Result>("SP_DGC_GetUnitTenantDependentDetails @UnitTenantRequestId", unitTenantRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUnitTenantRequestDetailsById_Result> SP_DGC_GetUnitTenantRequestDetailsById(Nullable<Int64> tenantRequestId)
        {

            var tenantRequestIdParameter = tenantRequestId.HasValue ?
                new SqlParameter("TenantRequestId", tenantRequestId) :
                new SqlParameter("TenantRequestId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUnitTenantRequestDetailsById_Result>("SP_DGC_GetUnitTenantRequestDetailsById @TenantRequestId", tenantRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUserDetailsByCentralId_Result> SP_DGC_GetUserDetailsByCentralId(Nullable<Int64> centralUserId)
        {

            var centralUserIdParameter = centralUserId.HasValue ?
                new SqlParameter("CentralUserId", centralUserId) :
                new SqlParameter("CentralUserId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUserDetailsByCentralId_Result>("SP_DGC_GetUserDetailsByCentralId @CentralUserId", centralUserIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUserDetailsByCentralUserId_Result> SP_DGC_GetUserDetailsByCentralUserId(Nullable<Int64> centralUserId)
        {

            var centralUserIdParameter = centralUserId.HasValue ?
                new SqlParameter("CentralUserId", centralUserId) :
                new SqlParameter("CentralUserId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUserDetailsByCentralUserId_Result>("SP_DGC_GetUserDetailsByCentralUserId @CentralUserId", centralUserIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUserDetailsById_Result> SP_DGC_GetUserDetailsById(Nullable<Int64> userId)
        {

            var userIdParameter = userId.HasValue ?
                new SqlParameter("UserId", userId) :
                new SqlParameter("UserId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUserDetailsById_Result>("SP_DGC_GetUserDetailsById @UserId", userIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUserDetailsByMobileNumber_Result> SP_DGC_GetUserDetailsByMobileNumber(string userMobileNumber)
        {

           var userMobileNumberParameter = new SqlParameter("UserMobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userMobileNumber))
           {
               userMobileNumberParameter.IsNullable = true;
               userMobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               userMobileNumberParameter.Value = userMobileNumber;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUserDetailsByMobileNumber_Result>("SP_DGC_GetUserDetailsByMobileNumber @UserMobileNumber", userMobileNumberParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUserEmailsforNotificationByNFId_Result> SP_DGC_GetUserEmailsforNotificationByNFId(Nullable<Int32> notificationId)
        {

            var notificationIdParameter = notificationId.HasValue ?
                new SqlParameter("NotificationId", notificationId) :
                new SqlParameter("NotificationId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUserEmailsforNotificationByNFId_Result>("SP_DGC_GetUserEmailsforNotificationByNFId @NotificationId", notificationIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUserPermitableUnitsByCentralUserId_Result> SP_DGC_GetUserPermitableUnitsByCentralUserId(Nullable<Int64> userId)
        {

            var userIdParameter = userId.HasValue ?
                new SqlParameter("UserId", userId) :
                new SqlParameter("UserId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUserPermitableUnitsByCentralUserId_Result>("SP_DGC_GetUserPermitableUnitsByCentralUserId @UserId", userIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUserPermitableUnitsByUserId_Result> SP_DGC_GetUserPermitableUnitsByUserId(Nullable<Int64> userId)
        {

            var userIdParameter = userId.HasValue ?
                new SqlParameter("UserId", userId) :
                new SqlParameter("UserId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUserPermitableUnitsByUserId_Result>("SP_DGC_GetUserPermitableUnitsByUserId @UserId", userIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUsersOfRoleByNameSearch_Result> SP_DGC_GetUsersOfRoleByNameSearch(string name, string roleName, Nullable<Int32> departmentId)
        {

           var nameParameter = new SqlParameter("Name", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(name))
           {
               nameParameter.IsNullable = true;
               nameParameter.Value = DBNull.Value;
           }
           else
           {
               nameParameter.Value = name;
           }

           var roleNameParameter = new SqlParameter("RoleName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(roleName))
           {
               roleNameParameter.IsNullable = true;
               roleNameParameter.Value = DBNull.Value;
           }
           else
           {
               roleNameParameter.Value = roleName;
           }

            var departmentIdParameter = departmentId.HasValue ?
                new SqlParameter("DepartmentId", departmentId) :
                new SqlParameter("DepartmentId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUsersOfRoleByNameSearch_Result>("SP_DGC_GetUsersOfRoleByNameSearch @Name, @RoleName, @DepartmentId", nameParameter, roleNameParameter, departmentIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUtilityBillsById_Result> SP_DGC_GetUtilityBillsById(Nullable<Int32> utiltityBillId)
        {

            var utiltityBillIdParameter = utiltityBillId.HasValue ?
                new SqlParameter("UtiltityBillId", utiltityBillId) :
                new SqlParameter("UtiltityBillId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUtilityBillsById_Result>("SP_DGC_GetUtilityBillsById @UtiltityBillId", utiltityBillIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUtilityInVoiceByUInoiceId_Result> SP_DGC_GetUtilityInVoiceByUInoiceId(Nullable<Int64> utilityInvoiceId)
        {

            var utilityInvoiceIdParameter = utilityInvoiceId.HasValue ?
                new SqlParameter("UtilityInvoiceId", utilityInvoiceId) :
                new SqlParameter("UtilityInvoiceId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUtilityInVoiceByUInoiceId_Result>("SP_DGC_GetUtilityInVoiceByUInoiceId @UtilityInvoiceId", utilityInvoiceIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUtilityInvoicelineitemByLineId_Result> SP_DGC_GetUtilityInvoicelineitemByLineId(Nullable<Int32> utilityInvoiceLineID)
        {

            var utilityInvoiceLineIDParameter = utilityInvoiceLineID.HasValue ?
                new SqlParameter("UtilityInvoiceLineID", utilityInvoiceLineID) :
                new SqlParameter("UtilityInvoiceLineID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUtilityInvoicelineitemByLineId_Result>("SP_DGC_GetUtilityInvoicelineitemByLineId @UtilityInvoiceLineID", utilityInvoiceLineIDParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetVehicleParkDepositPayItemDetails_Result> SP_DGC_GetVehicleParkDepositPayItemDetails(Nullable<Int64> vPRequestId, Nullable<Int32> currentStatusId)
        {

            var vPRequestIdParameter = vPRequestId.HasValue ?
                new SqlParameter("VPRequestId", vPRequestId) :
                new SqlParameter("VPRequestId", SqlDbType.BigInt);

            var currentStatusIdParameter = currentStatusId.HasValue ?
                new SqlParameter("CurrentStatusId", currentStatusId) :
                new SqlParameter("CurrentStatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetVehicleParkDepositPayItemDetails_Result>("SP_DGC_GetVehicleParkDepositPayItemDetails @VPRequestId, @CurrentStatusId", vPRequestIdParameter, currentStatusIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetVehicleParkDepositRefundItemDetails_Result> SP_DGC_GetVehicleParkDepositRefundItemDetails(Nullable<Int64> vPRequestId, Nullable<Int32> currentStatusId)
        {

            var vPRequestIdParameter = vPRequestId.HasValue ?
                new SqlParameter("VPRequestId", vPRequestId) :
                new SqlParameter("VPRequestId", SqlDbType.BigInt);

            var currentStatusIdParameter = currentStatusId.HasValue ?
                new SqlParameter("CurrentStatusId", currentStatusId) :
                new SqlParameter("CurrentStatusId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetVehicleParkDepositRefundItemDetails_Result>("SP_DGC_GetVehicleParkDepositRefundItemDetails @VPRequestId, @CurrentStatusId", vPRequestIdParameter, currentStatusIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetVehicleParkFeeDetails_Result> SP_DGC_GetVehicleParkFeeDetails(string isShowAllFuturePrice)
        {

           var isShowAllFuturePriceParameter = new SqlParameter("IsShowAllFuturePrice", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isShowAllFuturePrice))
           {
               isShowAllFuturePriceParameter.IsNullable = true;
               isShowAllFuturePriceParameter.Value = DBNull.Value;
           }
           else
           {
               isShowAllFuturePriceParameter.Value = isShowAllFuturePrice;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetVehicleParkFeeDetails_Result>("SP_DGC_GetVehicleParkFeeDetails @IsShowAllFuturePrice", isShowAllFuturePriceParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetVehicleParkingSlotBySlotID_Result> SP_DGC_GetVehicleParkingSlotBySlotID(Nullable<Int32> vehicleSlotId)
        {

            var vehicleSlotIdParameter = vehicleSlotId.HasValue ?
                new SqlParameter("VehicleSlotId", vehicleSlotId) :
                new SqlParameter("VehicleSlotId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetVehicleParkingSlotBySlotID_Result>("SP_DGC_GetVehicleParkingSlotBySlotID @VehicleSlotId", vehicleSlotIdParameter);


            return retVal;

        }
        public virtual int SP_DGC_GetVendorInVoiceByVendorInoiceId(Nullable<Int64> vendorInvoiceId)
        {

            var vendorInvoiceIdParameter = vendorInvoiceId.HasValue ?
                new SqlParameter("VendorInvoiceId", vendorInvoiceId) :
                new SqlParameter("VendorInvoiceId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_GetVendorInVoiceByVendorInoiceId @VendorInvoiceId", vendorInvoiceIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetVendorInVoiceByVInoiceId_Result> SP_DGC_GetVendorInVoiceByVInoiceId(Nullable<Int64> vendorInvoiceId)
        {

            var vendorInvoiceIdParameter = vendorInvoiceId.HasValue ?
                new SqlParameter("VendorInvoiceId", vendorInvoiceId) :
                new SqlParameter("VendorInvoiceId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetVendorInVoiceByVInoiceId_Result>("SP_DGC_GetVendorInVoiceByVInoiceId @VendorInvoiceId", vendorInvoiceIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetVendorInvoicelineitemByLineId_Result> SP_DGC_GetVendorInvoicelineitemByLineId(Nullable<Int32> vendorInvoiceLineID)
        {

            var vendorInvoiceLineIDParameter = vendorInvoiceLineID.HasValue ?
                new SqlParameter("VendorInvoiceLineID", vendorInvoiceLineID) :
                new SqlParameter("VendorInvoiceLineID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetVendorInvoicelineitemByLineId_Result>("SP_DGC_GetVendorInvoicelineitemByLineId @VendorInvoiceLineID", vendorInvoiceLineIDParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetVendorInvoicePayableLines_Result> SP_DGC_GetVendorInvoicePayableLines(Nullable<Int64> vendorInvoiceId)
        {

            var vendorInvoiceIdParameter = vendorInvoiceId.HasValue ?
                new SqlParameter("VendorInvoiceId", vendorInvoiceId) :
                new SqlParameter("VendorInvoiceId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetVendorInvoicePayableLines_Result>("SP_DGC_GetVendorInvoicePayableLines @VendorInvoiceId", vendorInvoiceIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetVendorPICDetailsByVRId_Result> SP_DGC_GetVendorPICDetailsByVRId(Nullable<Int32> vendorRegId)
        {

            var vendorRegIdParameter = vendorRegId.HasValue ?
                new SqlParameter("VendorRegId", vendorRegId) :
                new SqlParameter("VendorRegId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetVendorPICDetailsByVRId_Result>("SP_DGC_GetVendorPICDetailsByVRId @VendorRegId", vendorRegIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetVendorRegistrationDetailsById_Result> SP_DGC_GetVendorRegistrationDetailsById(Nullable<Int64> vendorRegId)
        {

            var vendorRegIdParameter = vendorRegId.HasValue ?
                new SqlParameter("VendorRegId", vendorRegId) :
                new SqlParameter("VendorRegId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetVendorRegistrationDetailsById_Result>("SP_DGC_GetVendorRegistrationDetailsById @VendorRegId", vendorRegIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetVisitorByVisitorId_Result> SP_DGC_GetVisitorByVisitorId(Nullable<Int32> visitorRequestId)
        {

            var visitorRequestIdParameter = visitorRequestId.HasValue ?
                new SqlParameter("VisitorRequestId", visitorRequestId) :
                new SqlParameter("VisitorRequestId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetVisitorByVisitorId_Result>("SP_DGC_GetVisitorByVisitorId @VisitorRequestId", visitorRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetVisitorByVisitorReqId_Result> SP_DGC_GetVisitorByVisitorReqId(Nullable<Int32> visitorRequestId)
        {

            var visitorRequestIdParameter = visitorRequestId.HasValue ?
                new SqlParameter("VisitorRequestId", visitorRequestId) :
                new SqlParameter("VisitorRequestId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetVisitorByVisitorReqId_Result>("SP_DGC_GetVisitorByVisitorReqId @VisitorRequestId", visitorRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetVisitorDetailsByVisitorId_Result> SP_DGC_GetVisitorDetailsByVisitorId(Nullable<Int32> visitorRequestId)
        {

            var visitorRequestIdParameter = visitorRequestId.HasValue ?
                new SqlParameter("VisitorRequestId", visitorRequestId) :
                new SqlParameter("VisitorRequestId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetVisitorDetailsByVisitorId_Result>("SP_DGC_GetVisitorDetailsByVisitorId @VisitorRequestId", visitorRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetVisitorInButNotOutDetails_Result> SP_DGC_GetVisitorInButNotOutDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<Int32> requestedFromRole, Nullable<Int64> requestedUserId, Nullable<Int32> unitId, Nullable<DateTime> visitingFromDate, Nullable<DateTime> visitingToDate, Nullable<DateTime> todaysClintDate)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var requestedFromRoleParameter = requestedFromRole.HasValue ?
                new SqlParameter("RequestedFromRole", requestedFromRole) :
                new SqlParameter("RequestedFromRole", SqlDbType.Int);

            var requestedUserIdParameter = requestedUserId.HasValue ?
                new SqlParameter("RequestedUserId", requestedUserId) :
                new SqlParameter("RequestedUserId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var visitingFromDateParameter = visitingFromDate.HasValue ?
                new SqlParameter("VisitingFromDate", visitingFromDate) :
                new SqlParameter("VisitingFromDate", SqlDbType.DateTime);

            var visitingToDateParameter = visitingToDate.HasValue ?
                new SqlParameter("VisitingToDate", visitingToDate) :
                new SqlParameter("VisitingToDate", SqlDbType.DateTime);

            var todaysClintDateParameter = todaysClintDate.HasValue ?
                new SqlParameter("TodaysClintDate", todaysClintDate) :
                new SqlParameter("TodaysClintDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetVisitorInButNotOutDetails_Result>("SP_DGC_GetVisitorInButNotOutDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @RequestedFromRole, @RequestedUserId, @UnitId, @VisitingFromDate, @VisitingToDate, @TodaysClintDate", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, requestedFromRoleParameter, requestedUserIdParameter, unitIdParameter, visitingFromDateParameter, visitingToDateParameter, todaysClintDateParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_GetVisitorParkingSlatAvailable(ObjectParameter isAvailable)
        {

           var isAvailableParameter = new SqlParameter("IsAvailable", SqlDbType.Int);
               isAvailableParameter.Direction = System.Data.ParameterDirection.Output;
               isAvailableParameter.Value = isAvailable != null ? isAvailable.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_GetVisitorParkingSlatAvailable @IsAvailable OUT", isAvailableParameter);

            isAvailable.Value = isAvailableParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetVisitorParkingSlots_Result> SP_DGC_GetVisitorParkingSlots()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetVisitorParkingSlots_Result>("SP_DGC_GetVisitorParkingSlots");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetVisitorRequestHistoryByRequestId_Result> SP_DGC_GetVisitorRequestHistoryByRequestId(Nullable<Int32> visitorRequestId)
        {

            var visitorRequestIdParameter = visitorRequestId.HasValue ?
                new SqlParameter("VisitorRequestId", visitorRequestId) :
                new SqlParameter("VisitorRequestId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetVisitorRequestHistoryByRequestId_Result>("SP_DGC_GetVisitorRequestHistoryByRequestId @VisitorRequestId", visitorRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetVoucherPaymentDetailsByPaymentId_Result> SP_DGC_GetVoucherPaymentDetailsByPaymentId(Nullable<Int64> voucherPaymentId)
        {

            var voucherPaymentIdParameter = voucherPaymentId.HasValue ?
                new SqlParameter("VoucherPaymentId", voucherPaymentId) :
                new SqlParameter("VoucherPaymentId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetVoucherPaymentDetailsByPaymentId_Result>("SP_DGC_GetVoucherPaymentDetailsByPaymentId @VoucherPaymentId", voucherPaymentIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetWaterConsumeByMeterReadingId_Result> SP_DGC_GetWaterConsumeByMeterReadingId(Nullable<Int64> meterReadingId)
        {

            var meterReadingIdParameter = meterReadingId.HasValue ?
                new SqlParameter("MeterReadingId", meterReadingId) :
                new SqlParameter("MeterReadingId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetWaterConsumeByMeterReadingId_Result>("SP_DGC_GetWaterConsumeByMeterReadingId @MeterReadingId", meterReadingIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetWorkOrdersDetailsbyId_Result> SP_DGC_GetWorkOrdersDetailsbyId(Nullable<Int32> rFQID, Nullable<Int64> rFQApprovedQuotesId, string createdBy, ObjectParameter currentWorkOrderId, ObjectParameter currentWPONumber)
        {

            var rFQIDParameter = rFQID.HasValue ?
                new SqlParameter("RFQID", rFQID) :
                new SqlParameter("RFQID", SqlDbType.Int);

            var rFQApprovedQuotesIdParameter = rFQApprovedQuotesId.HasValue ?
                new SqlParameter("RFQApprovedQuotesId", rFQApprovedQuotesId) :
                new SqlParameter("RFQApprovedQuotesId", SqlDbType.BigInt);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var currentWorkOrderIdParameter = new SqlParameter("CurrentWorkOrderId", SqlDbType.Int);
               currentWorkOrderIdParameter.Direction = System.Data.ParameterDirection.Output;
               currentWorkOrderIdParameter.Value = currentWorkOrderId != null ? currentWorkOrderId.Value : null;

           var currentWPONumberParameter = new SqlParameter("CurrentWPONumber", SqlDbType.VarChar, 500);
               currentWPONumberParameter.Direction = System.Data.ParameterDirection.Output;
               currentWPONumberParameter.Value = currentWPONumber != null ? currentWPONumber.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetWorkOrdersDetailsbyId_Result>("SP_DGC_GetWorkOrdersDetailsbyId @RFQID, @RFQApprovedQuotesId, @CreatedBy, @CurrentWorkOrderId OUT, @CurrentWPONumber OUT", rFQIDParameter, rFQApprovedQuotesIdParameter, createdByParameter, currentWorkOrderIdParameter, currentWPONumberParameter);

            currentWorkOrderId.Value = currentWorkOrderIdParameter.Value;
            currentWPONumber.Value = currentWPONumberParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetWorkOrdersItemDetailsbyItemId_Result> SP_DGC_GetWorkOrdersItemDetailsbyItemId(Nullable<Int64> workOrderItemID)
        {

            var workOrderItemIDParameter = workOrderItemID.HasValue ?
                new SqlParameter("WorkOrderItemID", workOrderItemID) :
                new SqlParameter("WorkOrderItemID", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetWorkOrdersItemDetailsbyItemId_Result>("SP_DGC_GetWorkOrdersItemDetailsbyItemId @WorkOrderItemID", workOrderItemIDParameter);


            return retVal;

        }
        public virtual int SP_DGC_InitialSetUp_AccessCardsRequestProcessBySetupID(Nullable<Int32> accessCardRequestSetupID, string processedBy, Nullable<Int64> paymentReceviedByUserid, ObjectParameter errorCode)
        {

            var accessCardRequestSetupIDParameter = accessCardRequestSetupID.HasValue ?
                new SqlParameter("AccessCardRequestSetupID", accessCardRequestSetupID) :
                new SqlParameter("AccessCardRequestSetupID", SqlDbType.Int);

           var processedByParameter = new SqlParameter("ProcessedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(processedBy))
           {
               processedByParameter.IsNullable = true;
               processedByParameter.Value = DBNull.Value;
           }
           else
           {
               processedByParameter.Value = processedBy;
           }

            var paymentReceviedByUseridParameter = paymentReceviedByUserid.HasValue ?
                new SqlParameter("PaymentReceviedByUserid", paymentReceviedByUserid) :
                new SqlParameter("PaymentReceviedByUserid", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_InitialSetUp_AccessCardsRequestProcessBySetupID @AccessCardRequestSetupID, @ProcessedBy, @PaymentReceviedByUserid, @ErrorCode OUT", accessCardRequestSetupIDParameter, processedByParameter, paymentReceviedByUseridParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_InitialSetUp_AdvancePaymentProcessBySetupID(Nullable<Int32> advancePaymentSetupID, string processedBy, Nullable<Int64> paymentReceviedByUserid, ObjectParameter errorCode)
        {

            var advancePaymentSetupIDParameter = advancePaymentSetupID.HasValue ?
                new SqlParameter("AdvancePaymentSetupID", advancePaymentSetupID) :
                new SqlParameter("AdvancePaymentSetupID", SqlDbType.Int);

           var processedByParameter = new SqlParameter("ProcessedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(processedBy))
           {
               processedByParameter.IsNullable = true;
               processedByParameter.Value = DBNull.Value;
           }
           else
           {
               processedByParameter.Value = processedBy;
           }

            var paymentReceviedByUseridParameter = paymentReceviedByUserid.HasValue ?
                new SqlParameter("PaymentReceviedByUserid", paymentReceviedByUserid) :
                new SqlParameter("PaymentReceviedByUserid", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_InitialSetUp_AdvancePaymentProcessBySetupID @AdvancePaymentSetupID, @ProcessedBy, @PaymentReceviedByUserid, @ErrorCode OUT", advancePaymentSetupIDParameter, processedByParameter, paymentReceviedByUseridParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_InitialSetUp_ExpensesetUpProcess(Nullable<Int32> expenseSetUpId, string processedBy, ObjectParameter errorCode)
        {

            var expenseSetUpIdParameter = expenseSetUpId.HasValue ?
                new SqlParameter("ExpenseSetUpId", expenseSetUpId) :
                new SqlParameter("ExpenseSetUpId", SqlDbType.Int);

           var processedByParameter = new SqlParameter("ProcessedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(processedBy))
           {
               processedByParameter.IsNullable = true;
               processedByParameter.Value = DBNull.Value;
           }
           else
           {
               processedByParameter.Value = processedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_InitialSetUp_ExpensesetUpProcess @ExpenseSetUpId, @ProcessedBy, @ErrorCode OUT", expenseSetUpIdParameter, processedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_InitialSetUp_FacilityBookingRequestProcessBySetupID(Nullable<Int32> facilityRequestSetupID, string facilityPriceIds, string processedBy, Nullable<Int64> paymentReceviedByUserid, ObjectParameter errorCode)
        {

            var facilityRequestSetupIDParameter = facilityRequestSetupID.HasValue ?
                new SqlParameter("FacilityRequestSetupID", facilityRequestSetupID) :
                new SqlParameter("FacilityRequestSetupID", SqlDbType.Int);

           var facilityPriceIdsParameter = new SqlParameter("FacilityPriceIds", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(facilityPriceIds))
           {
               facilityPriceIdsParameter.IsNullable = true;
               facilityPriceIdsParameter.Value = DBNull.Value;
           }
           else
           {
               facilityPriceIdsParameter.Value = facilityPriceIds;
           }

           var processedByParameter = new SqlParameter("ProcessedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(processedBy))
           {
               processedByParameter.IsNullable = true;
               processedByParameter.Value = DBNull.Value;
           }
           else
           {
               processedByParameter.Value = processedBy;
           }

            var paymentReceviedByUseridParameter = paymentReceviedByUserid.HasValue ?
                new SqlParameter("PaymentReceviedByUserid", paymentReceviedByUserid) :
                new SqlParameter("PaymentReceviedByUserid", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_InitialSetUp_FacilityBookingRequestProcessBySetupID @FacilityRequestSetupID, @FacilityPriceIds, @ProcessedBy, @PaymentReceviedByUserid, @ErrorCode OUT", facilityRequestSetupIDParameter, facilityPriceIdsParameter, processedByParameter, paymentReceviedByUseridParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_InitialSetUp_GetAccessCardsRequestDetailsByAccessGoodsId_Result> SP_DGC_InitialSetUp_GetAccessCardsRequestDetailsByAccessGoodsId(Nullable<Int32> typeOfAccessGoodsId)
        {

            var typeOfAccessGoodsIdParameter = typeOfAccessGoodsId.HasValue ?
                new SqlParameter("TypeOfAccessGoodsId", typeOfAccessGoodsId) :
                new SqlParameter("TypeOfAccessGoodsId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_InitialSetUp_GetAccessCardsRequestDetailsByAccessGoodsId_Result>("SP_DGC_InitialSetUp_GetAccessCardsRequestDetailsByAccessGoodsId @TypeOfAccessGoodsId", typeOfAccessGoodsIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_InitialSetUp_GetAllAdvancePaymentDetails_Result> SP_DGC_InitialSetUp_GetAllAdvancePaymentDetails()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_InitialSetUp_GetAllAdvancePaymentDetails_Result>("SP_DGC_InitialSetUp_GetAllAdvancePaymentDetails");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_InitialSetUp_GetAllFacilityRequestDetails_Result> SP_DGC_InitialSetUp_GetAllFacilityRequestDetails(Nullable<Int32> facilityId)
        {

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_InitialSetUp_GetAllFacilityRequestDetails_Result>("SP_DGC_InitialSetUp_GetAllFacilityRequestDetails @FacilityId", facilityIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_InitialSetUp_GetAllPaidParkingSlotRequestDetails_Result> SP_DGC_InitialSetUp_GetAllPaidParkingSlotRequestDetails()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_InitialSetUp_GetAllPaidParkingSlotRequestDetails_Result>("SP_DGC_InitialSetUp_GetAllPaidParkingSlotRequestDetails");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_InitialSetUp_GetAllShopPaymentSetupDetails_Result> SP_DGC_InitialSetUp_GetAllShopPaymentSetupDetails()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_InitialSetUp_GetAllShopPaymentSetupDetails_Result>("SP_DGC_InitialSetUp_GetAllShopPaymentSetupDetails");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_InitialSetUp_GetAllTenantSetupDetails_Result> SP_DGC_InitialSetUp_GetAllTenantSetupDetails()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_InitialSetUp_GetAllTenantSetupDetails_Result>("SP_DGC_InitialSetUp_GetAllTenantSetupDetails");


            return retVal;

        }
        public virtual int SP_DGC_InitialSetUp_HallBookingProcess(Nullable<Int32> hallBookingSetupId, string hallPriceIds, string processedBy, Nullable<Int64> paymentReceviedByUserid, ObjectParameter errorCode)
        {

            var hallBookingSetupIdParameter = hallBookingSetupId.HasValue ?
                new SqlParameter("HallBookingSetupId", hallBookingSetupId) :
                new SqlParameter("HallBookingSetupId", SqlDbType.Int);

           var hallPriceIdsParameter = new SqlParameter("HallPriceIds", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(hallPriceIds))
           {
               hallPriceIdsParameter.IsNullable = true;
               hallPriceIdsParameter.Value = DBNull.Value;
           }
           else
           {
               hallPriceIdsParameter.Value = hallPriceIds;
           }

           var processedByParameter = new SqlParameter("ProcessedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(processedBy))
           {
               processedByParameter.IsNullable = true;
               processedByParameter.Value = DBNull.Value;
           }
           else
           {
               processedByParameter.Value = processedBy;
           }

            var paymentReceviedByUseridParameter = paymentReceviedByUserid.HasValue ?
                new SqlParameter("PaymentReceviedByUserid", paymentReceviedByUserid) :
                new SqlParameter("PaymentReceviedByUserid", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_InitialSetUp_HallBookingProcess @HallBookingSetupId, @HallPriceIds, @ProcessedBy, @PaymentReceviedByUserid, @ErrorCode OUT", hallBookingSetupIdParameter, hallPriceIdsParameter, processedByParameter, paymentReceviedByUseridParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_InitialSetUp_LedgerProcessByLedgerSetupId(Nullable<Int32> ledgerSetupId, string processedBy, ObjectParameter errorCode)
        {

            var ledgerSetupIdParameter = ledgerSetupId.HasValue ?
                new SqlParameter("LedgerSetupId", ledgerSetupId) :
                new SqlParameter("LedgerSetupId", SqlDbType.Int);

           var processedByParameter = new SqlParameter("ProcessedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(processedBy))
           {
               processedByParameter.IsNullable = true;
               processedByParameter.Value = DBNull.Value;
           }
           else
           {
               processedByParameter.Value = processedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_InitialSetUp_LedgerProcessByLedgerSetupId @LedgerSetupId, @ProcessedBy, @ErrorCode OUT", ledgerSetupIdParameter, processedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_InitialSetUp_ParkingRequestProcessBySetupID(Nullable<Int32> parkingRequestSetupID, string vehicleParkPriceIds, string processedBy, Nullable<Int64> paymentReceviedByUserid, ObjectParameter errorCode)
        {

            var parkingRequestSetupIDParameter = parkingRequestSetupID.HasValue ?
                new SqlParameter("ParkingRequestSetupID", parkingRequestSetupID) :
                new SqlParameter("ParkingRequestSetupID", SqlDbType.Int);

           var vehicleParkPriceIdsParameter = new SqlParameter("VehicleParkPriceIds", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(vehicleParkPriceIds))
           {
               vehicleParkPriceIdsParameter.IsNullable = true;
               vehicleParkPriceIdsParameter.Value = DBNull.Value;
           }
           else
           {
               vehicleParkPriceIdsParameter.Value = vehicleParkPriceIds;
           }

           var processedByParameter = new SqlParameter("ProcessedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(processedBy))
           {
               processedByParameter.IsNullable = true;
               processedByParameter.Value = DBNull.Value;
           }
           else
           {
               processedByParameter.Value = processedBy;
           }

            var paymentReceviedByUseridParameter = paymentReceviedByUserid.HasValue ?
                new SqlParameter("PaymentReceviedByUserid", paymentReceviedByUserid) :
                new SqlParameter("PaymentReceviedByUserid", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_InitialSetUp_ParkingRequestProcessBySetupID @ParkingRequestSetupID, @VehicleParkPriceIds, @ProcessedBy, @PaymentReceviedByUserid, @ErrorCode OUT", parkingRequestSetupIDParameter, vehicleParkPriceIdsParameter, processedByParameter, paymentReceviedByUseridParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_InitialSetUp_ProcessBlocks(string createdBy, ObjectParameter errorCode)
        {

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_InitialSetUp_ProcessBlocks @CreatedBy, @ErrorCode OUT", createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_InitialSetUp_ProcessFloors(string createdBy, ObjectParameter errorCode)
        {

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_InitialSetUp_ProcessFloors @CreatedBy, @ErrorCode OUT", createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_InitialSetUp_RenovationRequestProcess(Nullable<Int32> renovationRequestSetupId, string processedBy, Nullable<Int64> paymentReceviedByUserid, ObjectParameter errorCode)
        {

            var renovationRequestSetupIdParameter = renovationRequestSetupId.HasValue ?
                new SqlParameter("RenovationRequestSetupId", renovationRequestSetupId) :
                new SqlParameter("RenovationRequestSetupId", SqlDbType.Int);

           var processedByParameter = new SqlParameter("ProcessedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(processedBy))
           {
               processedByParameter.IsNullable = true;
               processedByParameter.Value = DBNull.Value;
           }
           else
           {
               processedByParameter.Value = processedBy;
           }

            var paymentReceviedByUseridParameter = paymentReceviedByUserid.HasValue ?
                new SqlParameter("PaymentReceviedByUserid", paymentReceviedByUserid) :
                new SqlParameter("PaymentReceviedByUserid", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_InitialSetUp_RenovationRequestProcess @RenovationRequestSetupId, @ProcessedBy, @PaymentReceviedByUserid, @ErrorCode OUT", renovationRequestSetupIdParameter, processedByParameter, paymentReceviedByUseridParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_InitialSetUp_SaveShopPaymentSetupDetails(string shopDetails, string createdBy, ObjectParameter errorCode)
        {

            var shopDetailsParameter = shopDetails != null ?
                new SqlParameter("ShopDetails", shopDetails) :
                new SqlParameter("ShopDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_InitialSetUp_SaveShopPaymentSetupDetails @ShopDetails, @CreatedBy, @ErrorCode OUT", shopDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_InitialSetUp_ShopPaymentProcessByShopSetupid(Nullable<Int32> shopSetupId, string processedBy, Nullable<Int64> processedByUserid, ObjectParameter errorCode)
        {

            var shopSetupIdParameter = shopSetupId.HasValue ?
                new SqlParameter("ShopSetupId", shopSetupId) :
                new SqlParameter("ShopSetupId", SqlDbType.Int);

           var processedByParameter = new SqlParameter("ProcessedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(processedBy))
           {
               processedByParameter.IsNullable = true;
               processedByParameter.Value = DBNull.Value;
           }
           else
           {
               processedByParameter.Value = processedBy;
           }

            var processedByUseridParameter = processedByUserid.HasValue ?
                new SqlParameter("ProcessedByUserid", processedByUserid) :
                new SqlParameter("ProcessedByUserid", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_InitialSetUp_ShopPaymentProcessByShopSetupid @ShopSetupId, @ProcessedBy, @ProcessedByUserid, @ErrorCode OUT", shopSetupIdParameter, processedByParameter, processedByUseridParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_InitialSetUp_ShopProcess(Nullable<Int32> shopSetUpId, string processedBy, ObjectParameter errorCode)
        {

            var shopSetUpIdParameter = shopSetUpId.HasValue ?
                new SqlParameter("ShopSetUpId", shopSetUpId) :
                new SqlParameter("ShopSetUpId", SqlDbType.Int);

           var processedByParameter = new SqlParameter("ProcessedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(processedBy))
           {
               processedByParameter.IsNullable = true;
               processedByParameter.Value = DBNull.Value;
           }
           else
           {
               processedByParameter.Value = processedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_InitialSetUp_ShopProcess @ShopSetUpId, @ProcessedBy, @ErrorCode OUT", shopSetUpIdParameter, processedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_InitialSetUp_TenantReqeustProcessBySetupId(Nullable<Int32> tenantSetupId, string processedBy, Nullable<Int64> processedByUserid, ObjectParameter errorCode)
        {

            var tenantSetupIdParameter = tenantSetupId.HasValue ?
                new SqlParameter("TenantSetupId", tenantSetupId) :
                new SqlParameter("TenantSetupId", SqlDbType.Int);

           var processedByParameter = new SqlParameter("ProcessedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(processedBy))
           {
               processedByParameter.IsNullable = true;
               processedByParameter.Value = DBNull.Value;
           }
           else
           {
               processedByParameter.Value = processedBy;
           }

            var processedByUseridParameter = processedByUserid.HasValue ?
                new SqlParameter("ProcessedByUserid", processedByUserid) :
                new SqlParameter("ProcessedByUserid", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_InitialSetUp_TenantReqeustProcessBySetupId @TenantSetupId, @ProcessedBy, @ProcessedByUserid, @ErrorCode OUT", tenantSetupIdParameter, processedByParameter, processedByUseridParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_InitialSetUp_UnitDueProcess(Nullable<Int32> dueSetupId, Nullable<Int64> processeUserByUserId, string processedBy, Nullable<Int32> waterBillDuemapid, Nullable<Int32> maintananceBillDuemapid, Nullable<Int32> landAssesmentBillDuemapid, Nullable<Int32> insuranceBillDuemapid, Nullable<Int32> sinkingFundBillDuemapid, ObjectParameter errorCode)
        {

            var dueSetupIdParameter = dueSetupId.HasValue ?
                new SqlParameter("DueSetupId", dueSetupId) :
                new SqlParameter("DueSetupId", SqlDbType.Int);

            var processeUserByUserIdParameter = processeUserByUserId.HasValue ?
                new SqlParameter("ProcesseUserByUserId", processeUserByUserId) :
                new SqlParameter("ProcesseUserByUserId", SqlDbType.BigInt);

           var processedByParameter = new SqlParameter("ProcessedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(processedBy))
           {
               processedByParameter.IsNullable = true;
               processedByParameter.Value = DBNull.Value;
           }
           else
           {
               processedByParameter.Value = processedBy;
           }

            var waterBillDuemapidParameter = waterBillDuemapid.HasValue ?
                new SqlParameter("waterBillDuemapid", waterBillDuemapid) :
                new SqlParameter("waterBillDuemapid", SqlDbType.Int);

            var maintananceBillDuemapidParameter = maintananceBillDuemapid.HasValue ?
                new SqlParameter("MaintananceBillDuemapid", maintananceBillDuemapid) :
                new SqlParameter("MaintananceBillDuemapid", SqlDbType.Int);

            var landAssesmentBillDuemapidParameter = landAssesmentBillDuemapid.HasValue ?
                new SqlParameter("LandAssesmentBillDuemapid", landAssesmentBillDuemapid) :
                new SqlParameter("LandAssesmentBillDuemapid", SqlDbType.Int);

            var insuranceBillDuemapidParameter = insuranceBillDuemapid.HasValue ?
                new SqlParameter("InsuranceBillDuemapid", insuranceBillDuemapid) :
                new SqlParameter("InsuranceBillDuemapid", SqlDbType.Int);

            var sinkingFundBillDuemapidParameter = sinkingFundBillDuemapid.HasValue ?
                new SqlParameter("SinkingFundBillDuemapid", sinkingFundBillDuemapid) :
                new SqlParameter("SinkingFundBillDuemapid", SqlDbType.Int);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_InitialSetUp_UnitDueProcess @DueSetupId, @ProcesseUserByUserId, @ProcessedBy, @waterBillDuemapid, @MaintananceBillDuemapid, @LandAssesmentBillDuemapid, @InsuranceBillDuemapid, @SinkingFundBillDuemapid, @ErrorCode OUT", dueSetupIdParameter, processeUserByUserIdParameter, processedByParameter, waterBillDuemapidParameter, maintananceBillDuemapidParameter, landAssesmentBillDuemapidParameter, insuranceBillDuemapidParameter, sinkingFundBillDuemapidParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_InitialSetUp_VendorCompanyRegistrationProcess(Nullable<Int32> vendorSetUpId, string processedBy, ObjectParameter errorCode, string processStage)
        {

            var vendorSetUpIdParameter = vendorSetUpId.HasValue ?
                new SqlParameter("VendorSetUpId", vendorSetUpId) :
                new SqlParameter("VendorSetUpId", SqlDbType.Int);

           var processedByParameter = new SqlParameter("ProcessedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(processedBy))
           {
               processedByParameter.IsNullable = true;
               processedByParameter.Value = DBNull.Value;
           }
           else
           {
               processedByParameter.Value = processedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var processStageParameter = new SqlParameter("processStage", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(processStage))
           {
               processStageParameter.IsNullable = true;
               processStageParameter.Value = DBNull.Value;
           }
           else
           {
               processStageParameter.Value = processStage;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_InitialSetUp_VendorCompanyRegistrationProcess @VendorSetUpId, @ProcessedBy, @ErrorCode OUT, @processStage", vendorSetUpIdParameter, processedByParameter, errorCodeParameter, processStageParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_IntialBRSAuthorizedCodeGeneration(Nullable<Int64> bankReconciliationId, Nullable<Int32> paymentReqId, Nullable<DateTime> oldReconciliationDate, string oldReconciliationNote, Nullable<Int64> requestedByUserId, string requestedBy, Nullable<DateTime> todaysClientDate, ObjectParameter authorizedCode, ObjectParameter propertyMamgerUserId, ObjectParameter errorCode)
        {

            var bankReconciliationIdParameter = bankReconciliationId.HasValue ?
                new SqlParameter("BankReconciliationId", bankReconciliationId) :
                new SqlParameter("BankReconciliationId", SqlDbType.BigInt);

            var paymentReqIdParameter = paymentReqId.HasValue ?
                new SqlParameter("PaymentReqId", paymentReqId) :
                new SqlParameter("PaymentReqId", SqlDbType.Int);

            var oldReconciliationDateParameter = oldReconciliationDate.HasValue ?
                new SqlParameter("OldReconciliationDate", oldReconciliationDate) :
                new SqlParameter("OldReconciliationDate", SqlDbType.DateTime);

           var oldReconciliationNoteParameter = new SqlParameter("OldReconciliationNote", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(oldReconciliationNote))
           {
               oldReconciliationNoteParameter.IsNullable = true;
               oldReconciliationNoteParameter.Value = DBNull.Value;
           }
           else
           {
               oldReconciliationNoteParameter.Value = oldReconciliationNote;
           }

            var requestedByUserIdParameter = requestedByUserId.HasValue ?
                new SqlParameter("RequestedByUserId", requestedByUserId) :
                new SqlParameter("RequestedByUserId", SqlDbType.BigInt);

           var requestedByParameter = new SqlParameter("RequestedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(requestedBy))
           {
               requestedByParameter.IsNullable = true;
               requestedByParameter.Value = DBNull.Value;
           }
           else
           {
               requestedByParameter.Value = requestedBy;
           }

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);

           var authorizedCodeParameter = new SqlParameter("AuthorizedCode", SqlDbType.VarChar, 500);
               authorizedCodeParameter.Direction = System.Data.ParameterDirection.Output;
               authorizedCodeParameter.Value = authorizedCode != null ? authorizedCode.Value : null;

           var propertyMamgerUserIdParameter = new SqlParameter("PropertyMamgerUserId", SqlDbType.BigInt);
               propertyMamgerUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               propertyMamgerUserIdParameter.Value = propertyMamgerUserId != null ? propertyMamgerUserId.Value : null;

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_IntialBRSAuthorizedCodeGeneration @BankReconciliationId, @PaymentReqId, @OldReconciliationDate, @OldReconciliationNote, @RequestedByUserId, @RequestedBy, @TodaysClientDate, @AuthorizedCode OUT, @PropertyMamgerUserId OUT, @ErrorCode OUT", bankReconciliationIdParameter, paymentReqIdParameter, oldReconciliationDateParameter, oldReconciliationNoteParameter, requestedByUserIdParameter, requestedByParameter, todaysClientDateParameter, authorizedCodeParameter, propertyMamgerUserIdParameter, errorCodeParameter);

            authorizedCode.Value = authorizedCodeParameter.Value;
            propertyMamgerUserId.Value = propertyMamgerUserIdParameter.Value;
            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_IntialSetup_GetAllExpenseProcessDetails_Result> SP_DGC_IntialSetup_GetAllExpenseProcessDetails(ObjectParameter actualTotalRecords)
        {

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_IntialSetup_GetAllExpenseProcessDetails_Result>("SP_DGC_IntialSetup_GetAllExpenseProcessDetails @ActualTotalRecords OUT", actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_IntialSetup_GetAllLedgerProcessDetails_Result> SP_DGC_IntialSetup_GetAllLedgerProcessDetails(ObjectParameter actualTotalRecords)
        {

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_IntialSetup_GetAllLedgerProcessDetails_Result>("SP_DGC_IntialSetup_GetAllLedgerProcessDetails @ActualTotalRecords OUT", actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_IntialSetup_GetAllShopProcessDetails_Result> SP_DGC_IntialSetup_GetAllShopProcessDetails(ObjectParameter actualTotalRecords)
        {

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_IntialSetup_GetAllShopProcessDetails_Result>("SP_DGC_IntialSetup_GetAllShopProcessDetails @ActualTotalRecords OUT", actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_IntialSetup_GetAllUnitInvoiceBillDueProcessDetails_Result> SP_DGC_IntialSetup_GetAllUnitInvoiceBillDueProcessDetails(ObjectParameter actualTotalRecords)
        {

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_IntialSetup_GetAllUnitInvoiceBillDueProcessDetails_Result>("SP_DGC_IntialSetup_GetAllUnitInvoiceBillDueProcessDetails @ActualTotalRecords OUT", actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_IntialSetup_GetAllVendorCompanyProcessDetails_Result> SP_DGC_IntialSetup_GetAllVendorCompanyProcessDetails(ObjectParameter actualTotalRecords)
        {

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_IntialSetup_GetAllVendorCompanyProcessDetails_Result>("SP_DGC_IntialSetup_GetAllVendorCompanyProcessDetails @ActualTotalRecords OUT", actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_IntialSetup_GetOwnerDetailsBySetupd_Result> SP_DGC_IntialSetup_GetOwnerDetailsBySetupd(Nullable<Int32> setupId)
        {

            var setupIdParameter = setupId.HasValue ?
                new SqlParameter("SetupId", setupId) :
                new SqlParameter("SetupId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_IntialSetup_GetOwnerDetailsBySetupd_Result>("SP_DGC_IntialSetup_GetOwnerDetailsBySetupd @SetupId", setupIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_IntialSetup_GetTenantDetailsBySetupd_Result> SP_DGC_IntialSetup_GetTenantDetailsBySetupd(Nullable<Int32> setupId)
        {

            var setupIdParameter = setupId.HasValue ?
                new SqlParameter("SetupId", setupId) :
                new SqlParameter("SetupId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_IntialSetup_GetTenantDetailsBySetupd_Result>("SP_DGC_IntialSetup_GetTenantDetailsBySetupd @SetupId", setupIdParameter);


            return retVal;

        }
        public virtual int SP_DGC_IntialSetup_GetUnitBillDueGlMapIds(ObjectParameter waterBillDuemapid, ObjectParameter maintananceBillDuemapid, ObjectParameter landAssesmentBillDuemapid, ObjectParameter insuranceBillDuemapid, ObjectParameter sinkingFundBillDuemapid)
        {

           var waterBillDuemapidParameter = new SqlParameter("waterBillDuemapid", SqlDbType.Int);
               waterBillDuemapidParameter.Direction = System.Data.ParameterDirection.Output;
               waterBillDuemapidParameter.Value = waterBillDuemapid != null ? waterBillDuemapid.Value : null;

           var maintananceBillDuemapidParameter = new SqlParameter("MaintananceBillDuemapid", SqlDbType.Int);
               maintananceBillDuemapidParameter.Direction = System.Data.ParameterDirection.Output;
               maintananceBillDuemapidParameter.Value = maintananceBillDuemapid != null ? maintananceBillDuemapid.Value : null;

           var landAssesmentBillDuemapidParameter = new SqlParameter("LandAssesmentBillDuemapid", SqlDbType.Int);
               landAssesmentBillDuemapidParameter.Direction = System.Data.ParameterDirection.Output;
               landAssesmentBillDuemapidParameter.Value = landAssesmentBillDuemapid != null ? landAssesmentBillDuemapid.Value : null;

           var insuranceBillDuemapidParameter = new SqlParameter("InsuranceBillDuemapid", SqlDbType.Int);
               insuranceBillDuemapidParameter.Direction = System.Data.ParameterDirection.Output;
               insuranceBillDuemapidParameter.Value = insuranceBillDuemapid != null ? insuranceBillDuemapid.Value : null;

           var sinkingFundBillDuemapidParameter = new SqlParameter("SinkingFundBillDuemapid", SqlDbType.Int);
               sinkingFundBillDuemapidParameter.Direction = System.Data.ParameterDirection.Output;
               sinkingFundBillDuemapidParameter.Value = sinkingFundBillDuemapid != null ? sinkingFundBillDuemapid.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_IntialSetup_GetUnitBillDueGlMapIds @waterBillDuemapid OUT, @MaintananceBillDuemapid OUT, @LandAssesmentBillDuemapid OUT, @InsuranceBillDuemapid OUT, @SinkingFundBillDuemapid OUT", waterBillDuemapidParameter, maintananceBillDuemapidParameter, landAssesmentBillDuemapidParameter, insuranceBillDuemapidParameter, sinkingFundBillDuemapidParameter);

            waterBillDuemapid.Value = waterBillDuemapidParameter.Value;
            maintananceBillDuemapid.Value = maintananceBillDuemapidParameter.Value;
            landAssesmentBillDuemapid.Value = landAssesmentBillDuemapidParameter.Value;
            insuranceBillDuemapid.Value = insuranceBillDuemapidParameter.Value;
            sinkingFundBillDuemapid.Value = sinkingFundBillDuemapidParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_IntialSetup_SaveAdvancePaymentSetupDetails(string advancePaymentDetails, string createdBy, ObjectParameter errorCode)
        {

            var advancePaymentDetailsParameter = advancePaymentDetails != null ?
                new SqlParameter("AdvancePaymentDetails", advancePaymentDetails) :
                new SqlParameter("AdvancePaymentDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_IntialSetup_SaveAdvancePaymentSetupDetails @AdvancePaymentDetails, @CreatedBy, @ErrorCode OUT", advancePaymentDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_IntialSetup_SaveExpenseProcessDetails(string expenseDetails, string createdBy, ObjectParameter errorCode)
        {

            var expenseDetailsParameter = expenseDetails != null ?
                new SqlParameter("ExpenseDetails", expenseDetails) :
                new SqlParameter("ExpenseDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_IntialSetup_SaveExpenseProcessDetails @ExpenseDetails, @CreatedBy, @ErrorCode OUT", expenseDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_IntialSetup_SaveFacilityRequestSetupDetails(string fBRequestDetails, string createdBy, ObjectParameter errorCode)
        {

            var fBRequestDetailsParameter = fBRequestDetails != null ?
                new SqlParameter("FBRequestDetails", fBRequestDetails) :
                new SqlParameter("FBRequestDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_IntialSetup_SaveFacilityRequestSetupDetails @FBRequestDetails, @CreatedBy, @ErrorCode OUT", fBRequestDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_IntialSetup_SaveLedgerProcessDetails(string ledgerDetails, string createdBy, ObjectParameter errorCode)
        {

            var ledgerDetailsParameter = ledgerDetails != null ?
                new SqlParameter("LedgerDetails", ledgerDetails) :
                new SqlParameter("LedgerDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_IntialSetup_SaveLedgerProcessDetails @LedgerDetails, @CreatedBy, @ErrorCode OUT", ledgerDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_IntialSetup_SavePaidPrkingRequestSetupDetails(string parkingRequestDetails, string createdBy, ObjectParameter errorCode)
        {

            var parkingRequestDetailsParameter = parkingRequestDetails != null ?
                new SqlParameter("ParkingRequestDetails", parkingRequestDetails) :
                new SqlParameter("ParkingRequestDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_IntialSetup_SavePaidPrkingRequestSetupDetails @ParkingRequestDetails, @CreatedBy, @ErrorCode OUT", parkingRequestDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_IntialSetup_SaveShopProcessDetails(string shopDetails, string createdBy, ObjectParameter errorCode)
        {

            var shopDetailsParameter = shopDetails != null ?
                new SqlParameter("ShopDetails", shopDetails) :
                new SqlParameter("ShopDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_IntialSetup_SaveShopProcessDetails @ShopDetails, @CreatedBy, @ErrorCode OUT", shopDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_IntialSetup_SaveTenantProcessDetails(string tenantDetails, string createdBy, ObjectParameter errorCode)
        {

            var tenantDetailsParameter = tenantDetails != null ?
                new SqlParameter("TenantDetails", tenantDetails) :
                new SqlParameter("TenantDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_IntialSetup_SaveTenantProcessDetails @TenantDetails, @CreatedBy, @ErrorCode OUT", tenantDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_IntialSetup_SaveUnitInvoiceBillDueProcessDetails(string unitInvoiceDueDetails, string createdBy, ObjectParameter errorCode)
        {

            var unitInvoiceDueDetailsParameter = unitInvoiceDueDetails != null ?
                new SqlParameter("UnitInvoiceDueDetails", unitInvoiceDueDetails) :
                new SqlParameter("UnitInvoiceDueDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_IntialSetup_SaveUnitInvoiceBillDueProcessDetails @UnitInvoiceDueDetails, @CreatedBy, @ErrorCode OUT", unitInvoiceDueDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_IntialSetup_SaveVendorCompanyProcessDetails(string vendoeCompanyDetails, string createdBy, ObjectParameter errorCode)
        {

            var vendoeCompanyDetailsParameter = vendoeCompanyDetails != null ?
                new SqlParameter("VendoeCompanyDetails", vendoeCompanyDetails) :
                new SqlParameter("VendoeCompanyDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_IntialSetup_SaveVendorCompanyProcessDetails @VendoeCompanyDetails, @CreatedBy, @ErrorCode OUT", vendoeCompanyDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_IntialSetup_UpdateOwnerDetailsBySetupId(Nullable<Int32> ownerSetupID, string blockName, string floorName, string unitName, string ownerName, string ownerEmail, string ownerMobileNumber, string isMalaysian, string iCOrPassPortNumber, string isSelfOccupied, string ownerAddress, string updatedBy, ObjectParameter errorCode)
        {

            var ownerSetupIDParameter = ownerSetupID.HasValue ?
                new SqlParameter("OwnerSetupID", ownerSetupID) :
                new SqlParameter("OwnerSetupID", SqlDbType.Int);

           var blockNameParameter = new SqlParameter("BlockName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(blockName))
           {
               blockNameParameter.IsNullable = true;
               blockNameParameter.Value = DBNull.Value;
           }
           else
           {
               blockNameParameter.Value = blockName;
           }

           var floorNameParameter = new SqlParameter("FloorName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(floorName))
           {
               floorNameParameter.IsNullable = true;
               floorNameParameter.Value = DBNull.Value;
           }
           else
           {
               floorNameParameter.Value = floorName;
           }

           var unitNameParameter = new SqlParameter("UnitName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitName))
           {
               unitNameParameter.IsNullable = true;
               unitNameParameter.Value = DBNull.Value;
           }
           else
           {
               unitNameParameter.Value = unitName;
           }

           var ownerNameParameter = new SqlParameter("OwnerName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ownerName))
           {
               ownerNameParameter.IsNullable = true;
               ownerNameParameter.Value = DBNull.Value;
           }
           else
           {
               ownerNameParameter.Value = ownerName;
           }

           var ownerEmailParameter = new SqlParameter("OwnerEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ownerEmail))
           {
               ownerEmailParameter.IsNullable = true;
               ownerEmailParameter.Value = DBNull.Value;
           }
           else
           {
               ownerEmailParameter.Value = ownerEmail;
           }

           var ownerMobileNumberParameter = new SqlParameter("OwnerMobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ownerMobileNumber))
           {
               ownerMobileNumberParameter.IsNullable = true;
               ownerMobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               ownerMobileNumberParameter.Value = ownerMobileNumber;
           }

           var isMalaysianParameter = new SqlParameter("IsMalaysian", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isMalaysian))
           {
               isMalaysianParameter.IsNullable = true;
               isMalaysianParameter.Value = DBNull.Value;
           }
           else
           {
               isMalaysianParameter.Value = isMalaysian;
           }

           var iCOrPassPortNumberParameter = new SqlParameter("ICOrPassPortNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(iCOrPassPortNumber))
           {
               iCOrPassPortNumberParameter.IsNullable = true;
               iCOrPassPortNumberParameter.Value = DBNull.Value;
           }
           else
           {
               iCOrPassPortNumberParameter.Value = iCOrPassPortNumber;
           }

           var isSelfOccupiedParameter = new SqlParameter("IsSelfOccupied", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isSelfOccupied))
           {
               isSelfOccupiedParameter.IsNullable = true;
               isSelfOccupiedParameter.Value = DBNull.Value;
           }
           else
           {
               isSelfOccupiedParameter.Value = isSelfOccupied;
           }

           var ownerAddressParameter = new SqlParameter("OwnerAddress", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ownerAddress))
           {
               ownerAddressParameter.IsNullable = true;
               ownerAddressParameter.Value = DBNull.Value;
           }
           else
           {
               ownerAddressParameter.Value = ownerAddress;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_IntialSetup_UpdateOwnerDetailsBySetupId @OwnerSetupID, @BlockName, @FloorName, @UnitName, @OwnerName, @OwnerEmail, @OwnerMobileNumber, @IsMalaysian, @ICOrPassPortNumber, @IsSelfOccupied, @OwnerAddress, @UpdatedBy, @ErrorCode OUT", ownerSetupIDParameter, blockNameParameter, floorNameParameter, unitNameParameter, ownerNameParameter, ownerEmailParameter, ownerMobileNumberParameter, isMalaysianParameter, iCOrPassPortNumberParameter, isSelfOccupiedParameter, ownerAddressParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_IntialSetup_UpdateTenantDetailsBySetupId(Nullable<Int32> tenantSetupID, string blockName, string floorName, string unitName, string tenantEmail, string tenantName, string tenantMobilenumber, string updatedBy, ObjectParameter errorCode)
        {

            var tenantSetupIDParameter = tenantSetupID.HasValue ?
                new SqlParameter("TenantSetupID", tenantSetupID) :
                new SqlParameter("TenantSetupID", SqlDbType.Int);

           var blockNameParameter = new SqlParameter("BlockName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(blockName))
           {
               blockNameParameter.IsNullable = true;
               blockNameParameter.Value = DBNull.Value;
           }
           else
           {
               blockNameParameter.Value = blockName;
           }

           var floorNameParameter = new SqlParameter("FloorName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(floorName))
           {
               floorNameParameter.IsNullable = true;
               floorNameParameter.Value = DBNull.Value;
           }
           else
           {
               floorNameParameter.Value = floorName;
           }

           var unitNameParameter = new SqlParameter("UnitName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitName))
           {
               unitNameParameter.IsNullable = true;
               unitNameParameter.Value = DBNull.Value;
           }
           else
           {
               unitNameParameter.Value = unitName;
           }

           var tenantEmailParameter = new SqlParameter("TenantEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(tenantEmail))
           {
               tenantEmailParameter.IsNullable = true;
               tenantEmailParameter.Value = DBNull.Value;
           }
           else
           {
               tenantEmailParameter.Value = tenantEmail;
           }

           var tenantNameParameter = new SqlParameter("TenantName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(tenantName))
           {
               tenantNameParameter.IsNullable = true;
               tenantNameParameter.Value = DBNull.Value;
           }
           else
           {
               tenantNameParameter.Value = tenantName;
           }

           var tenantMobilenumberParameter = new SqlParameter("TenantMobilenumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(tenantMobilenumber))
           {
               tenantMobilenumberParameter.IsNullable = true;
               tenantMobilenumberParameter.Value = DBNull.Value;
           }
           else
           {
               tenantMobilenumberParameter.Value = tenantMobilenumber;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_IntialSetup_UpdateTenantDetailsBySetupId @TenantSetupID, @BlockName, @FloorName, @UnitName, @TenantEmail, @TenantName, @TenantMobilenumber, @UpdatedBy, @ErrorCode OUT", tenantSetupIDParameter, blockNameParameter, floorNameParameter, unitNameParameter, tenantEmailParameter, tenantNameParameter, tenantMobilenumberParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_PG_GetPaymentLineDetailsByPaymentId_Result> SP_DGC_PG_GetPaymentLineDetailsByPaymentId(Nullable<Int32> paymentRequestId)
        {

            var paymentRequestIdParameter = paymentRequestId.HasValue ?
                new SqlParameter("PaymentRequestId", paymentRequestId) :
                new SqlParameter("PaymentRequestId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_PG_GetPaymentLineDetailsByPaymentId_Result>("SP_DGC_PG_GetPaymentLineDetailsByPaymentId @PaymentRequestId", paymentRequestIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_PG_GetPG_RequestResponseByPGResponseId_Result> SP_DGC_PG_GetPG_RequestResponseByPGResponseId(Nullable<Int64> pGRR_Id)
        {

            var pGRR_IdParameter = pGRR_Id.HasValue ?
                new SqlParameter("PGRR_Id", pGRR_Id) :
                new SqlParameter("PGRR_Id", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_PG_GetPG_RequestResponseByPGResponseId_Result>("SP_DGC_PG_GetPG_RequestResponseByPGResponseId @PGRR_Id", pGRR_IdParameter);


            return retVal;

        }
        public virtual int SP_DGC_PG_LogIpaySuccessResponse(string responseXml, ObjectParameter errorCode, ObjectParameter pGResponseLogId)
        {

            var responseXmlParameter = responseXml != null ?
                new SqlParameter("ResponseXml", responseXml) :
                new SqlParameter("ResponseXml", SqlDbType.Xml);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var pGResponseLogIdParameter = new SqlParameter("PGResponseLogId", SqlDbType.BigInt);
               pGResponseLogIdParameter.Direction = System.Data.ParameterDirection.Output;
               pGResponseLogIdParameter.Value = pGResponseLogId != null ? pGResponseLogId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_PG_LogIpaySuccessResponse @ResponseXml, @ErrorCode OUT, @PGResponseLogId OUT", responseXmlParameter, errorCodeParameter, pGResponseLogIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            pGResponseLogId.Value = pGResponseLogIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_PG_SaveAccessGoodsRequestPaymentInitiation(Nullable<Int64> accessGoodsRequestId, Nullable<Int32> requestStatusId, string paymentInfo, string comments, Nullable<Int64> actionTakenByUserId, string updatedBY, Nullable<Int32> previousStatusID, Nullable<DateTime> paymentDate, ObjectParameter errorCode, ObjectParameter pGResponseId)
        {

            var accessGoodsRequestIdParameter = accessGoodsRequestId.HasValue ?
                new SqlParameter("AccessGoodsRequestId", accessGoodsRequestId) :
                new SqlParameter("AccessGoodsRequestId", SqlDbType.BigInt);

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);

            var paymentDateParameter = paymentDate.HasValue ?
                new SqlParameter("PaymentDate", paymentDate) :
                new SqlParameter("PaymentDate", SqlDbType.DateTime);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var pGResponseIdParameter = new SqlParameter("PGResponseId", SqlDbType.BigInt);
               pGResponseIdParameter.Direction = System.Data.ParameterDirection.Output;
               pGResponseIdParameter.Value = pGResponseId != null ? pGResponseId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_PG_SaveAccessGoodsRequestPaymentInitiation @AccessGoodsRequestId, @RequestStatusId, @PaymentInfo, @Comments, @ActionTakenByUserId, @UpdatedBY, @PreviousStatusID, @PaymentDate, @ErrorCode OUT, @PGResponseId OUT", accessGoodsRequestIdParameter, requestStatusIdParameter, paymentInfoParameter, commentsParameter, actionTakenByUserIdParameter, updatedBYParameter, previousStatusIDParameter, paymentDateParameter, errorCodeParameter, pGResponseIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            pGResponseId.Value = pGResponseIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_PG_SaveAllUnitRequest_Payments_LedgerDetails(string requestType, Nullable<Int64> requestId, Nullable<Int32> requestStatusId, Nullable<Int64> requestActionId, string receivedByUser, ObjectParameter errorCode)
        {

           var requestTypeParameter = new SqlParameter("RequestType", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(requestType))
           {
               requestTypeParameter.IsNullable = true;
               requestTypeParameter.Value = DBNull.Value;
           }
           else
           {
               requestTypeParameter.Value = requestType;
           }

            var requestIdParameter = requestId.HasValue ?
                new SqlParameter("RequestId", requestId) :
                new SqlParameter("RequestId", SqlDbType.BigInt);

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var requestActionIdParameter = requestActionId.HasValue ?
                new SqlParameter("RequestActionId", requestActionId) :
                new SqlParameter("RequestActionId", SqlDbType.BigInt);

           var receivedByUserParameter = new SqlParameter("ReceivedByUser", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(receivedByUser))
           {
               receivedByUserParameter.IsNullable = true;
               receivedByUserParameter.Value = DBNull.Value;
           }
           else
           {
               receivedByUserParameter.Value = receivedByUser;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_PG_SaveAllUnitRequest_Payments_LedgerDetails @RequestType, @RequestId, @RequestStatusId, @RequestActionId, @ReceivedByUser, @ErrorCode OUT", requestTypeParameter, requestIdParameter, requestStatusIdParameter, requestActionIdParameter, receivedByUserParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_PG_SaveFacilityBookingPaymentInitiation(Nullable<Int32> condoFacilityBookingId, Nullable<Int32> requestStatusId, string paymentInfo, string comments, Nullable<Int64> actionTakenByUserId, string updatedBY, Nullable<Int32> previousStatusID, Nullable<DateTime> paymentDate, ObjectParameter errorCode, ObjectParameter pGResponseId)
        {

            var condoFacilityBookingIdParameter = condoFacilityBookingId.HasValue ?
                new SqlParameter("CondoFacilityBookingId", condoFacilityBookingId) :
                new SqlParameter("CondoFacilityBookingId", SqlDbType.Int);

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);

            var paymentDateParameter = paymentDate.HasValue ?
                new SqlParameter("PaymentDate", paymentDate) :
                new SqlParameter("PaymentDate", SqlDbType.DateTime);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var pGResponseIdParameter = new SqlParameter("PGResponseId", SqlDbType.BigInt);
               pGResponseIdParameter.Direction = System.Data.ParameterDirection.Output;
               pGResponseIdParameter.Value = pGResponseId != null ? pGResponseId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_PG_SaveFacilityBookingPaymentInitiation @CondoFacilityBookingId, @RequestStatusId, @PaymentInfo, @Comments, @ActionTakenByUserId, @UpdatedBY, @PreviousStatusID, @PaymentDate, @ErrorCode OUT, @PGResponseId OUT", condoFacilityBookingIdParameter, requestStatusIdParameter, paymentInfoParameter, commentsParameter, actionTakenByUserIdParameter, updatedBYParameter, previousStatusIDParameter, paymentDateParameter, errorCodeParameter, pGResponseIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            pGResponseId.Value = pGResponseIdParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_PG_SaveFailureResponseDetails_Result> SP_DGC_PG_SaveFailureResponseDetails(string responseXml, ObjectParameter errorCode)
        {

            var responseXmlParameter = responseXml != null ?
                new SqlParameter("ResponseXml", responseXml) :
                new SqlParameter("ResponseXml", SqlDbType.Xml);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_PG_SaveFailureResponseDetails_Result>("SP_DGC_PG_SaveFailureResponseDetails @ResponseXml, @ErrorCode OUT", responseXmlParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_PG_SaveHallbookingPaymentInitiation(Nullable<Int64> hallBookingRequestId, Nullable<Int32> requestStatusId, string paymentInfo, string comments, Nullable<Int64> actionTakenByUserId, string updatedBY, Nullable<Int32> previousStatusID, Nullable<DateTime> paymentDate, ObjectParameter errorCode, ObjectParameter pGResponseId)
        {

            var hallBookingRequestIdParameter = hallBookingRequestId.HasValue ?
                new SqlParameter("HallBookingRequestId", hallBookingRequestId) :
                new SqlParameter("HallBookingRequestId", SqlDbType.BigInt);

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);

            var paymentDateParameter = paymentDate.HasValue ?
                new SqlParameter("PaymentDate", paymentDate) :
                new SqlParameter("PaymentDate", SqlDbType.DateTime);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var pGResponseIdParameter = new SqlParameter("PGResponseId", SqlDbType.BigInt);
               pGResponseIdParameter.Direction = System.Data.ParameterDirection.Output;
               pGResponseIdParameter.Value = pGResponseId != null ? pGResponseId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_PG_SaveHallbookingPaymentInitiation @HallBookingRequestId, @RequestStatusId, @PaymentInfo, @Comments, @ActionTakenByUserId, @UpdatedBY, @PreviousStatusID, @PaymentDate, @ErrorCode OUT, @PGResponseId OUT", hallBookingRequestIdParameter, requestStatusIdParameter, paymentInfoParameter, commentsParameter, actionTakenByUserIdParameter, updatedBYParameter, previousStatusIDParameter, paymentDateParameter, errorCodeParameter, pGResponseIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            pGResponseId.Value = pGResponseIdParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_PG_SavePGResponseDetails_Result> SP_DGC_PG_SavePGResponseDetails(string responseXml, ObjectParameter errorCode)
        {

            var responseXmlParameter = responseXml != null ?
                new SqlParameter("ResponseXml", responseXml) :
                new SqlParameter("ResponseXml", SqlDbType.Xml);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_PG_SavePGResponseDetails_Result>("SP_DGC_PG_SavePGResponseDetails @ResponseXml, @ErrorCode OUT", responseXmlParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_PG_SaveRenovationRequestPaymentInitiation(Nullable<Int64> rennovationRequestId, Nullable<Int32> requestStatusId, string paymentInfo, string comments, Nullable<Int64> actionTakenByUserId, string updatedBY, Nullable<Int32> previousStatusID, Nullable<DateTime> paymentDate, ObjectParameter errorCode, ObjectParameter pGResponseId)
        {

            var rennovationRequestIdParameter = rennovationRequestId.HasValue ?
                new SqlParameter("RennovationRequestId", rennovationRequestId) :
                new SqlParameter("RennovationRequestId", SqlDbType.BigInt);

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);

            var paymentDateParameter = paymentDate.HasValue ?
                new SqlParameter("PaymentDate", paymentDate) :
                new SqlParameter("PaymentDate", SqlDbType.DateTime);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var pGResponseIdParameter = new SqlParameter("PGResponseId", SqlDbType.BigInt);
               pGResponseIdParameter.Direction = System.Data.ParameterDirection.Output;
               pGResponseIdParameter.Value = pGResponseId != null ? pGResponseId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_PG_SaveRenovationRequestPaymentInitiation @RennovationRequestId, @RequestStatusId, @PaymentInfo, @Comments, @ActionTakenByUserId, @UpdatedBY, @PreviousStatusID, @PaymentDate, @ErrorCode OUT, @PGResponseId OUT", rennovationRequestIdParameter, requestStatusIdParameter, paymentInfoParameter, commentsParameter, actionTakenByUserIdParameter, updatedBYParameter, previousStatusIDParameter, paymentDateParameter, errorCodeParameter, pGResponseIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            pGResponseId.Value = pGResponseIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_PG_SaveVehicleParkingRequestPaymentInitiation(Nullable<Int64> vehicleParkingRequestID, Nullable<Int32> requestStatusId, string paymentInfo, string comments, Nullable<Int64> actionTakenByUserId, string updatedBY, Nullable<Int32> previousStatusID, Nullable<DateTime> paymentDate, ObjectParameter errorCode, ObjectParameter pGResponseId)
        {

            var vehicleParkingRequestIDParameter = vehicleParkingRequestID.HasValue ?
                new SqlParameter("VehicleParkingRequestID", vehicleParkingRequestID) :
                new SqlParameter("VehicleParkingRequestID", SqlDbType.BigInt);

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);

            var paymentDateParameter = paymentDate.HasValue ?
                new SqlParameter("PaymentDate", paymentDate) :
                new SqlParameter("PaymentDate", SqlDbType.DateTime);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var pGResponseIdParameter = new SqlParameter("PGResponseId", SqlDbType.BigInt);
               pGResponseIdParameter.Direction = System.Data.ParameterDirection.Output;
               pGResponseIdParameter.Value = pGResponseId != null ? pGResponseId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_PG_SaveVehicleParkingRequestPaymentInitiation @VehicleParkingRequestID, @RequestStatusId, @PaymentInfo, @Comments, @ActionTakenByUserId, @UpdatedBY, @PreviousStatusID, @PaymentDate, @ErrorCode OUT, @PGResponseId OUT", vehicleParkingRequestIDParameter, requestStatusIdParameter, paymentInfoParameter, commentsParameter, actionTakenByUserIdParameter, updatedBYParameter, previousStatusIDParameter, paymentDateParameter, errorCodeParameter, pGResponseIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            pGResponseId.Value = pGResponseIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_PG_UnitCumilativeInvoiceBill_PaymentByInitiation(Nullable<Int32> unitId, string billPaymentInfo, string subScriptionCode, Nullable<Decimal> paidAmount, Nullable<Int64> paidByUserId, string paidBy, Nullable<DateTime> actualPaymentDate, ObjectParameter errorCode, ObjectParameter pGResponseId)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var billPaymentInfoParameter = billPaymentInfo != null ?
                new SqlParameter("BillPaymentInfo", billPaymentInfo) :
                new SqlParameter("BillPaymentInfo", SqlDbType.Xml);

           var subScriptionCodeParameter = new SqlParameter("SubScriptionCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(subScriptionCode))
           {
               subScriptionCodeParameter.IsNullable = true;
               subScriptionCodeParameter.Value = DBNull.Value;
           }
           else
           {
               subScriptionCodeParameter.Value = subScriptionCode;
           }

            var paidAmountParameter = paidAmount.HasValue ?
                new SqlParameter("PaidAmount", paidAmount) :
                new SqlParameter("PaidAmount", SqlDbType.Decimal);

            var paidByUserIdParameter = paidByUserId.HasValue ?
                new SqlParameter("PaidByUserId", paidByUserId) :
                new SqlParameter("PaidByUserId", SqlDbType.BigInt);

           var paidByParameter = new SqlParameter("PaidBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(paidBy))
           {
               paidByParameter.IsNullable = true;
               paidByParameter.Value = DBNull.Value;
           }
           else
           {
               paidByParameter.Value = paidBy;
           }

            var actualPaymentDateParameter = actualPaymentDate.HasValue ?
                new SqlParameter("ActualPaymentDate", actualPaymentDate) :
                new SqlParameter("ActualPaymentDate", SqlDbType.DateTime);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var pGResponseIdParameter = new SqlParameter("PGResponseId", SqlDbType.BigInt);
               pGResponseIdParameter.Direction = System.Data.ParameterDirection.Output;
               pGResponseIdParameter.Value = pGResponseId != null ? pGResponseId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_PG_UnitCumilativeInvoiceBill_PaymentByInitiation @UnitId, @BillPaymentInfo, @SubScriptionCode, @PaidAmount, @PaidByUserId, @PaidBy, @ActualPaymentDate, @ErrorCode OUT, @PGResponseId OUT", unitIdParameter, billPaymentInfoParameter, subScriptionCodeParameter, paidAmountParameter, paidByUserIdParameter, paidByParameter, actualPaymentDateParameter, errorCodeParameter, pGResponseIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            pGResponseId.Value = pGResponseIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_PG_UpdatePGResponselOGDetails(Nullable<Int64> pGResponseLogId, string errorMessage)
        {

            var pGResponseLogIdParameter = pGResponseLogId.HasValue ?
                new SqlParameter("PGResponseLogId", pGResponseLogId) :
                new SqlParameter("PGResponseLogId", SqlDbType.BigInt);

           var errorMessageParameter = new SqlParameter("ErrorMessage", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(errorMessage))
           {
               errorMessageParameter.IsNullable = true;
               errorMessageParameter.Value = DBNull.Value;
           }
           else
           {
               errorMessageParameter.Value = errorMessage;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_PG_UpdatePGResponselOGDetails @PGResponseLogId, @ErrorMessage", pGResponseLogIdParameter, errorMessageParameter);


            return retVal;

        }
        public virtual int SP_DGC_RejectVendorInvoice(Nullable<Int64> vendorInvoiceId, string rejectedBy, string invoiceComments, ObjectParameter errorCode)
        {

            var vendorInvoiceIdParameter = vendorInvoiceId.HasValue ?
                new SqlParameter("VendorInvoiceId", vendorInvoiceId) :
                new SqlParameter("VendorInvoiceId", SqlDbType.BigInt);

           var rejectedByParameter = new SqlParameter("RejectedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(rejectedBy))
           {
               rejectedByParameter.IsNullable = true;
               rejectedByParameter.Value = DBNull.Value;
           }
           else
           {
               rejectedByParameter.Value = rejectedBy;
           }

           var invoiceCommentsParameter = new SqlParameter("InvoiceComments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(invoiceComments))
           {
               invoiceCommentsParameter.IsNullable = true;
               invoiceCommentsParameter.Value = DBNull.Value;
           }
           else
           {
               invoiceCommentsParameter.Value = invoiceComments;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_RejectVendorInvoice @VendorInvoiceId, @RejectedBy, @InvoiceComments, @ErrorCode OUT", vendorInvoiceIdParameter, rejectedByParameter, invoiceCommentsParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_RPT_GetAllBalanceReportsByDateWise_Result> SP_DGC_RPT_GetAllBalanceReportsByDateWise(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<DateTime> fromDate, Nullable<DateTime> toDate, Nullable<Int32> unitId)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var fromDateParameter = fromDate.HasValue ?
                new SqlParameter("FromDate", fromDate) :
                new SqlParameter("FromDate", SqlDbType.DateTime);

            var toDateParameter = toDate.HasValue ?
                new SqlParameter("ToDate", toDate) :
                new SqlParameter("ToDate", SqlDbType.DateTime);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_RPT_GetAllBalanceReportsByDateWise_Result>("SP_DGC_RPT_GetAllBalanceReportsByDateWise @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @FromDate, @ToDate, @UnitId", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, fromDateParameter, toDateParameter, unitIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_RPT_GetAllDueAmountReports_Result> SP_DGC_RPT_GetAllDueAmountReports(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, string monthYear, Nullable<Int32> unitId, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var monthYearParameter = new SqlParameter("MonthYear", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(monthYear))
           {
               monthYearParameter.IsNullable = true;
               monthYearParameter.Value = DBNull.Value;
           }
           else
           {
               monthYearParameter.Value = monthYear;
           }

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_RPT_GetAllDueAmountReports_Result>("SP_DGC_RPT_GetAllDueAmountReports @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @MonthYear, @UnitId, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, monthYearParameter, unitIdParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_RPT_GetAllExpenseReportsByDateWise_Result> SP_DGC_RPT_GetAllExpenseReportsByDateWise(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<DateTime> fromDate, Nullable<DateTime> toDate, Nullable<Int32> unitId)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var fromDateParameter = fromDate.HasValue ?
                new SqlParameter("FromDate", fromDate) :
                new SqlParameter("FromDate", SqlDbType.DateTime);

            var toDateParameter = toDate.HasValue ?
                new SqlParameter("ToDate", toDate) :
                new SqlParameter("ToDate", SqlDbType.DateTime);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_RPT_GetAllExpenseReportsByDateWise_Result>("SP_DGC_RPT_GetAllExpenseReportsByDateWise @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @FromDate, @ToDate, @UnitId", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, fromDateParameter, toDateParameter, unitIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_RPT_GetAllIncomeReportsByDateWise_Result> SP_DGC_RPT_GetAllIncomeReportsByDateWise(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<DateTime> fromDate, Nullable<DateTime> toDate, Nullable<Int32> unitId)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var fromDateParameter = fromDate.HasValue ?
                new SqlParameter("FromDate", fromDate) :
                new SqlParameter("FromDate", SqlDbType.DateTime);

            var toDateParameter = toDate.HasValue ?
                new SqlParameter("ToDate", toDate) :
                new SqlParameter("ToDate", SqlDbType.DateTime);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_RPT_GetAllIncomeReportsByDateWise_Result>("SP_DGC_RPT_GetAllIncomeReportsByDateWise @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @FromDate, @ToDate, @UnitId", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, fromDateParameter, toDateParameter, unitIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_RPT_GetAllVisitorEntryReportsByDateWise_Result> SP_DGC_RPT_GetAllVisitorEntryReportsByDateWise(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<DateTime> fromDate, Nullable<DateTime> toDate, Nullable<Int32> unitId)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var fromDateParameter = fromDate.HasValue ?
                new SqlParameter("FromDate", fromDate) :
                new SqlParameter("FromDate", SqlDbType.DateTime);

            var toDateParameter = toDate.HasValue ?
                new SqlParameter("ToDate", toDate) :
                new SqlParameter("ToDate", SqlDbType.DateTime);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_RPT_GetAllVisitorEntryReportsByDateWise_Result>("SP_DGC_RPT_GetAllVisitorEntryReportsByDateWise @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @FromDate, @ToDate, @UnitId", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, fromDateParameter, toDateParameter, unitIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_RPT_GetAllVisitorRequestReportsByDateWise_Result> SP_DGC_RPT_GetAllVisitorRequestReportsByDateWise(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords, Nullable<DateTime> fromDate, Nullable<DateTime> toDate, Nullable<Int32> unitId)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;

            var fromDateParameter = fromDate.HasValue ?
                new SqlParameter("FromDate", fromDate) :
                new SqlParameter("FromDate", SqlDbType.DateTime);

            var toDateParameter = toDate.HasValue ?
                new SqlParameter("ToDate", toDate) :
                new SqlParameter("ToDate", SqlDbType.DateTime);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_RPT_GetAllVisitorRequestReportsByDateWise_Result>("SP_DGC_RPT_GetAllVisitorRequestReportsByDateWise @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT, @FromDate, @ToDate, @UnitId", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter, fromDateParameter, toDateParameter, unitIdParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_RPT_GetMonthWiseIncomeExpenseDetailsBySources_Result> SP_DGC_RPT_GetMonthWiseIncomeExpenseDetailsBySources(Nullable<Int32> incomeExpensiveYear, string typeOfIncome, string monthOfIncomeExpensive)
        {

            var incomeExpensiveYearParameter = incomeExpensiveYear.HasValue ?
                new SqlParameter("IncomeExpensiveYear", incomeExpensiveYear) :
                new SqlParameter("IncomeExpensiveYear", SqlDbType.Int);

           var typeOfIncomeParameter = new SqlParameter("TypeOfIncome", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(typeOfIncome))
           {
               typeOfIncomeParameter.IsNullable = true;
               typeOfIncomeParameter.Value = DBNull.Value;
           }
           else
           {
               typeOfIncomeParameter.Value = typeOfIncome;
           }

           var monthOfIncomeExpensiveParameter = new SqlParameter("MonthOfIncomeExpensive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(monthOfIncomeExpensive))
           {
               monthOfIncomeExpensiveParameter.IsNullable = true;
               monthOfIncomeExpensiveParameter.Value = DBNull.Value;
           }
           else
           {
               monthOfIncomeExpensiveParameter.Value = monthOfIncomeExpensive;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_RPT_GetMonthWiseIncomeExpenseDetailsBySources_Result>("SP_DGC_RPT_GetMonthWiseIncomeExpenseDetailsBySources @IncomeExpensiveYear, @TypeOfIncome, @MonthOfIncomeExpensive", incomeExpensiveYearParameter, typeOfIncomeParameter, monthOfIncomeExpensiveParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_RPT_GetNoOfComplaintByDepartmentStatus_Result> SP_DGC_RPT_GetNoOfComplaintByDepartmentStatus(Nullable<Int32> noOfBackMonths)
        {

            var noOfBackMonthsParameter = noOfBackMonths.HasValue ?
                new SqlParameter("NoOfBackMonths", noOfBackMonths) :
                new SqlParameter("NoOfBackMonths", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_RPT_GetNoOfComplaintByDepartmentStatus_Result>("SP_DGC_RPT_GetNoOfComplaintByDepartmentStatus @NoOfBackMonths", noOfBackMonthsParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_RPT_GetYearWiseExpensive_Result> SP_DGC_RPT_GetYearWiseExpensive(Nullable<Int32> expensiveYear)
        {

            var expensiveYearParameter = expensiveYear.HasValue ?
                new SqlParameter("ExpensiveYear", expensiveYear) :
                new SqlParameter("ExpensiveYear", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_RPT_GetYearWiseExpensive_Result>("SP_DGC_RPT_GetYearWiseExpensive @ExpensiveYear", expensiveYearParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_RptCommon_CondominiumAddress_Result> SP_DGC_RptCommon_CondominiumAddress()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_RptCommon_CondominiumAddress_Result>("SP_DGC_RptCommon_CondominiumAddress");


            return retVal;

        }
        public virtual int SP_DGC_SaveAccessCardsRequestDetails(Nullable<Int64> accessGoodsRequestId, Nullable<Int32> unitId, Nullable<Int32> accessGoodsId, string requestForMemberName, Nullable<Int32> numberOfRequiredAccessGoods, Nullable<Decimal> totalCostOfRequest, string requestComments, Nullable<Int32> requestStatusId, Nullable<Int64> raisedByUserId, string raisedBy, ObjectParameter errorCode, ObjectParameter livingMemberCentralUserId, ObjectParameter aCRequestid)
        {

            var accessGoodsRequestIdParameter = accessGoodsRequestId.HasValue ?
                new SqlParameter("AccessGoodsRequestId", accessGoodsRequestId) :
                new SqlParameter("AccessGoodsRequestId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var accessGoodsIdParameter = accessGoodsId.HasValue ?
                new SqlParameter("AccessGoodsId", accessGoodsId) :
                new SqlParameter("AccessGoodsId", SqlDbType.Int);

           var requestForMemberNameParameter = new SqlParameter("RequestForMemberName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(requestForMemberName))
           {
               requestForMemberNameParameter.IsNullable = true;
               requestForMemberNameParameter.Value = DBNull.Value;
           }
           else
           {
               requestForMemberNameParameter.Value = requestForMemberName;
           }

            var numberOfRequiredAccessGoodsParameter = numberOfRequiredAccessGoods.HasValue ?
                new SqlParameter("NumberOfRequiredAccessGoods", numberOfRequiredAccessGoods) :
                new SqlParameter("NumberOfRequiredAccessGoods", SqlDbType.Int);

            var totalCostOfRequestParameter = totalCostOfRequest.HasValue ?
                new SqlParameter("TotalCostOfRequest", totalCostOfRequest) :
                new SqlParameter("TotalCostOfRequest", SqlDbType.Decimal);

           var requestCommentsParameter = new SqlParameter("RequestComments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(requestComments))
           {
               requestCommentsParameter.IsNullable = true;
               requestCommentsParameter.Value = DBNull.Value;
           }
           else
           {
               requestCommentsParameter.Value = requestComments;
           }

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var raisedByUserIdParameter = raisedByUserId.HasValue ?
                new SqlParameter("RaisedByUserId", raisedByUserId) :
                new SqlParameter("RaisedByUserId", SqlDbType.BigInt);

           var raisedByParameter = new SqlParameter("RaisedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(raisedBy))
           {
               raisedByParameter.IsNullable = true;
               raisedByParameter.Value = DBNull.Value;
           }
           else
           {
               raisedByParameter.Value = raisedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var livingMemberCentralUserIdParameter = new SqlParameter("LivingMemberCentralUserId", SqlDbType.BigInt);
               livingMemberCentralUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               livingMemberCentralUserIdParameter.Value = livingMemberCentralUserId != null ? livingMemberCentralUserId.Value : null;

           var aCRequestidParameter = new SqlParameter("ACRequestid", SqlDbType.BigInt);
               aCRequestidParameter.Direction = System.Data.ParameterDirection.Output;
               aCRequestidParameter.Value = aCRequestid != null ? aCRequestid.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveAccessCardsRequestDetails @AccessGoodsRequestId, @UnitId, @AccessGoodsId, @RequestForMemberName, @NumberOfRequiredAccessGoods, @TotalCostOfRequest, @RequestComments, @RequestStatusId, @RaisedByUserId, @RaisedBy, @ErrorCode OUT, @LivingMemberCentralUserId OUT, @ACRequestid OUT", accessGoodsRequestIdParameter, unitIdParameter, accessGoodsIdParameter, requestForMemberNameParameter, numberOfRequiredAccessGoodsParameter, totalCostOfRequestParameter, requestCommentsParameter, requestStatusIdParameter, raisedByUserIdParameter, raisedByParameter, errorCodeParameter, livingMemberCentralUserIdParameter, aCRequestidParameter);

            errorCode.Value = errorCodeParameter.Value;
            livingMemberCentralUserId.Value = livingMemberCentralUserIdParameter.Value;
            aCRequestid.Value = aCRequestidParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveAccessGoodsRequestActionDetails(Nullable<Int64> accessGoodsRequestId, Nullable<Int32> requestStatusId, string paymentInfo, string comments, string additionalReferenceFilePath, Nullable<Int64> actionTakenByUserId, string updatedBY, Nullable<Int32> previousStatusID, ObjectParameter errorCode, ObjectParameter accessGoodsRequestActionId, Nullable<DateTime> todaysClientDate)
        {

            var accessGoodsRequestIdParameter = accessGoodsRequestId.HasValue ?
                new SqlParameter("AccessGoodsRequestId", accessGoodsRequestId) :
                new SqlParameter("AccessGoodsRequestId", SqlDbType.BigInt);

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var additionalReferenceFilePathParameter = new SqlParameter("AdditionalReferenceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferenceFilePath))
           {
               additionalReferenceFilePathParameter.IsNullable = true;
               additionalReferenceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferenceFilePathParameter.Value = additionalReferenceFilePath;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var accessGoodsRequestActionIdParameter = new SqlParameter("AccessGoodsRequestActionId", SqlDbType.BigInt);
               accessGoodsRequestActionIdParameter.Direction = System.Data.ParameterDirection.Output;
               accessGoodsRequestActionIdParameter.Value = accessGoodsRequestActionId != null ? accessGoodsRequestActionId.Value : null;

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveAccessGoodsRequestActionDetails @AccessGoodsRequestId, @RequestStatusId, @PaymentInfo, @Comments, @AdditionalReferenceFilePath, @ActionTakenByUserId, @UpdatedBY, @PreviousStatusID, @ErrorCode OUT, @AccessGoodsRequestActionId OUT, @TodaysClientDate", accessGoodsRequestIdParameter, requestStatusIdParameter, paymentInfoParameter, commentsParameter, additionalReferenceFilePathParameter, actionTakenByUserIdParameter, updatedBYParameter, previousStatusIDParameter, errorCodeParameter, accessGoodsRequestActionIdParameter, todaysClientDateParameter);

            errorCode.Value = errorCodeParameter.Value;
            accessGoodsRequestActionId.Value = accessGoodsRequestActionIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveAccessGoodsRequestDetails(Nullable<Int64> accessGoodsRequestId, Nullable<Int32> unitId, Nullable<Int32> accessGoodsId, string requestForMemberName, Nullable<Int32> numberOfRequiredAccessGoods, Nullable<Decimal> totalCostOfRequest, string requestComments, Nullable<Int32> requestStatusId, Nullable<Int64> raisedByUserId, string raisedBy, ObjectParameter errorCode, ObjectParameter livingMemberCentralUserId, ObjectParameter aCRequestid, string isUserAcceptedTermsAndConditions, Nullable<DateTime> createdOn)
        {

            var accessGoodsRequestIdParameter = accessGoodsRequestId.HasValue ?
                new SqlParameter("AccessGoodsRequestId", accessGoodsRequestId) :
                new SqlParameter("AccessGoodsRequestId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var accessGoodsIdParameter = accessGoodsId.HasValue ?
                new SqlParameter("AccessGoodsId", accessGoodsId) :
                new SqlParameter("AccessGoodsId", SqlDbType.Int);

           var requestForMemberNameParameter = new SqlParameter("RequestForMemberName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(requestForMemberName))
           {
               requestForMemberNameParameter.IsNullable = true;
               requestForMemberNameParameter.Value = DBNull.Value;
           }
           else
           {
               requestForMemberNameParameter.Value = requestForMemberName;
           }

            var numberOfRequiredAccessGoodsParameter = numberOfRequiredAccessGoods.HasValue ?
                new SqlParameter("NumberOfRequiredAccessGoods", numberOfRequiredAccessGoods) :
                new SqlParameter("NumberOfRequiredAccessGoods", SqlDbType.Int);

            var totalCostOfRequestParameter = totalCostOfRequest.HasValue ?
                new SqlParameter("TotalCostOfRequest", totalCostOfRequest) :
                new SqlParameter("TotalCostOfRequest", SqlDbType.Decimal);

           var requestCommentsParameter = new SqlParameter("RequestComments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(requestComments))
           {
               requestCommentsParameter.IsNullable = true;
               requestCommentsParameter.Value = DBNull.Value;
           }
           else
           {
               requestCommentsParameter.Value = requestComments;
           }

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var raisedByUserIdParameter = raisedByUserId.HasValue ?
                new SqlParameter("RaisedByUserId", raisedByUserId) :
                new SqlParameter("RaisedByUserId", SqlDbType.BigInt);

           var raisedByParameter = new SqlParameter("RaisedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(raisedBy))
           {
               raisedByParameter.IsNullable = true;
               raisedByParameter.Value = DBNull.Value;
           }
           else
           {
               raisedByParameter.Value = raisedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var livingMemberCentralUserIdParameter = new SqlParameter("LivingMemberCentralUserId", SqlDbType.BigInt);
               livingMemberCentralUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               livingMemberCentralUserIdParameter.Value = livingMemberCentralUserId != null ? livingMemberCentralUserId.Value : null;

           var aCRequestidParameter = new SqlParameter("ACRequestid", SqlDbType.BigInt);
               aCRequestidParameter.Direction = System.Data.ParameterDirection.Output;
               aCRequestidParameter.Value = aCRequestid != null ? aCRequestid.Value : null;

           var isUserAcceptedTermsAndConditionsParameter = new SqlParameter("IsUserAcceptedTermsAndConditions", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isUserAcceptedTermsAndConditions))
           {
               isUserAcceptedTermsAndConditionsParameter.IsNullable = true;
               isUserAcceptedTermsAndConditionsParameter.Value = DBNull.Value;
           }
           else
           {
               isUserAcceptedTermsAndConditionsParameter.Value = isUserAcceptedTermsAndConditions;
           }

            var createdOnParameter = createdOn.HasValue ?
                new SqlParameter("CreatedOn", createdOn) :
                new SqlParameter("CreatedOn", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveAccessGoodsRequestDetails @AccessGoodsRequestId, @UnitId, @AccessGoodsId, @RequestForMemberName, @NumberOfRequiredAccessGoods, @TotalCostOfRequest, @RequestComments, @RequestStatusId, @RaisedByUserId, @RaisedBy, @ErrorCode OUT, @LivingMemberCentralUserId OUT, @ACRequestid OUT, @IsUserAcceptedTermsAndConditions, @CreatedOn", accessGoodsRequestIdParameter, unitIdParameter, accessGoodsIdParameter, requestForMemberNameParameter, numberOfRequiredAccessGoodsParameter, totalCostOfRequestParameter, requestCommentsParameter, requestStatusIdParameter, raisedByUserIdParameter, raisedByParameter, errorCodeParameter, livingMemberCentralUserIdParameter, aCRequestidParameter, isUserAcceptedTermsAndConditionsParameter, createdOnParameter);

            errorCode.Value = errorCodeParameter.Value;
            livingMemberCentralUserId.Value = livingMemberCentralUserIdParameter.Value;
            aCRequestid.Value = aCRequestidParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveAdditionalServiceProviderDetails(Nullable<Int32> serviceProviderId, string providerName, string providerPhoneNumber, string providerEmail, string providerDescription, string serviceName, string isActive, string updatedBy, ObjectParameter errorCode)
        {

            var serviceProviderIdParameter = serviceProviderId.HasValue ?
                new SqlParameter("ServiceProviderId", serviceProviderId) :
                new SqlParameter("ServiceProviderId", SqlDbType.Int);

           var providerNameParameter = new SqlParameter("ProviderName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(providerName))
           {
               providerNameParameter.IsNullable = true;
               providerNameParameter.Value = DBNull.Value;
           }
           else
           {
               providerNameParameter.Value = providerName;
           }

           var providerPhoneNumberParameter = new SqlParameter("ProviderPhoneNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(providerPhoneNumber))
           {
               providerPhoneNumberParameter.IsNullable = true;
               providerPhoneNumberParameter.Value = DBNull.Value;
           }
           else
           {
               providerPhoneNumberParameter.Value = providerPhoneNumber;
           }

           var providerEmailParameter = new SqlParameter("ProviderEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(providerEmail))
           {
               providerEmailParameter.IsNullable = true;
               providerEmailParameter.Value = DBNull.Value;
           }
           else
           {
               providerEmailParameter.Value = providerEmail;
           }

           var providerDescriptionParameter = new SqlParameter("ProviderDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(providerDescription))
           {
               providerDescriptionParameter.IsNullable = true;
               providerDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               providerDescriptionParameter.Value = providerDescription;
           }

           var serviceNameParameter = new SqlParameter("ServiceName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(serviceName))
           {
               serviceNameParameter.IsNullable = true;
               serviceNameParameter.Value = DBNull.Value;
           }
           else
           {
               serviceNameParameter.Value = serviceName;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveAdditionalServiceProviderDetails @ServiceProviderId, @ProviderName, @ProviderPhoneNumber, @ProviderEmail, @ProviderDescription, @ServiceName, @IsActive, @UpdatedBy, @ErrorCode OUT", serviceProviderIdParameter, providerNameParameter, providerPhoneNumberParameter, providerEmailParameter, providerDescriptionParameter, serviceNameParameter, isActiveParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveAllUnitRequest_Payments_LedgerDetails(string requestType, Nullable<Int64> requestId, Nullable<Int32> requestStatusId, Nullable<Int64> requestActionId, string receivedByUser, ObjectParameter errorCode)
        {

           var requestTypeParameter = new SqlParameter("RequestType", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(requestType))
           {
               requestTypeParameter.IsNullable = true;
               requestTypeParameter.Value = DBNull.Value;
           }
           else
           {
               requestTypeParameter.Value = requestType;
           }

            var requestIdParameter = requestId.HasValue ?
                new SqlParameter("RequestId", requestId) :
                new SqlParameter("RequestId", SqlDbType.BigInt);

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var requestActionIdParameter = requestActionId.HasValue ?
                new SqlParameter("RequestActionId", requestActionId) :
                new SqlParameter("RequestActionId", SqlDbType.BigInt);

           var receivedByUserParameter = new SqlParameter("ReceivedByUser", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(receivedByUser))
           {
               receivedByUserParameter.IsNullable = true;
               receivedByUserParameter.Value = DBNull.Value;
           }
           else
           {
               receivedByUserParameter.Value = receivedByUser;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveAllUnitRequest_Payments_LedgerDetails @RequestType, @RequestId, @RequestStatusId, @RequestActionId, @ReceivedByUser, @ErrorCode OUT", requestTypeParameter, requestIdParameter, requestStatusIdParameter, requestActionIdParameter, receivedByUserParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveAnnouncement(Nullable<Int32> announcementId, string announcementSubject, string announcementDescription, Nullable<DateTime> validFrom, Nullable<DateTime> validTo, string referenceFileName, string updatedBy, string isActive, ObjectParameter errorCode)
        {

            var announcementIdParameter = announcementId.HasValue ?
                new SqlParameter("AnnouncementId", announcementId) :
                new SqlParameter("AnnouncementId", SqlDbType.Int);

           var announcementSubjectParameter = new SqlParameter("AnnouncementSubject", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(announcementSubject))
           {
               announcementSubjectParameter.IsNullable = true;
               announcementSubjectParameter.Value = DBNull.Value;
           }
           else
           {
               announcementSubjectParameter.Value = announcementSubject;
           }

           var announcementDescriptionParameter = new SqlParameter("AnnouncementDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(announcementDescription))
           {
               announcementDescriptionParameter.IsNullable = true;
               announcementDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               announcementDescriptionParameter.Value = announcementDescription;
           }

            var validFromParameter = validFrom.HasValue ?
                new SqlParameter("ValidFrom", validFrom) :
                new SqlParameter("ValidFrom", SqlDbType.DateTime);

            var validToParameter = validTo.HasValue ?
                new SqlParameter("ValidTo", validTo) :
                new SqlParameter("ValidTo", SqlDbType.DateTime);

           var referenceFileNameParameter = new SqlParameter("ReferenceFileName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(referenceFileName))
           {
               referenceFileNameParameter.IsNullable = true;
               referenceFileNameParameter.Value = DBNull.Value;
           }
           else
           {
               referenceFileNameParameter.Value = referenceFileName;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveAnnouncement @AnnouncementId, @AnnouncementSubject, @AnnouncementDescription, @ValidFrom, @ValidTo, @ReferenceFileName, @UpdatedBy, @IsActive, @ErrorCode OUT", announcementIdParameter, announcementSubjectParameter, announcementDescriptionParameter, validFromParameter, validToParameter, referenceFileNameParameter, updatedByParameter, isActiveParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveAssetDetails(Nullable<Int32> assetId, string assetName, string assetDescription, string isActive, string assetCode, string createdBy, ObjectParameter errorCode)
        {

            var assetIdParameter = assetId.HasValue ?
                new SqlParameter("AssetId", assetId) :
                new SqlParameter("AssetId", SqlDbType.Int);

           var assetNameParameter = new SqlParameter("AssetName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(assetName))
           {
               assetNameParameter.IsNullable = true;
               assetNameParameter.Value = DBNull.Value;
           }
           else
           {
               assetNameParameter.Value = assetName;
           }

           var assetDescriptionParameter = new SqlParameter("AssetDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(assetDescription))
           {
               assetDescriptionParameter.IsNullable = true;
               assetDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               assetDescriptionParameter.Value = assetDescription;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var assetCodeParameter = new SqlParameter("AssetCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(assetCode))
           {
               assetCodeParameter.IsNullable = true;
               assetCodeParameter.Value = DBNull.Value;
           }
           else
           {
               assetCodeParameter.Value = assetCode;
           }

           var createdByParameter = new SqlParameter("createdBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveAssetDetails @AssetId, @AssetName, @AssetDescription, @IsActive, @AssetCode, @createdBy, @ErrorCode OUT", assetIdParameter, assetNameParameter, assetDescriptionParameter, isActiveParameter, assetCodeParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveAssetsPurchaseActionDetails(Nullable<Int64> assetPurchaseId, string comments, Nullable<Int32> requestStatusId, string paymentInfo, string additionalReferenceFilePath, string actionTakenBy, Nullable<Int64> actionTakenByUserId, Nullable<Int32> previousStatusId, ObjectParameter errorCode, ObjectParameter assetsPurchaseActionId)
        {

            var assetPurchaseIdParameter = assetPurchaseId.HasValue ?
                new SqlParameter("AssetPurchaseId", assetPurchaseId) :
                new SqlParameter("AssetPurchaseId", SqlDbType.BigInt);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var additionalReferenceFilePathParameter = new SqlParameter("AdditionalReferenceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferenceFilePath))
           {
               additionalReferenceFilePathParameter.IsNullable = true;
               additionalReferenceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferenceFilePathParameter.Value = additionalReferenceFilePath;
           }

           var actionTakenByParameter = new SqlParameter("ActionTakenBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(actionTakenBy))
           {
               actionTakenByParameter.IsNullable = true;
               actionTakenByParameter.Value = DBNull.Value;
           }
           else
           {
               actionTakenByParameter.Value = actionTakenBy;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

            var previousStatusIdParameter = previousStatusId.HasValue ?
                new SqlParameter("PreviousStatusId", previousStatusId) :
                new SqlParameter("PreviousStatusId", SqlDbType.Int);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var assetsPurchaseActionIdParameter = new SqlParameter("AssetsPurchaseActionId", SqlDbType.BigInt);
               assetsPurchaseActionIdParameter.Direction = System.Data.ParameterDirection.Output;
               assetsPurchaseActionIdParameter.Value = assetsPurchaseActionId != null ? assetsPurchaseActionId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveAssetsPurchaseActionDetails @AssetPurchaseId, @Comments, @RequestStatusId, @PaymentInfo, @AdditionalReferenceFilePath, @ActionTakenBy, @ActionTakenByUserId, @PreviousStatusId, @ErrorCode OUT, @AssetsPurchaseActionId OUT", assetPurchaseIdParameter, commentsParameter, requestStatusIdParameter, paymentInfoParameter, additionalReferenceFilePathParameter, actionTakenByParameter, actionTakenByUserIdParameter, previousStatusIdParameter, errorCodeParameter, assetsPurchaseActionIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            assetsPurchaseActionId.Value = assetsPurchaseActionIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveAssetsPurchaseDetails(Nullable<Int64> assetPurchaseId, Nullable<Int64> vendorRegId, string assetPurchaseOrderNumber, Nullable<DateTime> assetPurchaseDate, Nullable<Decimal> assetPurchaseAmount, Nullable<Int32> workOrderID, Nullable<Decimal> paidAmount, Nullable<DateTime> lastPaidOn, Nullable<Int32> statusid, string assetPurchasedBy, string purchaseNotes, Nullable<Int64> createdByUserId, string createdBy, string billFilePath, ObjectParameter errorCode)
        {

            var assetPurchaseIdParameter = assetPurchaseId.HasValue ?
                new SqlParameter("AssetPurchaseId", assetPurchaseId) :
                new SqlParameter("AssetPurchaseId", SqlDbType.BigInt);

            var vendorRegIdParameter = vendorRegId.HasValue ?
                new SqlParameter("VendorRegId", vendorRegId) :
                new SqlParameter("VendorRegId", SqlDbType.BigInt);

           var assetPurchaseOrderNumberParameter = new SqlParameter("AssetPurchaseOrderNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(assetPurchaseOrderNumber))
           {
               assetPurchaseOrderNumberParameter.IsNullable = true;
               assetPurchaseOrderNumberParameter.Value = DBNull.Value;
           }
           else
           {
               assetPurchaseOrderNumberParameter.Value = assetPurchaseOrderNumber;
           }

            var assetPurchaseDateParameter = assetPurchaseDate.HasValue ?
                new SqlParameter("AssetPurchaseDate", assetPurchaseDate) :
                new SqlParameter("AssetPurchaseDate", SqlDbType.DateTime);

            var assetPurchaseAmountParameter = assetPurchaseAmount.HasValue ?
                new SqlParameter("AssetPurchaseAmount", assetPurchaseAmount) :
                new SqlParameter("AssetPurchaseAmount", SqlDbType.Decimal);

            var workOrderIDParameter = workOrderID.HasValue ?
                new SqlParameter("WorkOrderID", workOrderID) :
                new SqlParameter("WorkOrderID", SqlDbType.Int);

            var paidAmountParameter = paidAmount.HasValue ?
                new SqlParameter("PaidAmount", paidAmount) :
                new SqlParameter("PaidAmount", SqlDbType.Decimal);

            var lastPaidOnParameter = lastPaidOn.HasValue ?
                new SqlParameter("LastPaidOn", lastPaidOn) :
                new SqlParameter("LastPaidOn", SqlDbType.DateTime);

            var statusidParameter = statusid.HasValue ?
                new SqlParameter("Statusid", statusid) :
                new SqlParameter("Statusid", SqlDbType.Int);

           var assetPurchasedByParameter = new SqlParameter("AssetPurchasedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(assetPurchasedBy))
           {
               assetPurchasedByParameter.IsNullable = true;
               assetPurchasedByParameter.Value = DBNull.Value;
           }
           else
           {
               assetPurchasedByParameter.Value = assetPurchasedBy;
           }

           var purchaseNotesParameter = new SqlParameter("PurchaseNotes", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(purchaseNotes))
           {
               purchaseNotesParameter.IsNullable = true;
               purchaseNotesParameter.Value = DBNull.Value;
           }
           else
           {
               purchaseNotesParameter.Value = purchaseNotes;
           }

            var createdByUserIdParameter = createdByUserId.HasValue ?
                new SqlParameter("CreatedByUserId", createdByUserId) :
                new SqlParameter("CreatedByUserId", SqlDbType.BigInt);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var billFilePathParameter = new SqlParameter("BillFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(billFilePath))
           {
               billFilePathParameter.IsNullable = true;
               billFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               billFilePathParameter.Value = billFilePath;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveAssetsPurchaseDetails @AssetPurchaseId, @VendorRegId, @AssetPurchaseOrderNumber, @AssetPurchaseDate, @AssetPurchaseAmount, @WorkOrderID, @PaidAmount, @LastPaidOn, @Statusid, @AssetPurchasedBy, @PurchaseNotes, @CreatedByUserId, @CreatedBy, @BillFilePath, @ErrorCode OUT", assetPurchaseIdParameter, vendorRegIdParameter, assetPurchaseOrderNumberParameter, assetPurchaseDateParameter, assetPurchaseAmountParameter, workOrderIDParameter, paidAmountParameter, lastPaidOnParameter, statusidParameter, assetPurchasedByParameter, purchaseNotesParameter, createdByUserIdParameter, createdByParameter, billFilePathParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveAssetsPurchaseLineItemDetails(Nullable<Int32> assetsPurchaseLineID, Nullable<Int64> assetPurchaseId, string lineNumber, string lineItemDescription, Nullable<Decimal> basePricePerUnit, Nullable<Decimal> taxAmountPerUnit, Nullable<Decimal> discountAmountPerUnit, Nullable<Int32> totalNumberOfAssets, Nullable<Decimal> lineTotalAmount, Nullable<Int32> assetId, string createdBy, ObjectParameter errorCode)
        {

            var assetsPurchaseLineIDParameter = assetsPurchaseLineID.HasValue ?
                new SqlParameter("AssetsPurchaseLineID", assetsPurchaseLineID) :
                new SqlParameter("AssetsPurchaseLineID", SqlDbType.Int);

            var assetPurchaseIdParameter = assetPurchaseId.HasValue ?
                new SqlParameter("AssetPurchaseId", assetPurchaseId) :
                new SqlParameter("AssetPurchaseId", SqlDbType.BigInt);

           var lineNumberParameter = new SqlParameter("LineNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(lineNumber))
           {
               lineNumberParameter.IsNullable = true;
               lineNumberParameter.Value = DBNull.Value;
           }
           else
           {
               lineNumberParameter.Value = lineNumber;
           }

           var lineItemDescriptionParameter = new SqlParameter("LineItemDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(lineItemDescription))
           {
               lineItemDescriptionParameter.IsNullable = true;
               lineItemDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               lineItemDescriptionParameter.Value = lineItemDescription;
           }

            var basePricePerUnitParameter = basePricePerUnit.HasValue ?
                new SqlParameter("BasePricePerUnit", basePricePerUnit) :
                new SqlParameter("BasePricePerUnit", SqlDbType.Decimal);

            var taxAmountPerUnitParameter = taxAmountPerUnit.HasValue ?
                new SqlParameter("TaxAmountPerUnit", taxAmountPerUnit) :
                new SqlParameter("TaxAmountPerUnit", SqlDbType.Decimal);

            var discountAmountPerUnitParameter = discountAmountPerUnit.HasValue ?
                new SqlParameter("DiscountAmountPerUnit", discountAmountPerUnit) :
                new SqlParameter("DiscountAmountPerUnit", SqlDbType.Decimal);

            var totalNumberOfAssetsParameter = totalNumberOfAssets.HasValue ?
                new SqlParameter("TotalNumberOfAssets", totalNumberOfAssets) :
                new SqlParameter("TotalNumberOfAssets", SqlDbType.Int);

            var lineTotalAmountParameter = lineTotalAmount.HasValue ?
                new SqlParameter("LineTotalAmount", lineTotalAmount) :
                new SqlParameter("LineTotalAmount", SqlDbType.Decimal);

            var assetIdParameter = assetId.HasValue ?
                new SqlParameter("AssetId", assetId) :
                new SqlParameter("AssetId", SqlDbType.Int);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveAssetsPurchaseLineItemDetails @AssetsPurchaseLineID, @AssetPurchaseId, @LineNumber, @LineItemDescription, @BasePricePerUnit, @TaxAmountPerUnit, @DiscountAmountPerUnit, @TotalNumberOfAssets, @LineTotalAmount, @AssetId, @CreatedBy, @ErrorCode OUT", assetsPurchaseLineIDParameter, assetPurchaseIdParameter, lineNumberParameter, lineItemDescriptionParameter, basePricePerUnitParameter, taxAmountPerUnitParameter, discountAmountPerUnitParameter, totalNumberOfAssetsParameter, lineTotalAmountParameter, assetIdParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveBillRateDetails(Nullable<Int32> billTypeId, Nullable<Int32> rateCalculationId, string slabRateXml, Nullable<DateTime> effectiveFrom, string updatedBy, ObjectParameter errorCode, string unitType, Nullable<DateTime> todayClientDate)
        {

            var billTypeIdParameter = billTypeId.HasValue ?
                new SqlParameter("BillTypeId", billTypeId) :
                new SqlParameter("BillTypeId", SqlDbType.Int);

            var rateCalculationIdParameter = rateCalculationId.HasValue ?
                new SqlParameter("RateCalculationId", rateCalculationId) :
                new SqlParameter("RateCalculationId", SqlDbType.Int);

            var slabRateXmlParameter = slabRateXml != null ?
                new SqlParameter("SlabRateXml", slabRateXml) :
                new SqlParameter("SlabRateXml", SqlDbType.Xml);

            var effectiveFromParameter = effectiveFrom.HasValue ?
                new SqlParameter("EffectiveFrom", effectiveFrom) :
                new SqlParameter("EffectiveFrom", SqlDbType.DateTime);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var unitTypeParameter = new SqlParameter("UnitType", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitType))
           {
               unitTypeParameter.IsNullable = true;
               unitTypeParameter.Value = DBNull.Value;
           }
           else
           {
               unitTypeParameter.Value = unitType;
           }

            var todayClientDateParameter = todayClientDate.HasValue ?
                new SqlParameter("TodayClientDate", todayClientDate) :
                new SqlParameter("TodayClientDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveBillRateDetails @BillTypeId, @RateCalculationId, @SlabRateXml, @EffectiveFrom, @UpdatedBy, @ErrorCode OUT, @UnitType, @TodayClientDate", billTypeIdParameter, rateCalculationIdParameter, slabRateXmlParameter, effectiveFromParameter, updatedByParameter, errorCodeParameter, unitTypeParameter, todayClientDateParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveBlockSettings(Nullable<Int32> blockId, string blockName, string isActive, string updatedBy, ObjectParameter errorCode)
        {

            var blockIdParameter = blockId.HasValue ?
                new SqlParameter("BlockId", blockId) :
                new SqlParameter("BlockId", SqlDbType.Int);

           var blockNameParameter = new SqlParameter("BlockName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(blockName))
           {
               blockNameParameter.IsNullable = true;
               blockNameParameter.Value = DBNull.Value;
           }
           else
           {
               blockNameParameter.Value = blockName;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveBlockSettings @BlockId, @BlockName, @IsActive, @UpdatedBy, @ErrorCode OUT", blockIdParameter, blockNameParameter, isActiveParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveChartsOfAccountItemsDetails(Nullable<Int32> accountItemId, Nullable<Int32> typeOfAccount, string itemName, Nullable<Int32> accountItemNo, string itemCode, string createdBy, ObjectParameter errorCode)
        {

            var accountItemIdParameter = accountItemId.HasValue ?
                new SqlParameter("AccountItemId", accountItemId) :
                new SqlParameter("AccountItemId", SqlDbType.Int);

            var typeOfAccountParameter = typeOfAccount.HasValue ?
                new SqlParameter("TypeOfAccount", typeOfAccount) :
                new SqlParameter("TypeOfAccount", SqlDbType.Int);

           var itemNameParameter = new SqlParameter("ItemName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(itemName))
           {
               itemNameParameter.IsNullable = true;
               itemNameParameter.Value = DBNull.Value;
           }
           else
           {
               itemNameParameter.Value = itemName;
           }

            var accountItemNoParameter = accountItemNo.HasValue ?
                new SqlParameter("AccountItemNo", accountItemNo) :
                new SqlParameter("AccountItemNo", SqlDbType.Int);

           var itemCodeParameter = new SqlParameter("ItemCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(itemCode))
           {
               itemCodeParameter.IsNullable = true;
               itemCodeParameter.Value = DBNull.Value;
           }
           else
           {
               itemCodeParameter.Value = itemCode;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveChartsOfAccountItemsDetails @AccountItemId, @TypeOfAccount, @ItemName, @AccountItemNo, @ItemCode, @CreatedBy, @ErrorCode OUT", accountItemIdParameter, typeOfAccountParameter, itemNameParameter, accountItemNoParameter, itemCodeParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveChartsOfAccountsDetails(Nullable<Int32> accountId, string accountName, string accountDescription, string accountCode, string accountDisplayName, Nullable<Int32> startingAccountNumber, Nullable<Int32> endingAccountNumber, string subscriptionId, string createdBy, ObjectParameter errorCode)
        {

            var accountIdParameter = accountId.HasValue ?
                new SqlParameter("AccountId", accountId) :
                new SqlParameter("AccountId", SqlDbType.Int);

           var accountNameParameter = new SqlParameter("AccountName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(accountName))
           {
               accountNameParameter.IsNullable = true;
               accountNameParameter.Value = DBNull.Value;
           }
           else
           {
               accountNameParameter.Value = accountName;
           }

           var accountDescriptionParameter = new SqlParameter("AccountDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(accountDescription))
           {
               accountDescriptionParameter.IsNullable = true;
               accountDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               accountDescriptionParameter.Value = accountDescription;
           }

           var accountCodeParameter = new SqlParameter("AccountCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(accountCode))
           {
               accountCodeParameter.IsNullable = true;
               accountCodeParameter.Value = DBNull.Value;
           }
           else
           {
               accountCodeParameter.Value = accountCode;
           }

           var accountDisplayNameParameter = new SqlParameter("AccountDisplayName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(accountDisplayName))
           {
               accountDisplayNameParameter.IsNullable = true;
               accountDisplayNameParameter.Value = DBNull.Value;
           }
           else
           {
               accountDisplayNameParameter.Value = accountDisplayName;
           }

            var startingAccountNumberParameter = startingAccountNumber.HasValue ?
                new SqlParameter("StartingAccountNumber", startingAccountNumber) :
                new SqlParameter("StartingAccountNumber", SqlDbType.Int);

            var endingAccountNumberParameter = endingAccountNumber.HasValue ?
                new SqlParameter("EndingAccountNumber", endingAccountNumber) :
                new SqlParameter("EndingAccountNumber", SqlDbType.Int);

           var subscriptionIdParameter = new SqlParameter("SubscriptionId", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(subscriptionId))
           {
               subscriptionIdParameter.IsNullable = true;
               subscriptionIdParameter.Value = DBNull.Value;
           }
           else
           {
               subscriptionIdParameter.Value = subscriptionId;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveChartsOfAccountsDetails @AccountId, @AccountName, @AccountDescription, @AccountCode, @AccountDisplayName, @StartingAccountNumber, @EndingAccountNumber, @SubscriptionId, @CreatedBy, @ErrorCode OUT", accountIdParameter, accountNameParameter, accountDescriptionParameter, accountCodeParameter, accountDisplayNameParameter, startingAccountNumberParameter, endingAccountNumberParameter, subscriptionIdParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveClampFeeDetails(string hallBookPriceInfo, string updatedBy, ObjectParameter errorCode)
        {

            var hallBookPriceInfoParameter = hallBookPriceInfo != null ?
                new SqlParameter("HallBookPriceInfo", hallBookPriceInfo) :
                new SqlParameter("HallBookPriceInfo", SqlDbType.Xml);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveClampFeeDetails @HallBookPriceInfo, @UpdatedBy, @ErrorCode OUT", hallBookPriceInfoParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveClampRequestActionDetails(Nullable<Int64> clampRequestId, Nullable<Int32> requestStatusId, string paymentInfo, string comments, Nullable<Int64> actionTakenByUserId, string updatedBY, ObjectParameter errorCode, ObjectParameter clampRequestActionId, Nullable<DateTime> todaysClientDate)
        {

            var clampRequestIdParameter = clampRequestId.HasValue ?
                new SqlParameter("ClampRequestId", clampRequestId) :
                new SqlParameter("ClampRequestId", SqlDbType.BigInt);

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var clampRequestActionIdParameter = new SqlParameter("ClampRequestActionId", SqlDbType.BigInt);
               clampRequestActionIdParameter.Direction = System.Data.ParameterDirection.Output;
               clampRequestActionIdParameter.Value = clampRequestActionId != null ? clampRequestActionId.Value : null;

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveClampRequestActionDetails @ClampRequestId, @RequestStatusId, @PaymentInfo, @Comments, @ActionTakenByUserId, @UpdatedBY, @ErrorCode OUT, @ClampRequestActionId OUT, @TodaysClientDate", clampRequestIdParameter, requestStatusIdParameter, paymentInfoParameter, commentsParameter, actionTakenByUserIdParameter, updatedBYParameter, errorCodeParameter, clampRequestActionIdParameter, todaysClientDateParameter);

            errorCode.Value = errorCodeParameter.Value;
            clampRequestActionId.Value = clampRequestActionIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveClampRequestDetails(Nullable<Int64> clampRequestId, string vehicleNumber, string clampRemarks, string referenceFilePath, Nullable<Decimal> amount, Nullable<Int64> amountId, Nullable<Int32> statusId, Nullable<Int64> clampedByUserId, string updatedBy, ObjectParameter errorCode, ObjectParameter livingMemberUserId, Nullable<DateTime> todaysClientDate)
        {

            var clampRequestIdParameter = clampRequestId.HasValue ?
                new SqlParameter("ClampRequestId", clampRequestId) :
                new SqlParameter("ClampRequestId", SqlDbType.BigInt);

           var vehicleNumberParameter = new SqlParameter("VehicleNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(vehicleNumber))
           {
               vehicleNumberParameter.IsNullable = true;
               vehicleNumberParameter.Value = DBNull.Value;
           }
           else
           {
               vehicleNumberParameter.Value = vehicleNumber;
           }

           var clampRemarksParameter = new SqlParameter("ClampRemarks", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(clampRemarks))
           {
               clampRemarksParameter.IsNullable = true;
               clampRemarksParameter.Value = DBNull.Value;
           }
           else
           {
               clampRemarksParameter.Value = clampRemarks;
           }

           var referenceFilePathParameter = new SqlParameter("ReferenceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(referenceFilePath))
           {
               referenceFilePathParameter.IsNullable = true;
               referenceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               referenceFilePathParameter.Value = referenceFilePath;
           }

            var amountParameter = amount.HasValue ?
                new SqlParameter("Amount", amount) :
                new SqlParameter("Amount", SqlDbType.Decimal);

            var amountIdParameter = amountId.HasValue ?
                new SqlParameter("AmountId", amountId) :
                new SqlParameter("AmountId", SqlDbType.BigInt);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

            var clampedByUserIdParameter = clampedByUserId.HasValue ?
                new SqlParameter("ClampedByUserId", clampedByUserId) :
                new SqlParameter("ClampedByUserId", SqlDbType.BigInt);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var livingMemberUserIdParameter = new SqlParameter("LivingMemberUserId", SqlDbType.BigInt);
               livingMemberUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               livingMemberUserIdParameter.Value = livingMemberUserId != null ? livingMemberUserId.Value : null;

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveClampRequestDetails @ClampRequestId, @VehicleNumber, @ClampRemarks, @ReferenceFilePath, @Amount, @AmountId, @StatusId, @ClampedByUserId, @UpdatedBy, @ErrorCode OUT, @LivingMemberUserId OUT, @TodaysClientDate", clampRequestIdParameter, vehicleNumberParameter, clampRemarksParameter, referenceFilePathParameter, amountParameter, amountIdParameter, statusIdParameter, clampedByUserIdParameter, updatedByParameter, errorCodeParameter, livingMemberUserIdParameter, todaysClientDateParameter);

            errorCode.Value = errorCodeParameter.Value;
            livingMemberUserId.Value = livingMemberUserIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveComiteeMemberDetails(Nullable<Int32> comiteeMemberId, Nullable<Int64> commiteeMemberUserId, Nullable<Int32> unitId, string designation, Nullable<Int32> electionConductedYear, Nullable<DateTime> periodFrom, Nullable<DateTime> periodTo, string createdBy, ObjectParameter errorCode)
        {

            var comiteeMemberIdParameter = comiteeMemberId.HasValue ?
                new SqlParameter("ComiteeMemberId", comiteeMemberId) :
                new SqlParameter("ComiteeMemberId", SqlDbType.Int);

            var commiteeMemberUserIdParameter = commiteeMemberUserId.HasValue ?
                new SqlParameter("CommiteeMemberUserId", commiteeMemberUserId) :
                new SqlParameter("CommiteeMemberUserId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

           var designationParameter = new SqlParameter("Designation", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(designation))
           {
               designationParameter.IsNullable = true;
               designationParameter.Value = DBNull.Value;
           }
           else
           {
               designationParameter.Value = designation;
           }

            var electionConductedYearParameter = electionConductedYear.HasValue ?
                new SqlParameter("ElectionConductedYear", electionConductedYear) :
                new SqlParameter("ElectionConductedYear", SqlDbType.Int);

            var periodFromParameter = periodFrom.HasValue ?
                new SqlParameter("PeriodFrom", periodFrom) :
                new SqlParameter("PeriodFrom", SqlDbType.DateTime);

            var periodToParameter = periodTo.HasValue ?
                new SqlParameter("PeriodTo", periodTo) :
                new SqlParameter("PeriodTo", SqlDbType.DateTime);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveComiteeMemberDetails @ComiteeMemberId, @CommiteeMemberUserId, @UnitId, @Designation, @ElectionConductedYear, @PeriodFrom, @PeriodTo, @CreatedBy, @ErrorCode OUT", comiteeMemberIdParameter, commiteeMemberUserIdParameter, unitIdParameter, designationParameter, electionConductedYearParameter, periodFromParameter, periodToParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCommercialUnitInvoicePaymentReversalDetails(Nullable<Int32> paymentReversalId, Nullable<Int64> paymentRequestId, Nullable<Int64> unitId, string comments, Nullable<DateTime> reversalDate, string reversalBy, Nullable<Int64> reversalByUserId, ObjectParameter errorCode, Nullable<Int32> shopRegistartionID)
        {

            var paymentReversalIdParameter = paymentReversalId.HasValue ?
                new SqlParameter("PaymentReversalId", paymentReversalId) :
                new SqlParameter("PaymentReversalId", SqlDbType.Int);

            var paymentRequestIdParameter = paymentRequestId.HasValue ?
                new SqlParameter("PaymentRequestId", paymentRequestId) :
                new SqlParameter("PaymentRequestId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.BigInt);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

            var reversalDateParameter = reversalDate.HasValue ?
                new SqlParameter("ReversalDate", reversalDate) :
                new SqlParameter("ReversalDate", SqlDbType.DateTime);

           var reversalByParameter = new SqlParameter("ReversalBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(reversalBy))
           {
               reversalByParameter.IsNullable = true;
               reversalByParameter.Value = DBNull.Value;
           }
           else
           {
               reversalByParameter.Value = reversalBy;
           }

            var reversalByUserIdParameter = reversalByUserId.HasValue ?
                new SqlParameter("ReversalByUserId", reversalByUserId) :
                new SqlParameter("ReversalByUserId", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var shopRegistartionIDParameter = shopRegistartionID.HasValue ?
                new SqlParameter("ShopRegistartionID", shopRegistartionID) :
                new SqlParameter("ShopRegistartionID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCommercialUnitInvoicePaymentReversalDetails @PaymentReversalId, @PaymentRequestId, @UnitId, @Comments, @ReversalDate, @ReversalBy, @ReversalByUserId, @ErrorCode OUT, @ShopRegistartionID", paymentReversalIdParameter, paymentRequestIdParameter, unitIdParameter, commentsParameter, reversalDateParameter, reversalByParameter, reversalByUserIdParameter, errorCodeParameter, shopRegistartionIDParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCommercialUnitLineFeeDetails(Nullable<Int32> commercialUnitId, Nullable<Int32> shopRegId, string commercialUnitPriceInfo, string updatedBy, ObjectParameter errorCode)
        {

            var commercialUnitIdParameter = commercialUnitId.HasValue ?
                new SqlParameter("CommercialUnitId", commercialUnitId) :
                new SqlParameter("CommercialUnitId", SqlDbType.Int);

            var shopRegIdParameter = shopRegId.HasValue ?
                new SqlParameter("ShopRegId", shopRegId) :
                new SqlParameter("ShopRegId", SqlDbType.Int);

            var commercialUnitPriceInfoParameter = commercialUnitPriceInfo != null ?
                new SqlParameter("CommercialUnitPriceInfo", commercialUnitPriceInfo) :
                new SqlParameter("CommercialUnitPriceInfo", SqlDbType.Xml);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCommercialUnitLineFeeDetails @CommercialUnitId, @ShopRegId, @CommercialUnitPriceInfo, @UpdatedBy, @ErrorCode OUT", commercialUnitIdParameter, shopRegIdParameter, commercialUnitPriceInfoParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveComplaint(string subject, string description, Nullable<Int32> departmentId, Nullable<Int32> statusId, Nullable<Int64> raisedByUserId, string referenceDocPath, string raisedBy, Nullable<Int32> unitId, Nullable<Int64> livingMemberUserId, ObjectParameter errorCode, ObjectParameter currentComplaintId, ObjectParameter assignedCentralUserId, ObjectParameter raisedCentralUserId, Nullable<DateTime> todaysClientDate)
        {

           var subjectParameter = new SqlParameter("Subject", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(subject))
           {
               subjectParameter.IsNullable = true;
               subjectParameter.Value = DBNull.Value;
           }
           else
           {
               subjectParameter.Value = subject;
           }

           var descriptionParameter = new SqlParameter("Description", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(description))
           {
               descriptionParameter.IsNullable = true;
               descriptionParameter.Value = DBNull.Value;
           }
           else
           {
               descriptionParameter.Value = description;
           }

            var departmentIdParameter = departmentId.HasValue ?
                new SqlParameter("DepartmentId", departmentId) :
                new SqlParameter("DepartmentId", SqlDbType.Int);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

            var raisedByUserIdParameter = raisedByUserId.HasValue ?
                new SqlParameter("RaisedByUserId", raisedByUserId) :
                new SqlParameter("RaisedByUserId", SqlDbType.BigInt);

           var referenceDocPathParameter = new SqlParameter("ReferenceDocPath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(referenceDocPath))
           {
               referenceDocPathParameter.IsNullable = true;
               referenceDocPathParameter.Value = DBNull.Value;
           }
           else
           {
               referenceDocPathParameter.Value = referenceDocPath;
           }

           var raisedByParameter = new SqlParameter("RaisedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(raisedBy))
           {
               raisedByParameter.IsNullable = true;
               raisedByParameter.Value = DBNull.Value;
           }
           else
           {
               raisedByParameter.Value = raisedBy;
           }

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var livingMemberUserIdParameter = livingMemberUserId.HasValue ?
                new SqlParameter("LivingMemberUserId", livingMemberUserId) :
                new SqlParameter("LivingMemberUserId", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var currentComplaintIdParameter = new SqlParameter("CurrentComplaintId", SqlDbType.BigInt);
               currentComplaintIdParameter.Direction = System.Data.ParameterDirection.Output;
               currentComplaintIdParameter.Value = currentComplaintId != null ? currentComplaintId.Value : null;

           var assignedCentralUserIdParameter = new SqlParameter("AssignedCentralUserId", SqlDbType.BigInt);
               assignedCentralUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               assignedCentralUserIdParameter.Value = assignedCentralUserId != null ? assignedCentralUserId.Value : null;

           var raisedCentralUserIdParameter = new SqlParameter("RaisedCentralUserId", SqlDbType.BigInt);
               raisedCentralUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               raisedCentralUserIdParameter.Value = raisedCentralUserId != null ? raisedCentralUserId.Value : null;

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveComplaint @Subject, @Description, @DepartmentId, @StatusId, @RaisedByUserId, @ReferenceDocPath, @RaisedBy, @UnitId, @LivingMemberUserId, @ErrorCode OUT, @CurrentComplaintId OUT, @AssignedCentralUserId OUT, @RaisedCentralUserId OUT, @TodaysClientDate", subjectParameter, descriptionParameter, departmentIdParameter, statusIdParameter, raisedByUserIdParameter, referenceDocPathParameter, raisedByParameter, unitIdParameter, livingMemberUserIdParameter, errorCodeParameter, currentComplaintIdParameter, assignedCentralUserIdParameter, raisedCentralUserIdParameter, todaysClientDateParameter);

            errorCode.Value = errorCodeParameter.Value;
            currentComplaintId.Value = currentComplaintIdParameter.Value;
            assignedCentralUserId.Value = assignedCentralUserIdParameter.Value;
            raisedCentralUserId.Value = raisedCentralUserIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveComplaintCancelDetails(Nullable<Int64> complaintId, string cancelComments, Nullable<Int32> statusId, Nullable<Int64> cancelledByUserId, string cancelledBy, ObjectParameter errorCode, Nullable<Int32> previousStatusID, Nullable<DateTime> todaysClientDate)
        {

            var complaintIdParameter = complaintId.HasValue ?
                new SqlParameter("ComplaintId", complaintId) :
                new SqlParameter("ComplaintId", SqlDbType.BigInt);

           var cancelCommentsParameter = new SqlParameter("CancelComments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelComments))
           {
               cancelCommentsParameter.IsNullable = true;
               cancelCommentsParameter.Value = DBNull.Value;
           }
           else
           {
               cancelCommentsParameter.Value = cancelComments;
           }

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

            var cancelledByUserIdParameter = cancelledByUserId.HasValue ?
                new SqlParameter("CancelledByUserId", cancelledByUserId) :
                new SqlParameter("CancelledByUserId", SqlDbType.BigInt);

           var cancelledByParameter = new SqlParameter("CancelledBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cancelledBy))
           {
               cancelledByParameter.IsNullable = true;
               cancelledByParameter.Value = DBNull.Value;
           }
           else
           {
               cancelledByParameter.Value = cancelledBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveComplaintCancelDetails @ComplaintId, @CancelComments, @StatusId, @CancelledByUserId, @CancelledBy, @ErrorCode OUT, @PreviousStatusID, @TodaysClientDate", complaintIdParameter, cancelCommentsParameter, statusIdParameter, cancelledByUserIdParameter, cancelledByParameter, errorCodeParameter, previousStatusIDParameter, todaysClientDateParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveComplaintDetails(string subject, string description, Nullable<Int32> departmentId, Nullable<Int32> statusId, Nullable<Int64> raisedByUserId, string referenceDocPath, string raisedBy, ObjectParameter errorCode)
        {

           var subjectParameter = new SqlParameter("Subject", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(subject))
           {
               subjectParameter.IsNullable = true;
               subjectParameter.Value = DBNull.Value;
           }
           else
           {
               subjectParameter.Value = subject;
           }

           var descriptionParameter = new SqlParameter("Description", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(description))
           {
               descriptionParameter.IsNullable = true;
               descriptionParameter.Value = DBNull.Value;
           }
           else
           {
               descriptionParameter.Value = description;
           }

            var departmentIdParameter = departmentId.HasValue ?
                new SqlParameter("DepartmentId", departmentId) :
                new SqlParameter("DepartmentId", SqlDbType.Int);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

            var raisedByUserIdParameter = raisedByUserId.HasValue ?
                new SqlParameter("RaisedByUserId", raisedByUserId) :
                new SqlParameter("RaisedByUserId", SqlDbType.BigInt);

           var referenceDocPathParameter = new SqlParameter("ReferenceDocPath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(referenceDocPath))
           {
               referenceDocPathParameter.IsNullable = true;
               referenceDocPathParameter.Value = DBNull.Value;
           }
           else
           {
               referenceDocPathParameter.Value = referenceDocPath;
           }

           var raisedByParameter = new SqlParameter("RaisedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(raisedBy))
           {
               raisedByParameter.IsNullable = true;
               raisedByParameter.Value = DBNull.Value;
           }
           else
           {
               raisedByParameter.Value = raisedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveComplaintDetails @Subject, @Description, @DepartmentId, @StatusId, @RaisedByUserId, @ReferenceDocPath, @RaisedBy, @ErrorCode OUT", subjectParameter, descriptionParameter, departmentIdParameter, statusIdParameter, raisedByUserIdParameter, referenceDocPathParameter, raisedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveComplaintStatusChangeDetails(Nullable<Int64> complaintId, Nullable<Int32> statusId, Nullable<Int64> complaintAssigneeId, Nullable<Int64> assigneeToUserId, string assigneeComments, string actionReferenceFilePath, string isDelegated, Nullable<Int64> delegatedUserId, string updatedBy, ObjectParameter errorCode, Nullable<Int32> previousStatusID, Nullable<Int32> percentageOfCompleation, Nullable<DateTime> todaysClientDate)
        {

            var complaintIdParameter = complaintId.HasValue ?
                new SqlParameter("ComplaintId", complaintId) :
                new SqlParameter("ComplaintId", SqlDbType.BigInt);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

            var complaintAssigneeIdParameter = complaintAssigneeId.HasValue ?
                new SqlParameter("ComplaintAssigneeId", complaintAssigneeId) :
                new SqlParameter("ComplaintAssigneeId", SqlDbType.BigInt);

            var assigneeToUserIdParameter = assigneeToUserId.HasValue ?
                new SqlParameter("AssigneeToUserId", assigneeToUserId) :
                new SqlParameter("AssigneeToUserId", SqlDbType.BigInt);

           var assigneeCommentsParameter = new SqlParameter("AssigneeComments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(assigneeComments))
           {
               assigneeCommentsParameter.IsNullable = true;
               assigneeCommentsParameter.Value = DBNull.Value;
           }
           else
           {
               assigneeCommentsParameter.Value = assigneeComments;
           }

           var actionReferenceFilePathParameter = new SqlParameter("ActionReferenceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(actionReferenceFilePath))
           {
               actionReferenceFilePathParameter.IsNullable = true;
               actionReferenceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               actionReferenceFilePathParameter.Value = actionReferenceFilePath;
           }

           var isDelegatedParameter = new SqlParameter("IsDelegated", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isDelegated))
           {
               isDelegatedParameter.IsNullable = true;
               isDelegatedParameter.Value = DBNull.Value;
           }
           else
           {
               isDelegatedParameter.Value = isDelegated;
           }

            var delegatedUserIdParameter = delegatedUserId.HasValue ?
                new SqlParameter("DelegatedUserId", delegatedUserId) :
                new SqlParameter("DelegatedUserId", SqlDbType.BigInt);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);

            var percentageOfCompleationParameter = percentageOfCompleation.HasValue ?
                new SqlParameter("PercentageOfCompleation", percentageOfCompleation) :
                new SqlParameter("PercentageOfCompleation", SqlDbType.Int);

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveComplaintStatusChangeDetails @ComplaintId, @StatusId, @ComplaintAssigneeId, @AssigneeToUserId, @AssigneeComments, @ActionReferenceFilePath, @IsDelegated, @DelegatedUserId, @UpdatedBy, @ErrorCode OUT, @PreviousStatusID, @PercentageOfCompleation, @TodaysClientDate", complaintIdParameter, statusIdParameter, complaintAssigneeIdParameter, assigneeToUserIdParameter, assigneeCommentsParameter, actionReferenceFilePathParameter, isDelegatedParameter, delegatedUserIdParameter, updatedByParameter, errorCodeParameter, previousStatusIDParameter, percentageOfCompleationParameter, todaysClientDateParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCondoAssetCodesDetails(string condoAssetDetails, string createdBy, ObjectParameter errorCode)
        {

            var condoAssetDetailsParameter = condoAssetDetails != null ?
                new SqlParameter("CondoAssetDetails", condoAssetDetails) :
                new SqlParameter("CondoAssetDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCondoAssetCodesDetails @CondoAssetDetails, @CreatedBy, @ErrorCode OUT", condoAssetDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCondoAssetDepreciationDetails(string condoAssetDepreciationDetails, string createdBy, Nullable<Int64> createdByUserId, ObjectParameter errorCode)
        {

            var condoAssetDepreciationDetailsParameter = condoAssetDepreciationDetails != null ?
                new SqlParameter("CondoAssetDepreciationDetails", condoAssetDepreciationDetails) :
                new SqlParameter("CondoAssetDepreciationDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

            var createdByUserIdParameter = createdByUserId.HasValue ?
                new SqlParameter("CreatedByUserId", createdByUserId) :
                new SqlParameter("CreatedByUserId", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCondoAssetDepreciationDetails @CondoAssetDepreciationDetails, @CreatedBy, @CreatedByUserId, @ErrorCode OUT", condoAssetDepreciationDetailsParameter, createdByParameter, createdByUserIdParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCondoBankAccountDetails(Nullable<Int32> condoBankAccountID, string bankName, string bankAddress, string accountNumber, string confirmAccountNumber, string accountType, string branchName, string swiftCode, string ispettycash, Nullable<Decimal> openingBalance, Nullable<DateTime> oBAsONDate, string updatedBy, string isLinkedToPaymentGateWay, ObjectParameter errorCode)
        {

            var condoBankAccountIDParameter = condoBankAccountID.HasValue ?
                new SqlParameter("CondoBankAccountID", condoBankAccountID) :
                new SqlParameter("CondoBankAccountID", SqlDbType.Int);

           var bankNameParameter = new SqlParameter("BankName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(bankName))
           {
               bankNameParameter.IsNullable = true;
               bankNameParameter.Value = DBNull.Value;
           }
           else
           {
               bankNameParameter.Value = bankName;
           }

           var bankAddressParameter = new SqlParameter("BankAddress", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(bankAddress))
           {
               bankAddressParameter.IsNullable = true;
               bankAddressParameter.Value = DBNull.Value;
           }
           else
           {
               bankAddressParameter.Value = bankAddress;
           }

           var accountNumberParameter = new SqlParameter("AccountNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(accountNumber))
           {
               accountNumberParameter.IsNullable = true;
               accountNumberParameter.Value = DBNull.Value;
           }
           else
           {
               accountNumberParameter.Value = accountNumber;
           }

           var confirmAccountNumberParameter = new SqlParameter("ConfirmAccountNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(confirmAccountNumber))
           {
               confirmAccountNumberParameter.IsNullable = true;
               confirmAccountNumberParameter.Value = DBNull.Value;
           }
           else
           {
               confirmAccountNumberParameter.Value = confirmAccountNumber;
           }

           var accountTypeParameter = new SqlParameter("AccountType", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(accountType))
           {
               accountTypeParameter.IsNullable = true;
               accountTypeParameter.Value = DBNull.Value;
           }
           else
           {
               accountTypeParameter.Value = accountType;
           }

           var branchNameParameter = new SqlParameter("BranchName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(branchName))
           {
               branchNameParameter.IsNullable = true;
               branchNameParameter.Value = DBNull.Value;
           }
           else
           {
               branchNameParameter.Value = branchName;
           }

           var swiftCodeParameter = new SqlParameter("SwiftCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(swiftCode))
           {
               swiftCodeParameter.IsNullable = true;
               swiftCodeParameter.Value = DBNull.Value;
           }
           else
           {
               swiftCodeParameter.Value = swiftCode;
           }

           var ispettycashParameter = new SqlParameter("Ispettycash", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ispettycash))
           {
               ispettycashParameter.IsNullable = true;
               ispettycashParameter.Value = DBNull.Value;
           }
           else
           {
               ispettycashParameter.Value = ispettycash;
           }

            var openingBalanceParameter = openingBalance.HasValue ?
                new SqlParameter("OpeningBalance", openingBalance) :
                new SqlParameter("OpeningBalance", SqlDbType.Decimal);

            var oBAsONDateParameter = oBAsONDate.HasValue ?
                new SqlParameter("OBAsONDate", oBAsONDate) :
                new SqlParameter("OBAsONDate", SqlDbType.DateTime);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var isLinkedToPaymentGateWayParameter = new SqlParameter("IsLinkedToPaymentGateWay", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isLinkedToPaymentGateWay))
           {
               isLinkedToPaymentGateWayParameter.IsNullable = true;
               isLinkedToPaymentGateWayParameter.Value = DBNull.Value;
           }
           else
           {
               isLinkedToPaymentGateWayParameter.Value = isLinkedToPaymentGateWay;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCondoBankAccountDetails @CondoBankAccountID, @BankName, @BankAddress, @AccountNumber, @ConfirmAccountNumber, @AccountType, @BranchName, @SwiftCode, @Ispettycash, @OpeningBalance, @OBAsONDate, @UpdatedBy, @IsLinkedToPaymentGateWay, @ErrorCode OUT", condoBankAccountIDParameter, bankNameParameter, bankAddressParameter, accountNumberParameter, confirmAccountNumberParameter, accountTypeParameter, branchNameParameter, swiftCodeParameter, ispettycashParameter, openingBalanceParameter, oBAsONDateParameter, updatedByParameter, isLinkedToPaymentGateWayParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCondoFacilityBookingDetails(Nullable<Int32> facilitiesId, Nullable<Int32> courtID, Nullable<Int32> unitId, Nullable<Int32> livingMemberUserId, string outersName, Nullable<DateTime> bookingDate, string fromTime, string totime, string facilitiesCategory, Nullable<Int32> numberOfPeoples, string facilityBookPriceids, string updatedBy, ObjectParameter errorCode, ObjectParameter facilityBookingId, ObjectParameter livingMemberCentralUserId, Nullable<Int32> slotId, Nullable<DateTime> todaysClientDate, string isUserAcceptedTermsAndConditions)
        {

            var facilitiesIdParameter = facilitiesId.HasValue ?
                new SqlParameter("FacilitiesId", facilitiesId) :
                new SqlParameter("FacilitiesId", SqlDbType.Int);

            var courtIDParameter = courtID.HasValue ?
                new SqlParameter("CourtID", courtID) :
                new SqlParameter("CourtID", SqlDbType.Int);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var livingMemberUserIdParameter = livingMemberUserId.HasValue ?
                new SqlParameter("LivingMemberUserId", livingMemberUserId) :
                new SqlParameter("LivingMemberUserId", SqlDbType.Int);

           var outersNameParameter = new SqlParameter("OutersName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(outersName))
           {
               outersNameParameter.IsNullable = true;
               outersNameParameter.Value = DBNull.Value;
           }
           else
           {
               outersNameParameter.Value = outersName;
           }

            var bookingDateParameter = bookingDate.HasValue ?
                new SqlParameter("BookingDate", bookingDate) :
                new SqlParameter("BookingDate", SqlDbType.DateTime);

           var fromTimeParameter = new SqlParameter("FromTime", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(fromTime))
           {
               fromTimeParameter.IsNullable = true;
               fromTimeParameter.Value = DBNull.Value;
           }
           else
           {
               fromTimeParameter.Value = fromTime;
           }

           var totimeParameter = new SqlParameter("Totime", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(totime))
           {
               totimeParameter.IsNullable = true;
               totimeParameter.Value = DBNull.Value;
           }
           else
           {
               totimeParameter.Value = totime;
           }

           var facilitiesCategoryParameter = new SqlParameter("facilitiesCategory", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(facilitiesCategory))
           {
               facilitiesCategoryParameter.IsNullable = true;
               facilitiesCategoryParameter.Value = DBNull.Value;
           }
           else
           {
               facilitiesCategoryParameter.Value = facilitiesCategory;
           }

            var numberOfPeoplesParameter = numberOfPeoples.HasValue ?
                new SqlParameter("NumberOfPeoples", numberOfPeoples) :
                new SqlParameter("NumberOfPeoples", SqlDbType.Int);

           var facilityBookPriceidsParameter = new SqlParameter("FacilityBookPriceids", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(facilityBookPriceids))
           {
               facilityBookPriceidsParameter.IsNullable = true;
               facilityBookPriceidsParameter.Value = DBNull.Value;
           }
           else
           {
               facilityBookPriceidsParameter.Value = facilityBookPriceids;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var facilityBookingIdParameter = new SqlParameter("FacilityBookingId", SqlDbType.Int);
               facilityBookingIdParameter.Direction = System.Data.ParameterDirection.Output;
               facilityBookingIdParameter.Value = facilityBookingId != null ? facilityBookingId.Value : null;

           var livingMemberCentralUserIdParameter = new SqlParameter("LivingMemberCentralUserId", SqlDbType.BigInt);
               livingMemberCentralUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               livingMemberCentralUserIdParameter.Value = livingMemberCentralUserId != null ? livingMemberCentralUserId.Value : null;

            var slotIdParameter = slotId.HasValue ?
                new SqlParameter("SlotId", slotId) :
                new SqlParameter("SlotId", SqlDbType.Int);

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);

           var isUserAcceptedTermsAndConditionsParameter = new SqlParameter("IsUserAcceptedTermsAndConditions", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isUserAcceptedTermsAndConditions))
           {
               isUserAcceptedTermsAndConditionsParameter.IsNullable = true;
               isUserAcceptedTermsAndConditionsParameter.Value = DBNull.Value;
           }
           else
           {
               isUserAcceptedTermsAndConditionsParameter.Value = isUserAcceptedTermsAndConditions;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCondoFacilityBookingDetails @FacilitiesId, @CourtID, @UnitId, @LivingMemberUserId, @OutersName, @BookingDate, @FromTime, @Totime, @facilitiesCategory, @NumberOfPeoples, @FacilityBookPriceids, @UpdatedBy, @ErrorCode OUT, @FacilityBookingId OUT, @LivingMemberCentralUserId OUT, @SlotId, @TodaysClientDate, @IsUserAcceptedTermsAndConditions", facilitiesIdParameter, courtIDParameter, unitIdParameter, livingMemberUserIdParameter, outersNameParameter, bookingDateParameter, fromTimeParameter, totimeParameter, facilitiesCategoryParameter, numberOfPeoplesParameter, facilityBookPriceidsParameter, updatedByParameter, errorCodeParameter, facilityBookingIdParameter, livingMemberCentralUserIdParameter, slotIdParameter, todaysClientDateParameter, isUserAcceptedTermsAndConditionsParameter);

            errorCode.Value = errorCodeParameter.Value;
            facilityBookingId.Value = facilityBookingIdParameter.Value;
            livingMemberCentralUserId.Value = livingMemberCentralUserIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCondoGlItemMappingDetails(Nullable<Int64> gLItemMaPId, Nullable<Int32> gLAccountItemId, Nullable<Int32> itemRequestId, string glMappingRequestType, string isActive, string comment, string mappedBy, ObjectParameter errorCode)
        {

            var gLItemMaPIdParameter = gLItemMaPId.HasValue ?
                new SqlParameter("GLItemMaPId", gLItemMaPId) :
                new SqlParameter("GLItemMaPId", SqlDbType.BigInt);

            var gLAccountItemIdParameter = gLAccountItemId.HasValue ?
                new SqlParameter("GLAccountItemId", gLAccountItemId) :
                new SqlParameter("GLAccountItemId", SqlDbType.Int);

            var itemRequestIdParameter = itemRequestId.HasValue ?
                new SqlParameter("ItemRequestId", itemRequestId) :
                new SqlParameter("ItemRequestId", SqlDbType.Int);

           var glMappingRequestTypeParameter = new SqlParameter("GlMappingRequestType", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(glMappingRequestType))
           {
               glMappingRequestTypeParameter.IsNullable = true;
               glMappingRequestTypeParameter.Value = DBNull.Value;
           }
           else
           {
               glMappingRequestTypeParameter.Value = glMappingRequestType;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var commentParameter = new SqlParameter("Comment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comment))
           {
               commentParameter.IsNullable = true;
               commentParameter.Value = DBNull.Value;
           }
           else
           {
               commentParameter.Value = comment;
           }

           var mappedByParameter = new SqlParameter("MappedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(mappedBy))
           {
               mappedByParameter.IsNullable = true;
               mappedByParameter.Value = DBNull.Value;
           }
           else
           {
               mappedByParameter.Value = mappedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCondoGlItemMappingDetails @GLItemMaPId, @GLAccountItemId, @ItemRequestId, @GlMappingRequestType, @IsActive, @Comment, @MappedBy, @ErrorCode OUT", gLItemMaPIdParameter, gLAccountItemIdParameter, itemRequestIdParameter, glMappingRequestTypeParameter, isActiveParameter, commentParameter, mappedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCondoMaterials(Nullable<Int64> materialID, string materialName, string stackTrakingRequired, Nullable<Int32> stockCategoryId, Nullable<Int32> unitOfMeasureId, string createdBy, ObjectParameter errorCode)
        {

            var materialIDParameter = materialID.HasValue ?
                new SqlParameter("MaterialID", materialID) :
                new SqlParameter("MaterialID", SqlDbType.BigInt);

           var materialNameParameter = new SqlParameter("MaterialName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(materialName))
           {
               materialNameParameter.IsNullable = true;
               materialNameParameter.Value = DBNull.Value;
           }
           else
           {
               materialNameParameter.Value = materialName;
           }

           var stackTrakingRequiredParameter = new SqlParameter("StackTrakingRequired", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(stackTrakingRequired))
           {
               stackTrakingRequiredParameter.IsNullable = true;
               stackTrakingRequiredParameter.Value = DBNull.Value;
           }
           else
           {
               stackTrakingRequiredParameter.Value = stackTrakingRequired;
           }

            var stockCategoryIdParameter = stockCategoryId.HasValue ?
                new SqlParameter("StockCategoryId", stockCategoryId) :
                new SqlParameter("StockCategoryId", SqlDbType.Int);

            var unitOfMeasureIdParameter = unitOfMeasureId.HasValue ?
                new SqlParameter("UnitOfMeasureId", unitOfMeasureId) :
                new SqlParameter("UnitOfMeasureId", SqlDbType.Int);

           var createdByParameter = new SqlParameter("createdBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCondoMaterials @MaterialID, @MaterialName, @StackTrakingRequired, @StockCategoryId, @UnitOfMeasureId, @createdBy, @ErrorCode OUT", materialIDParameter, materialNameParameter, stackTrakingRequiredParameter, stockCategoryIdParameter, unitOfMeasureIdParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCondomiumSettings(Nullable<Int32> condomiumId, string title, string condoDescription, string condoAddress, Nullable<Int32> noOfBlocks, string logoPath, string backGroundImagePath, Nullable<Int32> unitDisplayFormatId, string updatedBy, string registrationNo, string telephoneNo, string faxNo, string addressLine1, string addressLine2, string addressLine3, string city, string addressState, string postalCode, ObjectParameter errorCode)
        {

            var condomiumIdParameter = condomiumId.HasValue ?
                new SqlParameter("CondomiumId", condomiumId) :
                new SqlParameter("CondomiumId", SqlDbType.Int);

           var titleParameter = new SqlParameter("Title", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(title))
           {
               titleParameter.IsNullable = true;
               titleParameter.Value = DBNull.Value;
           }
           else
           {
               titleParameter.Value = title;
           }

           var condoDescriptionParameter = new SqlParameter("CondoDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(condoDescription))
           {
               condoDescriptionParameter.IsNullable = true;
               condoDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               condoDescriptionParameter.Value = condoDescription;
           }

           var condoAddressParameter = new SqlParameter("CondoAddress", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(condoAddress))
           {
               condoAddressParameter.IsNullable = true;
               condoAddressParameter.Value = DBNull.Value;
           }
           else
           {
               condoAddressParameter.Value = condoAddress;
           }

            var noOfBlocksParameter = noOfBlocks.HasValue ?
                new SqlParameter("NoOfBlocks", noOfBlocks) :
                new SqlParameter("NoOfBlocks", SqlDbType.Int);

           var logoPathParameter = new SqlParameter("LogoPath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(logoPath))
           {
               logoPathParameter.IsNullable = true;
               logoPathParameter.Value = DBNull.Value;
           }
           else
           {
               logoPathParameter.Value = logoPath;
           }

           var backGroundImagePathParameter = new SqlParameter("BackGroundImagePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(backGroundImagePath))
           {
               backGroundImagePathParameter.IsNullable = true;
               backGroundImagePathParameter.Value = DBNull.Value;
           }
           else
           {
               backGroundImagePathParameter.Value = backGroundImagePath;
           }

            var unitDisplayFormatIdParameter = unitDisplayFormatId.HasValue ?
                new SqlParameter("UnitDisplayFormatId", unitDisplayFormatId) :
                new SqlParameter("UnitDisplayFormatId", SqlDbType.Int);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var registrationNoParameter = new SqlParameter("RegistrationNo", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(registrationNo))
           {
               registrationNoParameter.IsNullable = true;
               registrationNoParameter.Value = DBNull.Value;
           }
           else
           {
               registrationNoParameter.Value = registrationNo;
           }

           var telephoneNoParameter = new SqlParameter("TelephoneNo", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(telephoneNo))
           {
               telephoneNoParameter.IsNullable = true;
               telephoneNoParameter.Value = DBNull.Value;
           }
           else
           {
               telephoneNoParameter.Value = telephoneNo;
           }

           var faxNoParameter = new SqlParameter("FaxNo", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(faxNo))
           {
               faxNoParameter.IsNullable = true;
               faxNoParameter.Value = DBNull.Value;
           }
           else
           {
               faxNoParameter.Value = faxNo;
           }

           var addressLine1Parameter = new SqlParameter("AddressLine1", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressLine1))
           {
               addressLine1Parameter.IsNullable = true;
               addressLine1Parameter.Value = DBNull.Value;
           }
           else
           {
               addressLine1Parameter.Value = addressLine1;
           }

           var addressLine2Parameter = new SqlParameter("AddressLine2", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressLine2))
           {
               addressLine2Parameter.IsNullable = true;
               addressLine2Parameter.Value = DBNull.Value;
           }
           else
           {
               addressLine2Parameter.Value = addressLine2;
           }

           var addressLine3Parameter = new SqlParameter("AddressLine3", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressLine3))
           {
               addressLine3Parameter.IsNullable = true;
               addressLine3Parameter.Value = DBNull.Value;
           }
           else
           {
               addressLine3Parameter.Value = addressLine3;
           }

           var cityParameter = new SqlParameter("City", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(city))
           {
               cityParameter.IsNullable = true;
               cityParameter.Value = DBNull.Value;
           }
           else
           {
               cityParameter.Value = city;
           }

           var addressStateParameter = new SqlParameter("AddressState", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressState))
           {
               addressStateParameter.IsNullable = true;
               addressStateParameter.Value = DBNull.Value;
           }
           else
           {
               addressStateParameter.Value = addressState;
           }

           var postalCodeParameter = new SqlParameter("PostalCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(postalCode))
           {
               postalCodeParameter.IsNullable = true;
               postalCodeParameter.Value = DBNull.Value;
           }
           else
           {
               postalCodeParameter.Value = postalCode;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCondomiumSettings @CondomiumId, @Title, @CondoDescription, @CondoAddress, @NoOfBlocks, @LogoPath, @BackGroundImagePath, @UnitDisplayFormatId, @UpdatedBy, @RegistrationNo, @TelephoneNo, @FaxNo, @AddressLine1, @AddressLine2, @AddressLine3, @City, @AddressState, @PostalCode, @ErrorCode OUT", condomiumIdParameter, titleParameter, condoDescriptionParameter, condoAddressParameter, noOfBlocksParameter, logoPathParameter, backGroundImagePathParameter, unitDisplayFormatIdParameter, updatedByParameter, registrationNoParameter, telephoneNoParameter, faxNoParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, cityParameter, addressStateParameter, postalCodeParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveConfigurationDetails(Nullable<Int32> configurationId, string configurationName, Nullable<Int32> configurationKey, string configurationValue, string updatedBy, ObjectParameter errorCode)
        {

            var configurationIdParameter = configurationId.HasValue ?
                new SqlParameter("ConfigurationId", configurationId) :
                new SqlParameter("ConfigurationId", SqlDbType.Int);

           var configurationNameParameter = new SqlParameter("ConfigurationName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(configurationName))
           {
               configurationNameParameter.IsNullable = true;
               configurationNameParameter.Value = DBNull.Value;
           }
           else
           {
               configurationNameParameter.Value = configurationName;
           }

            var configurationKeyParameter = configurationKey.HasValue ?
                new SqlParameter("ConfigurationKey", configurationKey) :
                new SqlParameter("ConfigurationKey", SqlDbType.Int);

           var configurationValueParameter = new SqlParameter("ConfigurationValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(configurationValue))
           {
               configurationValueParameter.IsNullable = true;
               configurationValueParameter.Value = DBNull.Value;
           }
           else
           {
               configurationValueParameter.Value = configurationValue;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveConfigurationDetails @ConfigurationId, @ConfigurationName, @ConfigurationKey, @ConfigurationValue, @UpdatedBy, @ErrorCode OUT", configurationIdParameter, configurationNameParameter, configurationKeyParameter, configurationValueParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCountryDetails(Nullable<Int32> countryId, string countryCode, string countryName, string countryCurrencyName, Nullable<Int32> countryMobileCode, string countryMobileNumMax, string countryMobileNumMin, string countryCurrencyCodeDescription, string countryCurrencyImage, string createdBy, ObjectParameter errorCode)
        {

            var countryIdParameter = countryId.HasValue ?
                new SqlParameter("CountryId", countryId) :
                new SqlParameter("CountryId", SqlDbType.Int);

           var countryCodeParameter = new SqlParameter("CountryCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(countryCode))
           {
               countryCodeParameter.IsNullable = true;
               countryCodeParameter.Value = DBNull.Value;
           }
           else
           {
               countryCodeParameter.Value = countryCode;
           }

           var countryNameParameter = new SqlParameter("CountryName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(countryName))
           {
               countryNameParameter.IsNullable = true;
               countryNameParameter.Value = DBNull.Value;
           }
           else
           {
               countryNameParameter.Value = countryName;
           }

           var countryCurrencyNameParameter = new SqlParameter("CountryCurrencyName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(countryCurrencyName))
           {
               countryCurrencyNameParameter.IsNullable = true;
               countryCurrencyNameParameter.Value = DBNull.Value;
           }
           else
           {
               countryCurrencyNameParameter.Value = countryCurrencyName;
           }

            var countryMobileCodeParameter = countryMobileCode.HasValue ?
                new SqlParameter("CountryMobileCode", countryMobileCode) :
                new SqlParameter("CountryMobileCode", SqlDbType.Int);

           var countryMobileNumMaxParameter = new SqlParameter("CountryMobileNumMax", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(countryMobileNumMax))
           {
               countryMobileNumMaxParameter.IsNullable = true;
               countryMobileNumMaxParameter.Value = DBNull.Value;
           }
           else
           {
               countryMobileNumMaxParameter.Value = countryMobileNumMax;
           }

           var countryMobileNumMinParameter = new SqlParameter("CountryMobileNumMin", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(countryMobileNumMin))
           {
               countryMobileNumMinParameter.IsNullable = true;
               countryMobileNumMinParameter.Value = DBNull.Value;
           }
           else
           {
               countryMobileNumMinParameter.Value = countryMobileNumMin;
           }

           var countryCurrencyCodeDescriptionParameter = new SqlParameter("CountryCurrencyCodeDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(countryCurrencyCodeDescription))
           {
               countryCurrencyCodeDescriptionParameter.IsNullable = true;
               countryCurrencyCodeDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               countryCurrencyCodeDescriptionParameter.Value = countryCurrencyCodeDescription;
           }

           var countryCurrencyImageParameter = new SqlParameter("CountryCurrencyImage", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(countryCurrencyImage))
           {
               countryCurrencyImageParameter.IsNullable = true;
               countryCurrencyImageParameter.Value = DBNull.Value;
           }
           else
           {
               countryCurrencyImageParameter.Value = countryCurrencyImage;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCountryDetails @CountryId, @CountryCode, @CountryName, @CountryCurrencyName, @CountryMobileCode, @CountryMobileNumMax, @CountryMobileNumMin, @CountryCurrencyCodeDescription, @CountryCurrencyImage, @CreatedBy, @ErrorCode OUT", countryIdParameter, countryCodeParameter, countryNameParameter, countryCurrencyNameParameter, countryMobileCodeParameter, countryMobileNumMaxParameter, countryMobileNumMinParameter, countryCurrencyCodeDescriptionParameter, countryCurrencyImageParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCreditNote(Nullable<Int64> creditNoteID, Nullable<Int32> issueForID, Nullable<Int32> issueToID, string creditNumber, string creditSubject, string vendor_DebitNoteReferenceNumber, Nullable<Decimal> creditAmount, string issueToAddress, Nullable<DateTime> issueDate, Nullable<Int64> invoiceId, string acknowledgementFilePath, Nullable<Int32> statusId, string createdBy, ObjectParameter errorCode)
        {

            var creditNoteIDParameter = creditNoteID.HasValue ?
                new SqlParameter("CreditNoteID", creditNoteID) :
                new SqlParameter("CreditNoteID", SqlDbType.BigInt);

            var issueForIDParameter = issueForID.HasValue ?
                new SqlParameter("IssueForID", issueForID) :
                new SqlParameter("IssueForID", SqlDbType.Int);

            var issueToIDParameter = issueToID.HasValue ?
                new SqlParameter("IssueToID", issueToID) :
                new SqlParameter("IssueToID", SqlDbType.Int);

           var creditNumberParameter = new SqlParameter("CreditNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(creditNumber))
           {
               creditNumberParameter.IsNullable = true;
               creditNumberParameter.Value = DBNull.Value;
           }
           else
           {
               creditNumberParameter.Value = creditNumber;
           }

           var creditSubjectParameter = new SqlParameter("CreditSubject", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(creditSubject))
           {
               creditSubjectParameter.IsNullable = true;
               creditSubjectParameter.Value = DBNull.Value;
           }
           else
           {
               creditSubjectParameter.Value = creditSubject;
           }

           var vendor_DebitNoteReferenceNumberParameter = new SqlParameter("Vendor_DebitNoteReferenceNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(vendor_DebitNoteReferenceNumber))
           {
               vendor_DebitNoteReferenceNumberParameter.IsNullable = true;
               vendor_DebitNoteReferenceNumberParameter.Value = DBNull.Value;
           }
           else
           {
               vendor_DebitNoteReferenceNumberParameter.Value = vendor_DebitNoteReferenceNumber;
           }

            var creditAmountParameter = creditAmount.HasValue ?
                new SqlParameter("CreditAmount", creditAmount) :
                new SqlParameter("CreditAmount", SqlDbType.Decimal);

           var issueToAddressParameter = new SqlParameter("IssueToAddress", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(issueToAddress))
           {
               issueToAddressParameter.IsNullable = true;
               issueToAddressParameter.Value = DBNull.Value;
           }
           else
           {
               issueToAddressParameter.Value = issueToAddress;
           }

            var issueDateParameter = issueDate.HasValue ?
                new SqlParameter("IssueDate", issueDate) :
                new SqlParameter("IssueDate", SqlDbType.DateTime);

            var invoiceIdParameter = invoiceId.HasValue ?
                new SqlParameter("InvoiceId", invoiceId) :
                new SqlParameter("InvoiceId", SqlDbType.BigInt);

           var acknowledgementFilePathParameter = new SqlParameter("AcknowledgementFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(acknowledgementFilePath))
           {
               acknowledgementFilePathParameter.IsNullable = true;
               acknowledgementFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               acknowledgementFilePathParameter.Value = acknowledgementFilePath;
           }

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCreditNote @CreditNoteID, @IssueForID, @IssueToID, @CreditNumber, @CreditSubject, @Vendor_DebitNoteReferenceNumber, @CreditAmount, @IssueToAddress, @IssueDate, @InvoiceId, @AcknowledgementFilePath, @StatusId, @CreatedBy, @ErrorCode OUT", creditNoteIDParameter, issueForIDParameter, issueToIDParameter, creditNumberParameter, creditSubjectParameter, vendor_DebitNoteReferenceNumberParameter, creditAmountParameter, issueToAddressParameter, issueDateParameter, invoiceIdParameter, acknowledgementFilePathParameter, statusIdParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCreditNoteLineItemDetails(Nullable<Int64> creditNoteID, Nullable<Int32> issueForId, Nullable<Int32> issueForTo, Nullable<Int64> invoiceId, string invoiceLineItems, string createdBy, ObjectParameter errorCode)
        {

            var creditNoteIDParameter = creditNoteID.HasValue ?
                new SqlParameter("CreditNoteID", creditNoteID) :
                new SqlParameter("CreditNoteID", SqlDbType.BigInt);

            var issueForIdParameter = issueForId.HasValue ?
                new SqlParameter("IssueForId", issueForId) :
                new SqlParameter("IssueForId", SqlDbType.Int);

            var issueForToParameter = issueForTo.HasValue ?
                new SqlParameter("IssueForTo", issueForTo) :
                new SqlParameter("IssueForTo", SqlDbType.Int);

            var invoiceIdParameter = invoiceId.HasValue ?
                new SqlParameter("InvoiceId", invoiceId) :
                new SqlParameter("InvoiceId", SqlDbType.BigInt);

            var invoiceLineItemsParameter = invoiceLineItems != null ?
                new SqlParameter("InvoiceLineItems", invoiceLineItems) :
                new SqlParameter("InvoiceLineItems", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCreditNoteLineItemDetails @CreditNoteID, @IssueForId, @IssueForTo, @InvoiceId, @InvoiceLineItems, @CreatedBy, @ErrorCode OUT", creditNoteIDParameter, issueForIdParameter, issueForToParameter, invoiceIdParameter, invoiceLineItemsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCreditNoteTransposeDetails(Nullable<Int64> creditNoteId, Nullable<Int64> transposedByUserId, string transposedBy, string transposeComments, ObjectParameter errorCode)
        {

            var creditNoteIdParameter = creditNoteId.HasValue ?
                new SqlParameter("CreditNoteId", creditNoteId) :
                new SqlParameter("CreditNoteId", SqlDbType.BigInt);

            var transposedByUserIdParameter = transposedByUserId.HasValue ?
                new SqlParameter("TransposedByUserId", transposedByUserId) :
                new SqlParameter("TransposedByUserId", SqlDbType.BigInt);

           var transposedByParameter = new SqlParameter("TransposedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(transposedBy))
           {
               transposedByParameter.IsNullable = true;
               transposedByParameter.Value = DBNull.Value;
           }
           else
           {
               transposedByParameter.Value = transposedBy;
           }

           var transposeCommentsParameter = new SqlParameter("TransposeComments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(transposeComments))
           {
               transposeCommentsParameter.IsNullable = true;
               transposeCommentsParameter.Value = DBNull.Value;
           }
           else
           {
               transposeCommentsParameter.Value = transposeComments;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCreditNoteTransposeDetails @CreditNoteId, @TransposedByUserId, @TransposedBy, @TransposeComments, @ErrorCode OUT", creditNoteIdParameter, transposedByUserIdParameter, transposedByParameter, transposeCommentsParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveDebitNote(Nullable<Int64> debitNoteID, Nullable<Int32> issueForID, Nullable<Int32> issueToID, string debitNumber, string debitSubject, string vendorCreditNoteReferenceNumber, Nullable<Decimal> debitAmount, string issueToAddress, Nullable<DateTime> issueDate, Nullable<Int64> invoiceId, string acknowledgementFilePath, Nullable<Int32> statusId, string createdBy, ObjectParameter errorCode)
        {

            var debitNoteIDParameter = debitNoteID.HasValue ?
                new SqlParameter("DebitNoteID", debitNoteID) :
                new SqlParameter("DebitNoteID", SqlDbType.BigInt);

            var issueForIDParameter = issueForID.HasValue ?
                new SqlParameter("IssueForID", issueForID) :
                new SqlParameter("IssueForID", SqlDbType.Int);

            var issueToIDParameter = issueToID.HasValue ?
                new SqlParameter("IssueToID", issueToID) :
                new SqlParameter("IssueToID", SqlDbType.Int);

           var debitNumberParameter = new SqlParameter("DebitNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(debitNumber))
           {
               debitNumberParameter.IsNullable = true;
               debitNumberParameter.Value = DBNull.Value;
           }
           else
           {
               debitNumberParameter.Value = debitNumber;
           }

           var debitSubjectParameter = new SqlParameter("DebitSubject", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(debitSubject))
           {
               debitSubjectParameter.IsNullable = true;
               debitSubjectParameter.Value = DBNull.Value;
           }
           else
           {
               debitSubjectParameter.Value = debitSubject;
           }

           var vendorCreditNoteReferenceNumberParameter = new SqlParameter("VendorCreditNoteReferenceNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(vendorCreditNoteReferenceNumber))
           {
               vendorCreditNoteReferenceNumberParameter.IsNullable = true;
               vendorCreditNoteReferenceNumberParameter.Value = DBNull.Value;
           }
           else
           {
               vendorCreditNoteReferenceNumberParameter.Value = vendorCreditNoteReferenceNumber;
           }

            var debitAmountParameter = debitAmount.HasValue ?
                new SqlParameter("DebitAmount", debitAmount) :
                new SqlParameter("DebitAmount", SqlDbType.Decimal);

           var issueToAddressParameter = new SqlParameter("IssueToAddress", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(issueToAddress))
           {
               issueToAddressParameter.IsNullable = true;
               issueToAddressParameter.Value = DBNull.Value;
           }
           else
           {
               issueToAddressParameter.Value = issueToAddress;
           }

            var issueDateParameter = issueDate.HasValue ?
                new SqlParameter("IssueDate", issueDate) :
                new SqlParameter("IssueDate", SqlDbType.DateTime);

            var invoiceIdParameter = invoiceId.HasValue ?
                new SqlParameter("InvoiceId", invoiceId) :
                new SqlParameter("InvoiceId", SqlDbType.BigInt);

           var acknowledgementFilePathParameter = new SqlParameter("AcknowledgementFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(acknowledgementFilePath))
           {
               acknowledgementFilePathParameter.IsNullable = true;
               acknowledgementFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               acknowledgementFilePathParameter.Value = acknowledgementFilePath;
           }

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveDebitNote @DebitNoteID, @IssueForID, @IssueToID, @DebitNumber, @DebitSubject, @VendorCreditNoteReferenceNumber, @DebitAmount, @IssueToAddress, @IssueDate, @InvoiceId, @AcknowledgementFilePath, @StatusId, @CreatedBy, @ErrorCode OUT", debitNoteIDParameter, issueForIDParameter, issueToIDParameter, debitNumberParameter, debitSubjectParameter, vendorCreditNoteReferenceNumberParameter, debitAmountParameter, issueToAddressParameter, issueDateParameter, invoiceIdParameter, acknowledgementFilePathParameter, statusIdParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveDebitNoteLineItemDetails(Nullable<Int64> debitNoteID, Nullable<Int32> issueForId, Nullable<Int32> issueForTo, Nullable<Int64> invoiceId, string invoiceLineItems, string createdBy, ObjectParameter errorCode)
        {

            var debitNoteIDParameter = debitNoteID.HasValue ?
                new SqlParameter("DebitNoteID", debitNoteID) :
                new SqlParameter("DebitNoteID", SqlDbType.BigInt);

            var issueForIdParameter = issueForId.HasValue ?
                new SqlParameter("IssueForId", issueForId) :
                new SqlParameter("IssueForId", SqlDbType.Int);

            var issueForToParameter = issueForTo.HasValue ?
                new SqlParameter("IssueForTo", issueForTo) :
                new SqlParameter("IssueForTo", SqlDbType.Int);

            var invoiceIdParameter = invoiceId.HasValue ?
                new SqlParameter("InvoiceId", invoiceId) :
                new SqlParameter("InvoiceId", SqlDbType.BigInt);

            var invoiceLineItemsParameter = invoiceLineItems != null ?
                new SqlParameter("InvoiceLineItems", invoiceLineItems) :
                new SqlParameter("InvoiceLineItems", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveDebitNoteLineItemDetails @DebitNoteID, @IssueForId, @IssueForTo, @InvoiceId, @InvoiceLineItems, @CreatedBy, @ErrorCode OUT", debitNoteIDParameter, issueForIdParameter, issueForToParameter, invoiceIdParameter, invoiceLineItemsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveDebitNoteTransposeDetails(Nullable<Int64> debitNoteId, Nullable<Int64> transposedByUserId, string transposedBy, string transposeComments, ObjectParameter errorCode)
        {

            var debitNoteIdParameter = debitNoteId.HasValue ?
                new SqlParameter("DebitNoteId", debitNoteId) :
                new SqlParameter("DebitNoteId", SqlDbType.BigInt);

            var transposedByUserIdParameter = transposedByUserId.HasValue ?
                new SqlParameter("TransposedByUserId", transposedByUserId) :
                new SqlParameter("TransposedByUserId", SqlDbType.BigInt);

           var transposedByParameter = new SqlParameter("TransposedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(transposedBy))
           {
               transposedByParameter.IsNullable = true;
               transposedByParameter.Value = DBNull.Value;
           }
           else
           {
               transposedByParameter.Value = transposedBy;
           }

           var transposeCommentsParameter = new SqlParameter("TransposeComments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(transposeComments))
           {
               transposeCommentsParameter.IsNullable = true;
               transposeCommentsParameter.Value = DBNull.Value;
           }
           else
           {
               transposeCommentsParameter.Value = transposeComments;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveDebitNoteTransposeDetails @DebitNoteId, @TransposedByUserId, @TransposedBy, @TransposeComments, @ErrorCode OUT", debitNoteIdParameter, transposedByUserIdParameter, transposedByParameter, transposeCommentsParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveDeliveredAccessGoodsDetails(Nullable<Int64> accessGoodsRequestId, string comments, string issueInfo, Nullable<Int64> activatedByUserId, string activatedBy, ObjectParameter errorCode, Nullable<DateTime> todaysClientDate)
        {

            var accessGoodsRequestIdParameter = accessGoodsRequestId.HasValue ?
                new SqlParameter("AccessGoodsRequestId", accessGoodsRequestId) :
                new SqlParameter("AccessGoodsRequestId", SqlDbType.BigInt);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

            var issueInfoParameter = issueInfo != null ?
                new SqlParameter("IssueInfo", issueInfo) :
                new SqlParameter("IssueInfo", SqlDbType.Xml);

            var activatedByUserIdParameter = activatedByUserId.HasValue ?
                new SqlParameter("ActivatedByUserId", activatedByUserId) :
                new SqlParameter("ActivatedByUserId", SqlDbType.BigInt);

           var activatedByParameter = new SqlParameter("ActivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(activatedBy))
           {
               activatedByParameter.IsNullable = true;
               activatedByParameter.Value = DBNull.Value;
           }
           else
           {
               activatedByParameter.Value = activatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveDeliveredAccessGoodsDetails @AccessGoodsRequestId, @Comments, @IssueInfo, @ActivatedByUserId, @ActivatedBy, @ErrorCode OUT, @TodaysClientDate", accessGoodsRequestIdParameter, commentsParameter, issueInfoParameter, activatedByUserIdParameter, activatedByParameter, errorCodeParameter, todaysClientDateParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveDepartmentDetails(Nullable<Int32> departmentId, string departmentName, string isVendorServiceEnabled, string isActive, string createdBy, ObjectParameter errorCode)
        {

            var departmentIdParameter = departmentId.HasValue ?
                new SqlParameter("DepartmentId", departmentId) :
                new SqlParameter("DepartmentId", SqlDbType.Int);

           var departmentNameParameter = new SqlParameter("DepartmentName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(departmentName))
           {
               departmentNameParameter.IsNullable = true;
               departmentNameParameter.Value = DBNull.Value;
           }
           else
           {
               departmentNameParameter.Value = departmentName;
           }

           var isVendorServiceEnabledParameter = new SqlParameter("IsVendorServiceEnabled", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isVendorServiceEnabled))
           {
               isVendorServiceEnabledParameter.IsNullable = true;
               isVendorServiceEnabledParameter.Value = DBNull.Value;
           }
           else
           {
               isVendorServiceEnabledParameter.Value = isVendorServiceEnabled;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveDepartmentDetails @DepartmentId, @DepartmentName, @IsVendorServiceEnabled, @IsActive, @CreatedBy, @ErrorCode OUT", departmentIdParameter, departmentNameParameter, isVendorServiceEnabledParameter, isActiveParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveDepreciationRequestDetails(ObjectParameter depreciationRequestId, string referenceNumber, Nullable<DateTime> depreciationEntryDate, Nullable<Int32> statusID, string createdBy, Nullable<Int64> depreciationByUserId, ObjectParameter errorCode)
        {

           var depreciationRequestIdParameter = new SqlParameter("DepreciationRequestId", SqlDbType.Int);
               depreciationRequestIdParameter.Direction = System.Data.ParameterDirection.Output;
               depreciationRequestIdParameter.Value = depreciationRequestId != null ? depreciationRequestId.Value : null;

           var referenceNumberParameter = new SqlParameter("ReferenceNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(referenceNumber))
           {
               referenceNumberParameter.IsNullable = true;
               referenceNumberParameter.Value = DBNull.Value;
           }
           else
           {
               referenceNumberParameter.Value = referenceNumber;
           }

            var depreciationEntryDateParameter = depreciationEntryDate.HasValue ?
                new SqlParameter("DepreciationEntryDate", depreciationEntryDate) :
                new SqlParameter("DepreciationEntryDate", SqlDbType.DateTime);

            var statusIDParameter = statusID.HasValue ?
                new SqlParameter("StatusID", statusID) :
                new SqlParameter("StatusID", SqlDbType.Int);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

            var depreciationByUserIdParameter = depreciationByUserId.HasValue ?
                new SqlParameter("DepreciationByUserId", depreciationByUserId) :
                new SqlParameter("DepreciationByUserId", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveDepreciationRequestDetails @DepreciationRequestId OUT, @ReferenceNumber, @DepreciationEntryDate, @StatusID, @CreatedBy, @DepreciationByUserId, @ErrorCode OUT", depreciationRequestIdParameter, referenceNumberParameter, depreciationEntryDateParameter, statusIDParameter, createdByParameter, depreciationByUserIdParameter, errorCodeParameter);

            depreciationRequestId.Value = depreciationRequestIdParameter.Value;
            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveDiscountSetUp(Nullable<Int32> discountSetUpId, string discountCode, string discountDescription, string isActive, Nullable<DateTime> effectiveFrom, string createdBy, ObjectParameter errorCode)
        {

            var discountSetUpIdParameter = discountSetUpId.HasValue ?
                new SqlParameter("DiscountSetUpId", discountSetUpId) :
                new SqlParameter("DiscountSetUpId", SqlDbType.Int);

           var discountCodeParameter = new SqlParameter("DiscountCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(discountCode))
           {
               discountCodeParameter.IsNullable = true;
               discountCodeParameter.Value = DBNull.Value;
           }
           else
           {
               discountCodeParameter.Value = discountCode;
           }

           var discountDescriptionParameter = new SqlParameter("DiscountDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(discountDescription))
           {
               discountDescriptionParameter.IsNullable = true;
               discountDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               discountDescriptionParameter.Value = discountDescription;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

            var effectiveFromParameter = effectiveFrom.HasValue ?
                new SqlParameter("EffectiveFrom", effectiveFrom) :
                new SqlParameter("EffectiveFrom", SqlDbType.DateTime);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveDiscountSetUp @DiscountSetUpId, @DiscountCode, @DiscountDescription, @IsActive, @EffectiveFrom, @CreatedBy, @ErrorCode OUT", discountSetUpIdParameter, discountCodeParameter, discountDescriptionParameter, isActiveParameter, effectiveFromParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int Sp_Dgc_SaveEmailTemplate(Nullable<Int32> templateId, string templateName, string templateSubject, string templateBody, string replaceWords, string createdBy, ObjectParameter errorCode)
        {

            var templateIdParameter = templateId.HasValue ?
                new SqlParameter("TemplateId", templateId) :
                new SqlParameter("TemplateId", SqlDbType.Int);

           var templateNameParameter = new SqlParameter("TemplateName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(templateName))
           {
               templateNameParameter.IsNullable = true;
               templateNameParameter.Value = DBNull.Value;
           }
           else
           {
               templateNameParameter.Value = templateName;
           }

           var templateSubjectParameter = new SqlParameter("TemplateSubject", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(templateSubject))
           {
               templateSubjectParameter.IsNullable = true;
               templateSubjectParameter.Value = DBNull.Value;
           }
           else
           {
               templateSubjectParameter.Value = templateSubject;
           }

           var templateBodyParameter = new SqlParameter("TemplateBody", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(templateBody))
           {
               templateBodyParameter.IsNullable = true;
               templateBodyParameter.Value = DBNull.Value;
           }
           else
           {
               templateBodyParameter.Value = templateBody;
           }

           var replaceWordsParameter = new SqlParameter("ReplaceWords", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(replaceWords))
           {
               replaceWordsParameter.IsNullable = true;
               replaceWordsParameter.Value = DBNull.Value;
           }
           else
           {
               replaceWordsParameter.Value = replaceWords;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("Sp_Dgc_SaveEmailTemplate @TemplateId, @TemplateName, @TemplateSubject, @TemplateBody, @ReplaceWords, @CreatedBy, @ErrorCode OUT", templateIdParameter, templateNameParameter, templateSubjectParameter, templateBodyParameter, replaceWordsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveEmergencyContact(Nullable<Int32> contactId, string contactName, string contactPhoneNumber, string contactEmail, string contactDescription, string isActive, string updatedBy, ObjectParameter errorCode)
        {

            var contactIdParameter = contactId.HasValue ?
                new SqlParameter("ContactId", contactId) :
                new SqlParameter("ContactId", SqlDbType.Int);

           var contactNameParameter = new SqlParameter("ContactName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(contactName))
           {
               contactNameParameter.IsNullable = true;
               contactNameParameter.Value = DBNull.Value;
           }
           else
           {
               contactNameParameter.Value = contactName;
           }

           var contactPhoneNumberParameter = new SqlParameter("ContactPhoneNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(contactPhoneNumber))
           {
               contactPhoneNumberParameter.IsNullable = true;
               contactPhoneNumberParameter.Value = DBNull.Value;
           }
           else
           {
               contactPhoneNumberParameter.Value = contactPhoneNumber;
           }

           var contactEmailParameter = new SqlParameter("ContactEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(contactEmail))
           {
               contactEmailParameter.IsNullable = true;
               contactEmailParameter.Value = DBNull.Value;
           }
           else
           {
               contactEmailParameter.Value = contactEmail;
           }

           var contactDescriptionParameter = new SqlParameter("ContactDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(contactDescription))
           {
               contactDescriptionParameter.IsNullable = true;
               contactDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               contactDescriptionParameter.Value = contactDescription;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveEmergencyContact @ContactId, @ContactName, @ContactPhoneNumber, @ContactEmail, @ContactDescription, @IsActive, @UpdatedBy, @ErrorCode OUT", contactIdParameter, contactNameParameter, contactPhoneNumberParameter, contactEmailParameter, contactDescriptionParameter, isActiveParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveFacilitiesBooking(Nullable<Int64> facilitiesId, Nullable<Int32> courtID, Nullable<Int32> gameId, Nullable<Int32> uintId, Nullable<Int64> livingMemberUserId, string otherPersonName, Nullable<DateTime> bookingDate, string fromTime, string totime, Nullable<Int32> numberOfPeoples, string updatedBy, ObjectParameter errorCode)
        {

            var facilitiesIdParameter = facilitiesId.HasValue ?
                new SqlParameter("FacilitiesId", facilitiesId) :
                new SqlParameter("FacilitiesId", SqlDbType.BigInt);

            var courtIDParameter = courtID.HasValue ?
                new SqlParameter("CourtID", courtID) :
                new SqlParameter("CourtID", SqlDbType.Int);

            var gameIdParameter = gameId.HasValue ?
                new SqlParameter("GameId", gameId) :
                new SqlParameter("GameId", SqlDbType.Int);

            var uintIdParameter = uintId.HasValue ?
                new SqlParameter("UintId", uintId) :
                new SqlParameter("UintId", SqlDbType.Int);

            var livingMemberUserIdParameter = livingMemberUserId.HasValue ?
                new SqlParameter("LivingMemberUserId", livingMemberUserId) :
                new SqlParameter("LivingMemberUserId", SqlDbType.BigInt);

           var otherPersonNameParameter = new SqlParameter("OtherPersonName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(otherPersonName))
           {
               otherPersonNameParameter.IsNullable = true;
               otherPersonNameParameter.Value = DBNull.Value;
           }
           else
           {
               otherPersonNameParameter.Value = otherPersonName;
           }

            var bookingDateParameter = bookingDate.HasValue ?
                new SqlParameter("BookingDate", bookingDate) :
                new SqlParameter("BookingDate", SqlDbType.DateTime);

           var fromTimeParameter = new SqlParameter("FromTime", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(fromTime))
           {
               fromTimeParameter.IsNullable = true;
               fromTimeParameter.Value = DBNull.Value;
           }
           else
           {
               fromTimeParameter.Value = fromTime;
           }

           var totimeParameter = new SqlParameter("Totime", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(totime))
           {
               totimeParameter.IsNullable = true;
               totimeParameter.Value = DBNull.Value;
           }
           else
           {
               totimeParameter.Value = totime;
           }

            var numberOfPeoplesParameter = numberOfPeoples.HasValue ?
                new SqlParameter("NumberOfPeoples", numberOfPeoples) :
                new SqlParameter("NumberOfPeoples", SqlDbType.Int);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveFacilitiesBooking @FacilitiesId, @CourtID, @GameId, @UintId, @LivingMemberUserId, @OtherPersonName, @BookingDate, @FromTime, @Totime, @NumberOfPeoples, @UpdatedBy, @ErrorCode OUT", facilitiesIdParameter, courtIDParameter, gameIdParameter, uintIdParameter, livingMemberUserIdParameter, otherPersonNameParameter, bookingDateParameter, fromTimeParameter, totimeParameter, numberOfPeoplesParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveFacilitiesBookingRequest(Nullable<Int64> facilitiesId, Nullable<Int32> courtID, Nullable<Int32> gameId, Nullable<Int32> uintId, Nullable<Int64> livingMemberUserId, string otherPersonName, Nullable<DateTime> bookingDate, string fromTime, string totime, Nullable<Int32> numberOfPeoples, string updatedBy, ObjectParameter errorCode, ObjectParameter facilitiesBookingId, ObjectParameter livingMemberCentralUserId)
        {

            var facilitiesIdParameter = facilitiesId.HasValue ?
                new SqlParameter("FacilitiesId", facilitiesId) :
                new SqlParameter("FacilitiesId", SqlDbType.BigInt);

            var courtIDParameter = courtID.HasValue ?
                new SqlParameter("CourtID", courtID) :
                new SqlParameter("CourtID", SqlDbType.Int);

            var gameIdParameter = gameId.HasValue ?
                new SqlParameter("GameId", gameId) :
                new SqlParameter("GameId", SqlDbType.Int);

            var uintIdParameter = uintId.HasValue ?
                new SqlParameter("UintId", uintId) :
                new SqlParameter("UintId", SqlDbType.Int);

            var livingMemberUserIdParameter = livingMemberUserId.HasValue ?
                new SqlParameter("LivingMemberUserId", livingMemberUserId) :
                new SqlParameter("LivingMemberUserId", SqlDbType.BigInt);

           var otherPersonNameParameter = new SqlParameter("OtherPersonName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(otherPersonName))
           {
               otherPersonNameParameter.IsNullable = true;
               otherPersonNameParameter.Value = DBNull.Value;
           }
           else
           {
               otherPersonNameParameter.Value = otherPersonName;
           }

            var bookingDateParameter = bookingDate.HasValue ?
                new SqlParameter("BookingDate", bookingDate) :
                new SqlParameter("BookingDate", SqlDbType.DateTime);

           var fromTimeParameter = new SqlParameter("FromTime", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(fromTime))
           {
               fromTimeParameter.IsNullable = true;
               fromTimeParameter.Value = DBNull.Value;
           }
           else
           {
               fromTimeParameter.Value = fromTime;
           }

           var totimeParameter = new SqlParameter("Totime", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(totime))
           {
               totimeParameter.IsNullable = true;
               totimeParameter.Value = DBNull.Value;
           }
           else
           {
               totimeParameter.Value = totime;
           }

            var numberOfPeoplesParameter = numberOfPeoples.HasValue ?
                new SqlParameter("NumberOfPeoples", numberOfPeoples) :
                new SqlParameter("NumberOfPeoples", SqlDbType.Int);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var facilitiesBookingIdParameter = new SqlParameter("FacilitiesBookingId", SqlDbType.BigInt);
               facilitiesBookingIdParameter.Direction = System.Data.ParameterDirection.Output;
               facilitiesBookingIdParameter.Value = facilitiesBookingId != null ? facilitiesBookingId.Value : null;

           var livingMemberCentralUserIdParameter = new SqlParameter("LivingMemberCentralUserId", SqlDbType.BigInt);
               livingMemberCentralUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               livingMemberCentralUserIdParameter.Value = livingMemberCentralUserId != null ? livingMemberCentralUserId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveFacilitiesBookingRequest @FacilitiesId, @CourtID, @GameId, @UintId, @LivingMemberUserId, @OtherPersonName, @BookingDate, @FromTime, @Totime, @NumberOfPeoples, @UpdatedBy, @ErrorCode OUT, @FacilitiesBookingId OUT, @LivingMemberCentralUserId OUT", facilitiesIdParameter, courtIDParameter, gameIdParameter, uintIdParameter, livingMemberUserIdParameter, otherPersonNameParameter, bookingDateParameter, fromTimeParameter, totimeParameter, numberOfPeoplesParameter, updatedByParameter, errorCodeParameter, facilitiesBookingIdParameter, livingMemberCentralUserIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            facilitiesBookingId.Value = facilitiesBookingIdParameter.Value;
            livingMemberCentralUserId.Value = livingMemberCentralUserIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveFacilityBookingRequestActionDetails(Nullable<Int32> condoFacilityBookingId, Nullable<Int32> requestStatusId, string paymentInfo, string comments, string additionalReferenceFilePath, Nullable<Int64> actionTakenByUserId, string updatedBY, ObjectParameter errorCode, Nullable<Int32> previousStatusID, Nullable<DateTime> todaysClientDate, ObjectParameter facilityBookingRequestActionId)
        {

            var condoFacilityBookingIdParameter = condoFacilityBookingId.HasValue ?
                new SqlParameter("CondoFacilityBookingId", condoFacilityBookingId) :
                new SqlParameter("CondoFacilityBookingId", SqlDbType.Int);

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var additionalReferenceFilePathParameter = new SqlParameter("AdditionalReferenceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferenceFilePath))
           {
               additionalReferenceFilePathParameter.IsNullable = true;
               additionalReferenceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferenceFilePathParameter.Value = additionalReferenceFilePath;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);

           var facilityBookingRequestActionIdParameter = new SqlParameter("FacilityBookingRequestActionId", SqlDbType.BigInt);
               facilityBookingRequestActionIdParameter.Direction = System.Data.ParameterDirection.Output;
               facilityBookingRequestActionIdParameter.Value = facilityBookingRequestActionId != null ? facilityBookingRequestActionId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveFacilityBookingRequestActionDetails @CondoFacilityBookingId, @RequestStatusId, @PaymentInfo, @Comments, @AdditionalReferenceFilePath, @ActionTakenByUserId, @UpdatedBY, @ErrorCode OUT, @PreviousStatusID, @TodaysClientDate, @FacilityBookingRequestActionId OUT", condoFacilityBookingIdParameter, requestStatusIdParameter, paymentInfoParameter, commentsParameter, additionalReferenceFilePathParameter, actionTakenByUserIdParameter, updatedBYParameter, errorCodeParameter, previousStatusIDParameter, todaysClientDateParameter, facilityBookingRequestActionIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            facilityBookingRequestActionId.Value = facilityBookingRequestActionIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveFacilityCourtDetails(Nullable<Int32> courtID, Nullable<Int32> facilityId, string courtName, string courtDescription, Nullable<Int32> maxNumberOfPeople, Nullable<Int32> minNumberOfPeople, string shutDownDates, string daysTiming, Nullable<DateTime> effectiveFrom, string isActive, string createdBy, string isAllowMultipleBookingsForTimeSlot, ObjectParameter errorCode)
        {

            var courtIDParameter = courtID.HasValue ?
                new SqlParameter("CourtID", courtID) :
                new SqlParameter("CourtID", SqlDbType.Int);

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);

           var courtNameParameter = new SqlParameter("CourtName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(courtName))
           {
               courtNameParameter.IsNullable = true;
               courtNameParameter.Value = DBNull.Value;
           }
           else
           {
               courtNameParameter.Value = courtName;
           }

           var courtDescriptionParameter = new SqlParameter("CourtDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(courtDescription))
           {
               courtDescriptionParameter.IsNullable = true;
               courtDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               courtDescriptionParameter.Value = courtDescription;
           }

            var maxNumberOfPeopleParameter = maxNumberOfPeople.HasValue ?
                new SqlParameter("MaxNumberOfPeople", maxNumberOfPeople) :
                new SqlParameter("MaxNumberOfPeople", SqlDbType.Int);

            var minNumberOfPeopleParameter = minNumberOfPeople.HasValue ?
                new SqlParameter("MinNumberOfPeople", minNumberOfPeople) :
                new SqlParameter("MinNumberOfPeople", SqlDbType.Int);

            var shutDownDatesParameter = shutDownDates != null ?
                new SqlParameter("ShutDownDates", shutDownDates) :
                new SqlParameter("ShutDownDates", SqlDbType.Xml);

            var daysTimingParameter = daysTiming != null ?
                new SqlParameter("DaysTiming", daysTiming) :
                new SqlParameter("DaysTiming", SqlDbType.Xml);

            var effectiveFromParameter = effectiveFrom.HasValue ?
                new SqlParameter("EffectiveFrom", effectiveFrom) :
                new SqlParameter("EffectiveFrom", SqlDbType.DateTime);

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var isAllowMultipleBookingsForTimeSlotParameter = new SqlParameter("IsAllowMultipleBookingsForTimeSlot", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isAllowMultipleBookingsForTimeSlot))
           {
               isAllowMultipleBookingsForTimeSlotParameter.IsNullable = true;
               isAllowMultipleBookingsForTimeSlotParameter.Value = DBNull.Value;
           }
           else
           {
               isAllowMultipleBookingsForTimeSlotParameter.Value = isAllowMultipleBookingsForTimeSlot;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveFacilityCourtDetails @CourtID, @FacilityId, @CourtName, @CourtDescription, @MaxNumberOfPeople, @MinNumberOfPeople, @ShutDownDates, @DaysTiming, @EffectiveFrom, @IsActive, @CreatedBy, @IsAllowMultipleBookingsForTimeSlot, @ErrorCode OUT", courtIDParameter, facilityIdParameter, courtNameParameter, courtDescriptionParameter, maxNumberOfPeopleParameter, minNumberOfPeopleParameter, shutDownDatesParameter, daysTimingParameter, effectiveFromParameter, isActiveParameter, createdByParameter, isAllowMultipleBookingsForTimeSlotParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveFacilityDetails(Nullable<Int32> facilityId, string facilityName, string facilityDescription, Nullable<Int32> facilityCategoryConfigKey, string allowedPackageConfigKeys, string isPaid, Nullable<DateTime> effectiveFrom, string isActive, string gallaryImages, string updatedBy, ObjectParameter errorCode)
        {

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);

           var facilityNameParameter = new SqlParameter("FacilityName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(facilityName))
           {
               facilityNameParameter.IsNullable = true;
               facilityNameParameter.Value = DBNull.Value;
           }
           else
           {
               facilityNameParameter.Value = facilityName;
           }

           var facilityDescriptionParameter = new SqlParameter("FacilityDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(facilityDescription))
           {
               facilityDescriptionParameter.IsNullable = true;
               facilityDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               facilityDescriptionParameter.Value = facilityDescription;
           }

            var facilityCategoryConfigKeyParameter = facilityCategoryConfigKey.HasValue ?
                new SqlParameter("FacilityCategoryConfigKey", facilityCategoryConfigKey) :
                new SqlParameter("FacilityCategoryConfigKey", SqlDbType.Int);

           var allowedPackageConfigKeysParameter = new SqlParameter("AllowedPackageConfigKeys", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(allowedPackageConfigKeys))
           {
               allowedPackageConfigKeysParameter.IsNullable = true;
               allowedPackageConfigKeysParameter.Value = DBNull.Value;
           }
           else
           {
               allowedPackageConfigKeysParameter.Value = allowedPackageConfigKeys;
           }

           var isPaidParameter = new SqlParameter("IsPaid", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isPaid))
           {
               isPaidParameter.IsNullable = true;
               isPaidParameter.Value = DBNull.Value;
           }
           else
           {
               isPaidParameter.Value = isPaid;
           }

            var effectiveFromParameter = effectiveFrom.HasValue ?
                new SqlParameter("EffectiveFrom", effectiveFrom) :
                new SqlParameter("EffectiveFrom", SqlDbType.DateTime);

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var gallaryImagesParameter = new SqlParameter("GallaryImages", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(gallaryImages))
           {
               gallaryImagesParameter.IsNullable = true;
               gallaryImagesParameter.Value = DBNull.Value;
           }
           else
           {
               gallaryImagesParameter.Value = gallaryImages;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveFacilityDetails @FacilityId, @FacilityName, @FacilityDescription, @FacilityCategoryConfigKey, @AllowedPackageConfigKeys, @IsPaid, @EffectiveFrom, @IsActive, @GallaryImages, @UpdatedBy, @ErrorCode OUT", facilityIdParameter, facilityNameParameter, facilityDescriptionParameter, facilityCategoryConfigKeyParameter, allowedPackageConfigKeysParameter, isPaidParameter, effectiveFromParameter, isActiveParameter, gallaryImagesParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveFacilityLineFeeDetails(Nullable<Int64> facilityId, string facilityPriceInfo, string updatedBy, ObjectParameter errorCode)
        {

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.BigInt);

            var facilityPriceInfoParameter = facilityPriceInfo != null ?
                new SqlParameter("FacilityPriceInfo", facilityPriceInfo) :
                new SqlParameter("FacilityPriceInfo", SqlDbType.Xml);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveFacilityLineFeeDetails @FacilityId, @FacilityPriceInfo, @UpdatedBy, @ErrorCode OUT", facilityIdParameter, facilityPriceInfoParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveFacilityLocationDetails(Nullable<Int32> locationID, Nullable<Int32> facilitiesId, string locationName, string locationDescription, string shutDownDates, string isActive, string createdBy, string isAllowMultipleBookingsForTimeSlot, ObjectParameter errorCode)
        {

            var locationIDParameter = locationID.HasValue ?
                new SqlParameter("LocationID", locationID) :
                new SqlParameter("LocationID", SqlDbType.Int);

            var facilitiesIdParameter = facilitiesId.HasValue ?
                new SqlParameter("FacilitiesId", facilitiesId) :
                new SqlParameter("FacilitiesId", SqlDbType.Int);

           var locationNameParameter = new SqlParameter("LocationName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(locationName))
           {
               locationNameParameter.IsNullable = true;
               locationNameParameter.Value = DBNull.Value;
           }
           else
           {
               locationNameParameter.Value = locationName;
           }

           var locationDescriptionParameter = new SqlParameter("LocationDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(locationDescription))
           {
               locationDescriptionParameter.IsNullable = true;
               locationDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               locationDescriptionParameter.Value = locationDescription;
           }

            var shutDownDatesParameter = shutDownDates != null ?
                new SqlParameter("ShutDownDates", shutDownDates) :
                new SqlParameter("ShutDownDates", SqlDbType.Xml);

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var isAllowMultipleBookingsForTimeSlotParameter = new SqlParameter("IsAllowMultipleBookingsForTimeSlot", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isAllowMultipleBookingsForTimeSlot))
           {
               isAllowMultipleBookingsForTimeSlotParameter.IsNullable = true;
               isAllowMultipleBookingsForTimeSlotParameter.Value = DBNull.Value;
           }
           else
           {
               isAllowMultipleBookingsForTimeSlotParameter.Value = isAllowMultipleBookingsForTimeSlot;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveFacilityLocationDetails @LocationID, @FacilitiesId, @LocationName, @LocationDescription, @ShutDownDates, @IsActive, @CreatedBy, @IsAllowMultipleBookingsForTimeSlot, @ErrorCode OUT", locationIDParameter, facilitiesIdParameter, locationNameParameter, locationDescriptionParameter, shutDownDatesParameter, isActiveParameter, createdByParameter, isAllowMultipleBookingsForTimeSlotParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveFacilitySlotSettingDetails(string slotSetting, string createdBy, ObjectParameter errorCode)
        {

            var slotSettingParameter = slotSetting != null ?
                new SqlParameter("SlotSetting", slotSetting) :
                new SqlParameter("SlotSetting", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveFacilitySlotSettingDetails @SlotSetting, @CreatedBy, @ErrorCode OUT", slotSettingParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveFcmNotificationDetails(Nullable<Int32> fcmNotificationId, string controllerName, string actionName, Nullable<Int32> statusId, string message, string title, string createdBy, ObjectParameter errorCode)
        {

            var fcmNotificationIdParameter = fcmNotificationId.HasValue ?
                new SqlParameter("FcmNotificationId", fcmNotificationId) :
                new SqlParameter("FcmNotificationId", SqlDbType.Int);

           var controllerNameParameter = new SqlParameter("ControllerName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(controllerName))
           {
               controllerNameParameter.IsNullable = true;
               controllerNameParameter.Value = DBNull.Value;
           }
           else
           {
               controllerNameParameter.Value = controllerName;
           }

           var actionNameParameter = new SqlParameter("ActionName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(actionName))
           {
               actionNameParameter.IsNullable = true;
               actionNameParameter.Value = DBNull.Value;
           }
           else
           {
               actionNameParameter.Value = actionName;
           }

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

           var messageParameter = new SqlParameter("Message", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(message))
           {
               messageParameter.IsNullable = true;
               messageParameter.Value = DBNull.Value;
           }
           else
           {
               messageParameter.Value = message;
           }

           var titleParameter = new SqlParameter("Title", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(title))
           {
               titleParameter.IsNullable = true;
               titleParameter.Value = DBNull.Value;
           }
           else
           {
               titleParameter.Value = title;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveFcmNotificationDetails @FcmNotificationId, @ControllerName, @ActionName, @StatusId, @Message, @Title, @CreatedBy, @ErrorCode OUT", fcmNotificationIdParameter, controllerNameParameter, actionNameParameter, statusIdParameter, messageParameter, titleParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveFinancialPeriodDetails(Nullable<Int32> financialPeriodId, string periodName, Nullable<DateTime> fiscalPeriodStartDate, Nullable<DateTime> fiscalPeriodEndDate, string createdBy, ObjectParameter errorCode)
        {

            var financialPeriodIdParameter = financialPeriodId.HasValue ?
                new SqlParameter("FinancialPeriodId", financialPeriodId) :
                new SqlParameter("FinancialPeriodId", SqlDbType.Int);

           var periodNameParameter = new SqlParameter("PeriodName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(periodName))
           {
               periodNameParameter.IsNullable = true;
               periodNameParameter.Value = DBNull.Value;
           }
           else
           {
               periodNameParameter.Value = periodName;
           }

            var fiscalPeriodStartDateParameter = fiscalPeriodStartDate.HasValue ?
                new SqlParameter("FiscalPeriodStartDate", fiscalPeriodStartDate) :
                new SqlParameter("FiscalPeriodStartDate", SqlDbType.DateTime);

            var fiscalPeriodEndDateParameter = fiscalPeriodEndDate.HasValue ?
                new SqlParameter("FiscalPeriodEndDate", fiscalPeriodEndDate) :
                new SqlParameter("FiscalPeriodEndDate", SqlDbType.DateTime);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveFinancialPeriodDetails @FinancialPeriodId, @PeriodName, @FiscalPeriodStartDate, @FiscalPeriodEndDate, @CreatedBy, @ErrorCode OUT", financialPeriodIdParameter, periodNameParameter, fiscalPeriodStartDateParameter, fiscalPeriodEndDateParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveFloorSettings(Nullable<Int32> floorId, string floorNo, Nullable<Int32> blockId, string isActive, string updatedBy, ObjectParameter errorCode)
        {

            var floorIdParameter = floorId.HasValue ?
                new SqlParameter("FloorId", floorId) :
                new SqlParameter("FloorId", SqlDbType.Int);

           var floorNoParameter = new SqlParameter("FloorNo", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(floorNo))
           {
               floorNoParameter.IsNullable = true;
               floorNoParameter.Value = DBNull.Value;
           }
           else
           {
               floorNoParameter.Value = floorNo;
           }

            var blockIdParameter = blockId.HasValue ?
                new SqlParameter("BlockId", blockId) :
                new SqlParameter("BlockId", SqlDbType.Int);

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveFloorSettings @FloorId, @FloorNo, @BlockId, @IsActive, @UpdatedBy, @ErrorCode OUT", floorIdParameter, floorNoParameter, blockIdParameter, isActiveParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveGasConsumeDetails(Nullable<Int64> meterReadingId, Nullable<Int32> unitId, Nullable<DateTime> periodFrom, Nullable<DateTime> periodTo, string readingTime, string monthOfReading, Nullable<Int64> previousReading, Nullable<Int64> currentReading, Nullable<Int64> consumedUnits, Nullable<Int32> statusId, Nullable<Int64> readingTakenByUserId, string updatedBy, ObjectParameter errorCode)
        {

            var meterReadingIdParameter = meterReadingId.HasValue ?
                new SqlParameter("MeterReadingId", meterReadingId) :
                new SqlParameter("MeterReadingId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var periodFromParameter = periodFrom.HasValue ?
                new SqlParameter("PeriodFrom", periodFrom) :
                new SqlParameter("PeriodFrom", SqlDbType.DateTime);

            var periodToParameter = periodTo.HasValue ?
                new SqlParameter("PeriodTo", periodTo) :
                new SqlParameter("PeriodTo", SqlDbType.DateTime);

           var readingTimeParameter = new SqlParameter("ReadingTime", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(readingTime))
           {
               readingTimeParameter.IsNullable = true;
               readingTimeParameter.Value = DBNull.Value;
           }
           else
           {
               readingTimeParameter.Value = readingTime;
           }

           var monthOfReadingParameter = new SqlParameter("MonthOfReading", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(monthOfReading))
           {
               monthOfReadingParameter.IsNullable = true;
               monthOfReadingParameter.Value = DBNull.Value;
           }
           else
           {
               monthOfReadingParameter.Value = monthOfReading;
           }

            var previousReadingParameter = previousReading.HasValue ?
                new SqlParameter("PreviousReading", previousReading) :
                new SqlParameter("PreviousReading", SqlDbType.BigInt);

            var currentReadingParameter = currentReading.HasValue ?
                new SqlParameter("CurrentReading", currentReading) :
                new SqlParameter("CurrentReading", SqlDbType.BigInt);

            var consumedUnitsParameter = consumedUnits.HasValue ?
                new SqlParameter("ConsumedUnits", consumedUnits) :
                new SqlParameter("ConsumedUnits", SqlDbType.BigInt);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

            var readingTakenByUserIdParameter = readingTakenByUserId.HasValue ?
                new SqlParameter("ReadingTakenByUserId", readingTakenByUserId) :
                new SqlParameter("ReadingTakenByUserId", SqlDbType.BigInt);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveGasConsumeDetails @MeterReadingId, @UnitId, @PeriodFrom, @PeriodTo, @ReadingTime, @MonthOfReading, @PreviousReading, @CurrentReading, @ConsumedUnits, @StatusId, @ReadingTakenByUserId, @UpdatedBy, @ErrorCode OUT", meterReadingIdParameter, unitIdParameter, periodFromParameter, periodToParameter, readingTimeParameter, monthOfReadingParameter, previousReadingParameter, currentReadingParameter, consumedUnitsParameter, statusIdParameter, readingTakenByUserIdParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveGeneralLedgerEntryDetails(Nullable<Int64> generalLedgerId, Nullable<Int32> fromGLAccountItemid, Nullable<Int32> toGLAccountItemId, Nullable<DateTime> transactionDate, string transactionReason, Nullable<Decimal> glAmount, string createdBy, ObjectParameter errorCode)
        {

            var generalLedgerIdParameter = generalLedgerId.HasValue ?
                new SqlParameter("GeneralLedgerId", generalLedgerId) :
                new SqlParameter("GeneralLedgerId", SqlDbType.BigInt);

            var fromGLAccountItemidParameter = fromGLAccountItemid.HasValue ?
                new SqlParameter("FromGLAccountItemid", fromGLAccountItemid) :
                new SqlParameter("FromGLAccountItemid", SqlDbType.Int);

            var toGLAccountItemIdParameter = toGLAccountItemId.HasValue ?
                new SqlParameter("ToGLAccountItemId", toGLAccountItemId) :
                new SqlParameter("ToGLAccountItemId", SqlDbType.Int);

            var transactionDateParameter = transactionDate.HasValue ?
                new SqlParameter("TransactionDate", transactionDate) :
                new SqlParameter("TransactionDate", SqlDbType.DateTime);

           var transactionReasonParameter = new SqlParameter("TransactionReason", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(transactionReason))
           {
               transactionReasonParameter.IsNullable = true;
               transactionReasonParameter.Value = DBNull.Value;
           }
           else
           {
               transactionReasonParameter.Value = transactionReason;
           }

            var glAmountParameter = glAmount.HasValue ?
                new SqlParameter("GlAmount", glAmount) :
                new SqlParameter("GlAmount", SqlDbType.Decimal);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveGeneralLedgerEntryDetails @GeneralLedgerId, @FromGLAccountItemid, @ToGLAccountItemId, @TransactionDate, @TransactionReason, @GlAmount, @CreatedBy, @ErrorCode OUT", generalLedgerIdParameter, fromGLAccountItemidParameter, toGLAccountItemIdParameter, transactionDateParameter, transactionReasonParameter, glAmountParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveGlAccountItems(Nullable<Int32> accountItemId, Nullable<Int32> typeOfAccount, string itemName, Nullable<Int32> accountItemNo, string itemCode, Nullable<DateTime> startDate, string createdBy, ObjectParameter errorCode)
        {

            var accountItemIdParameter = accountItemId.HasValue ?
                new SqlParameter("AccountItemId", accountItemId) :
                new SqlParameter("AccountItemId", SqlDbType.Int);

            var typeOfAccountParameter = typeOfAccount.HasValue ?
                new SqlParameter("TypeOfAccount", typeOfAccount) :
                new SqlParameter("TypeOfAccount", SqlDbType.Int);

           var itemNameParameter = new SqlParameter("ItemName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(itemName))
           {
               itemNameParameter.IsNullable = true;
               itemNameParameter.Value = DBNull.Value;
           }
           else
           {
               itemNameParameter.Value = itemName;
           }

            var accountItemNoParameter = accountItemNo.HasValue ?
                new SqlParameter("AccountItemNo", accountItemNo) :
                new SqlParameter("AccountItemNo", SqlDbType.Int);

           var itemCodeParameter = new SqlParameter("ItemCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(itemCode))
           {
               itemCodeParameter.IsNullable = true;
               itemCodeParameter.Value = DBNull.Value;
           }
           else
           {
               itemCodeParameter.Value = itemCode;
           }

            var startDateParameter = startDate.HasValue ?
                new SqlParameter("StartDate", startDate) :
                new SqlParameter("StartDate", SqlDbType.DateTime);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveGlAccountItems @AccountItemId, @TypeOfAccount, @ItemName, @AccountItemNo, @ItemCode, @StartDate, @CreatedBy, @ErrorCode OUT", accountItemIdParameter, typeOfAccountParameter, itemNameParameter, accountItemNoParameter, itemCodeParameter, startDateParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveGlAccountItemsMapping(Nullable<Int32> accountItemId, Nullable<Int32> typeOfAccount, string itemName, Nullable<Int32> accountItemNo, string itemCode, Nullable<DateTime> startDate, string crOrDb, Nullable<Int32> itemRequestId, string gLItemMappingType, string createdBy, ObjectParameter errorCode)
        {

            var accountItemIdParameter = accountItemId.HasValue ?
                new SqlParameter("AccountItemId", accountItemId) :
                new SqlParameter("AccountItemId", SqlDbType.Int);

            var typeOfAccountParameter = typeOfAccount.HasValue ?
                new SqlParameter("TypeOfAccount", typeOfAccount) :
                new SqlParameter("TypeOfAccount", SqlDbType.Int);

           var itemNameParameter = new SqlParameter("ItemName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(itemName))
           {
               itemNameParameter.IsNullable = true;
               itemNameParameter.Value = DBNull.Value;
           }
           else
           {
               itemNameParameter.Value = itemName;
           }

            var accountItemNoParameter = accountItemNo.HasValue ?
                new SqlParameter("AccountItemNo", accountItemNo) :
                new SqlParameter("AccountItemNo", SqlDbType.Int);

           var itemCodeParameter = new SqlParameter("ItemCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(itemCode))
           {
               itemCodeParameter.IsNullable = true;
               itemCodeParameter.Value = DBNull.Value;
           }
           else
           {
               itemCodeParameter.Value = itemCode;
           }

            var startDateParameter = startDate.HasValue ?
                new SqlParameter("StartDate", startDate) :
                new SqlParameter("StartDate", SqlDbType.DateTime);

           var crOrDbParameter = new SqlParameter("CrOrDb", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(crOrDb))
           {
               crOrDbParameter.IsNullable = true;
               crOrDbParameter.Value = DBNull.Value;
           }
           else
           {
               crOrDbParameter.Value = crOrDb;
           }

            var itemRequestIdParameter = itemRequestId.HasValue ?
                new SqlParameter("ItemRequestId", itemRequestId) :
                new SqlParameter("ItemRequestId", SqlDbType.Int);

           var gLItemMappingTypeParameter = new SqlParameter("GLItemMappingType", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(gLItemMappingType))
           {
               gLItemMappingTypeParameter.IsNullable = true;
               gLItemMappingTypeParameter.Value = DBNull.Value;
           }
           else
           {
               gLItemMappingTypeParameter.Value = gLItemMappingType;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveGlAccountItemsMapping @AccountItemId, @TypeOfAccount, @ItemName, @AccountItemNo, @ItemCode, @StartDate, @CrOrDb, @ItemRequestId, @GLItemMappingType, @CreatedBy, @ErrorCode OUT", accountItemIdParameter, typeOfAccountParameter, itemNameParameter, accountItemNoParameter, itemCodeParameter, startDateParameter, crOrDbParameter, itemRequestIdParameter, gLItemMappingTypeParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveGlGroupDetails(Nullable<Int32> accountId, string accountName, string accountDescription, string accountCode, string accountDisplayName, Nullable<Int32> startingAccountNumber, Nullable<Int32> endingAccountNumber, string prefix, string subscriptionId, string crOrDb, string createdBy, ObjectParameter errorCode)
        {

            var accountIdParameter = accountId.HasValue ?
                new SqlParameter("AccountId", accountId) :
                new SqlParameter("AccountId", SqlDbType.Int);

           var accountNameParameter = new SqlParameter("AccountName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(accountName))
           {
               accountNameParameter.IsNullable = true;
               accountNameParameter.Value = DBNull.Value;
           }
           else
           {
               accountNameParameter.Value = accountName;
           }

           var accountDescriptionParameter = new SqlParameter("AccountDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(accountDescription))
           {
               accountDescriptionParameter.IsNullable = true;
               accountDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               accountDescriptionParameter.Value = accountDescription;
           }

           var accountCodeParameter = new SqlParameter("AccountCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(accountCode))
           {
               accountCodeParameter.IsNullable = true;
               accountCodeParameter.Value = DBNull.Value;
           }
           else
           {
               accountCodeParameter.Value = accountCode;
           }

           var accountDisplayNameParameter = new SqlParameter("AccountDisplayName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(accountDisplayName))
           {
               accountDisplayNameParameter.IsNullable = true;
               accountDisplayNameParameter.Value = DBNull.Value;
           }
           else
           {
               accountDisplayNameParameter.Value = accountDisplayName;
           }

            var startingAccountNumberParameter = startingAccountNumber.HasValue ?
                new SqlParameter("StartingAccountNumber", startingAccountNumber) :
                new SqlParameter("StartingAccountNumber", SqlDbType.Int);

            var endingAccountNumberParameter = endingAccountNumber.HasValue ?
                new SqlParameter("EndingAccountNumber", endingAccountNumber) :
                new SqlParameter("EndingAccountNumber", SqlDbType.Int);

           var prefixParameter = new SqlParameter("Prefix", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(prefix))
           {
               prefixParameter.IsNullable = true;
               prefixParameter.Value = DBNull.Value;
           }
           else
           {
               prefixParameter.Value = prefix;
           }

           var subscriptionIdParameter = new SqlParameter("SubscriptionId", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(subscriptionId))
           {
               subscriptionIdParameter.IsNullable = true;
               subscriptionIdParameter.Value = DBNull.Value;
           }
           else
           {
               subscriptionIdParameter.Value = subscriptionId;
           }

           var crOrDbParameter = new SqlParameter("CrOrDb", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(crOrDb))
           {
               crOrDbParameter.IsNullable = true;
               crOrDbParameter.Value = DBNull.Value;
           }
           else
           {
               crOrDbParameter.Value = crOrDb;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveGlGroupDetails @AccountId, @AccountName, @AccountDescription, @AccountCode, @AccountDisplayName, @StartingAccountNumber, @EndingAccountNumber, @Prefix, @SubscriptionId, @CrOrDb, @CreatedBy, @ErrorCode OUT", accountIdParameter, accountNameParameter, accountDescriptionParameter, accountCodeParameter, accountDisplayNameParameter, startingAccountNumberParameter, endingAccountNumberParameter, prefixParameter, subscriptionIdParameter, crOrDbParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveGoodsPriceDetails(string goodsPriceInfo, Nullable<DateTime> updatedBy, ObjectParameter errorCode)
        {

            var goodsPriceInfoParameter = goodsPriceInfo != null ?
                new SqlParameter("GoodsPriceInfo", goodsPriceInfo) :
                new SqlParameter("GoodsPriceInfo", SqlDbType.Xml);

            var updatedByParameter = updatedBy.HasValue ?
                new SqlParameter("UpdatedBy", updatedBy) :
                new SqlParameter("UpdatedBy", SqlDbType.DateTime);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveGoodsPriceDetails @GoodsPriceInfo, @UpdatedBy, @ErrorCode OUT", goodsPriceInfoParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveHallBookingRequest(Nullable<Int64> hallBookingRequestId, string requestFor, Nullable<Int32> unitId, Nullable<Int64> livingMemberUserId, Nullable<DateTime> bookingDate, Nullable<Decimal> depositAmount, Nullable<Decimal> rentAmount, string puproseOfBooking, Nullable<Int64> depositPriceId, Nullable<Int64> rentPriceId, Nullable<Int32> statusId, Nullable<Int64> requestByUserId, string updatedBy, ObjectParameter errorCode)
        {

            var hallBookingRequestIdParameter = hallBookingRequestId.HasValue ?
                new SqlParameter("HallBookingRequestId", hallBookingRequestId) :
                new SqlParameter("HallBookingRequestId", SqlDbType.BigInt);

           var requestForParameter = new SqlParameter("RequestFor", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(requestFor))
           {
               requestForParameter.IsNullable = true;
               requestForParameter.Value = DBNull.Value;
           }
           else
           {
               requestForParameter.Value = requestFor;
           }

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var livingMemberUserIdParameter = livingMemberUserId.HasValue ?
                new SqlParameter("livingMemberUserId", livingMemberUserId) :
                new SqlParameter("livingMemberUserId", SqlDbType.BigInt);

            var bookingDateParameter = bookingDate.HasValue ?
                new SqlParameter("BookingDate", bookingDate) :
                new SqlParameter("BookingDate", SqlDbType.DateTime);

            var depositAmountParameter = depositAmount.HasValue ?
                new SqlParameter("DepositAmount", depositAmount) :
                new SqlParameter("DepositAmount", SqlDbType.Decimal);

            var rentAmountParameter = rentAmount.HasValue ?
                new SqlParameter("RentAmount", rentAmount) :
                new SqlParameter("RentAmount", SqlDbType.Decimal);

           var puproseOfBookingParameter = new SqlParameter("PuproseOfBooking", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(puproseOfBooking))
           {
               puproseOfBookingParameter.IsNullable = true;
               puproseOfBookingParameter.Value = DBNull.Value;
           }
           else
           {
               puproseOfBookingParameter.Value = puproseOfBooking;
           }

            var depositPriceIdParameter = depositPriceId.HasValue ?
                new SqlParameter("DepositPriceId", depositPriceId) :
                new SqlParameter("DepositPriceId", SqlDbType.BigInt);

            var rentPriceIdParameter = rentPriceId.HasValue ?
                new SqlParameter("RentPriceId", rentPriceId) :
                new SqlParameter("RentPriceId", SqlDbType.BigInt);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

            var requestByUserIdParameter = requestByUserId.HasValue ?
                new SqlParameter("RequestByUserId", requestByUserId) :
                new SqlParameter("RequestByUserId", SqlDbType.BigInt);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveHallBookingRequest @HallBookingRequestId, @RequestFor, @UnitId, @livingMemberUserId, @BookingDate, @DepositAmount, @RentAmount, @PuproseOfBooking, @DepositPriceId, @RentPriceId, @StatusId, @RequestByUserId, @UpdatedBy, @ErrorCode OUT", hallBookingRequestIdParameter, requestForParameter, unitIdParameter, livingMemberUserIdParameter, bookingDateParameter, depositAmountParameter, rentAmountParameter, puproseOfBookingParameter, depositPriceIdParameter, rentPriceIdParameter, statusIdParameter, requestByUserIdParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveHallBookingRequestActionDetails(Nullable<Int64> hallBookingRequestId, Nullable<Int32> requestStatusId, string paymentInfo, string comments, string additionalReferenceFilePath, Nullable<Int64> actionTakenByUserId, string updatedBY, ObjectParameter errorCode, Nullable<Int32> previousStatusID)
        {

            var hallBookingRequestIdParameter = hallBookingRequestId.HasValue ?
                new SqlParameter("HallBookingRequestId", hallBookingRequestId) :
                new SqlParameter("HallBookingRequestId", SqlDbType.BigInt);

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var additionalReferenceFilePathParameter = new SqlParameter("AdditionalReferenceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferenceFilePath))
           {
               additionalReferenceFilePathParameter.IsNullable = true;
               additionalReferenceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferenceFilePathParameter.Value = additionalReferenceFilePath;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveHallBookingRequestActionDetails @HallBookingRequestId, @RequestStatusId, @PaymentInfo, @Comments, @AdditionalReferenceFilePath, @ActionTakenByUserId, @UpdatedBY, @ErrorCode OUT, @PreviousStatusID", hallBookingRequestIdParameter, requestStatusIdParameter, paymentInfoParameter, commentsParameter, additionalReferenceFilePathParameter, actionTakenByUserIdParameter, updatedBYParameter, errorCodeParameter, previousStatusIDParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveHallBookingRequestActionDetails_V1(Nullable<Int64> hallBookingRequestId, Nullable<Int32> requestStatusId, string paymentInfo, string comments, string additionalReferenceFilePath, Nullable<Int64> actionTakenByUserId, string updatedBY, ObjectParameter errorCode, Nullable<Int32> previousStatusID, Nullable<DateTime> todaysClientDate, ObjectParameter hallBookingRequestActionId)
        {

            var hallBookingRequestIdParameter = hallBookingRequestId.HasValue ?
                new SqlParameter("HallBookingRequestId", hallBookingRequestId) :
                new SqlParameter("HallBookingRequestId", SqlDbType.BigInt);

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var additionalReferenceFilePathParameter = new SqlParameter("AdditionalReferenceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferenceFilePath))
           {
               additionalReferenceFilePathParameter.IsNullable = true;
               additionalReferenceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferenceFilePathParameter.Value = additionalReferenceFilePath;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);

           var hallBookingRequestActionIdParameter = new SqlParameter("HallBookingRequestActionId", SqlDbType.BigInt);
               hallBookingRequestActionIdParameter.Direction = System.Data.ParameterDirection.Output;
               hallBookingRequestActionIdParameter.Value = hallBookingRequestActionId != null ? hallBookingRequestActionId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveHallBookingRequestActionDetails_V1 @HallBookingRequestId, @RequestStatusId, @PaymentInfo, @Comments, @AdditionalReferenceFilePath, @ActionTakenByUserId, @UpdatedBY, @ErrorCode OUT, @PreviousStatusID, @TodaysClientDate, @HallBookingRequestActionId OUT", hallBookingRequestIdParameter, requestStatusIdParameter, paymentInfoParameter, commentsParameter, additionalReferenceFilePathParameter, actionTakenByUserIdParameter, updatedBYParameter, errorCodeParameter, previousStatusIDParameter, todaysClientDateParameter, hallBookingRequestActionIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            hallBookingRequestActionId.Value = hallBookingRequestActionIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveHallBookingRequestDetails(Nullable<Int64> hallBookingRequestId, string requestFor, Nullable<Int32> unitId, Nullable<Int64> livingMemberUserId, Nullable<DateTime> bookingDate, Nullable<Decimal> depositAmount, Nullable<Decimal> rentAmount, string puproseOfBooking, Nullable<Int64> depositPriceId, Nullable<Int64> rentPriceId, Nullable<Int32> statusId, Nullable<Int64> requestByUserId, string updatedBy, ObjectParameter errorCode, ObjectParameter hBRquestId, ObjectParameter livingMemberCentralUserId)
        {

            var hallBookingRequestIdParameter = hallBookingRequestId.HasValue ?
                new SqlParameter("HallBookingRequestId", hallBookingRequestId) :
                new SqlParameter("HallBookingRequestId", SqlDbType.BigInt);

           var requestForParameter = new SqlParameter("RequestFor", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(requestFor))
           {
               requestForParameter.IsNullable = true;
               requestForParameter.Value = DBNull.Value;
           }
           else
           {
               requestForParameter.Value = requestFor;
           }

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var livingMemberUserIdParameter = livingMemberUserId.HasValue ?
                new SqlParameter("livingMemberUserId", livingMemberUserId) :
                new SqlParameter("livingMemberUserId", SqlDbType.BigInt);

            var bookingDateParameter = bookingDate.HasValue ?
                new SqlParameter("BookingDate", bookingDate) :
                new SqlParameter("BookingDate", SqlDbType.DateTime);

            var depositAmountParameter = depositAmount.HasValue ?
                new SqlParameter("DepositAmount", depositAmount) :
                new SqlParameter("DepositAmount", SqlDbType.Decimal);

            var rentAmountParameter = rentAmount.HasValue ?
                new SqlParameter("RentAmount", rentAmount) :
                new SqlParameter("RentAmount", SqlDbType.Decimal);

           var puproseOfBookingParameter = new SqlParameter("PuproseOfBooking", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(puproseOfBooking))
           {
               puproseOfBookingParameter.IsNullable = true;
               puproseOfBookingParameter.Value = DBNull.Value;
           }
           else
           {
               puproseOfBookingParameter.Value = puproseOfBooking;
           }

            var depositPriceIdParameter = depositPriceId.HasValue ?
                new SqlParameter("DepositPriceId", depositPriceId) :
                new SqlParameter("DepositPriceId", SqlDbType.BigInt);

            var rentPriceIdParameter = rentPriceId.HasValue ?
                new SqlParameter("RentPriceId", rentPriceId) :
                new SqlParameter("RentPriceId", SqlDbType.BigInt);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

            var requestByUserIdParameter = requestByUserId.HasValue ?
                new SqlParameter("RequestByUserId", requestByUserId) :
                new SqlParameter("RequestByUserId", SqlDbType.BigInt);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var hBRquestIdParameter = new SqlParameter("HBRquestId", SqlDbType.BigInt);
               hBRquestIdParameter.Direction = System.Data.ParameterDirection.Output;
               hBRquestIdParameter.Value = hBRquestId != null ? hBRquestId.Value : null;

           var livingMemberCentralUserIdParameter = new SqlParameter("LivingMemberCentralUserId", SqlDbType.BigInt);
               livingMemberCentralUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               livingMemberCentralUserIdParameter.Value = livingMemberCentralUserId != null ? livingMemberCentralUserId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveHallBookingRequestDetails @HallBookingRequestId, @RequestFor, @UnitId, @livingMemberUserId, @BookingDate, @DepositAmount, @RentAmount, @PuproseOfBooking, @DepositPriceId, @RentPriceId, @StatusId, @RequestByUserId, @UpdatedBy, @ErrorCode OUT, @HBRquestId OUT, @LivingMemberCentralUserId OUT", hallBookingRequestIdParameter, requestForParameter, unitIdParameter, livingMemberUserIdParameter, bookingDateParameter, depositAmountParameter, rentAmountParameter, puproseOfBookingParameter, depositPriceIdParameter, rentPriceIdParameter, statusIdParameter, requestByUserIdParameter, updatedByParameter, errorCodeParameter, hBRquestIdParameter, livingMemberCentralUserIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            hBRquestId.Value = hBRquestIdParameter.Value;
            livingMemberCentralUserId.Value = livingMemberCentralUserIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveHallBookingRequestDetails_V1(Nullable<Int64> hallBookingRequestId, string requestFor, Nullable<Int32> unitId, Nullable<Int64> livingMemberUserId, Nullable<DateTime> bookingDate, string puproseOfBooking, string hallPriceIds, Nullable<Int32> statusId, Nullable<Int64> requestByUserId, string updatedBy, ObjectParameter errorCode, ObjectParameter hBRquestId, ObjectParameter livingMemberCentralUserId, Nullable<DateTime> toDaysClientDate, Nullable<Int64> slotId, string isUserAcceptedTermsAndConditions)
        {

            var hallBookingRequestIdParameter = hallBookingRequestId.HasValue ?
                new SqlParameter("HallBookingRequestId", hallBookingRequestId) :
                new SqlParameter("HallBookingRequestId", SqlDbType.BigInt);

           var requestForParameter = new SqlParameter("RequestFor", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(requestFor))
           {
               requestForParameter.IsNullable = true;
               requestForParameter.Value = DBNull.Value;
           }
           else
           {
               requestForParameter.Value = requestFor;
           }

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var livingMemberUserIdParameter = livingMemberUserId.HasValue ?
                new SqlParameter("livingMemberUserId", livingMemberUserId) :
                new SqlParameter("livingMemberUserId", SqlDbType.BigInt);

            var bookingDateParameter = bookingDate.HasValue ?
                new SqlParameter("BookingDate", bookingDate) :
                new SqlParameter("BookingDate", SqlDbType.DateTime);

           var puproseOfBookingParameter = new SqlParameter("PuproseOfBooking", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(puproseOfBooking))
           {
               puproseOfBookingParameter.IsNullable = true;
               puproseOfBookingParameter.Value = DBNull.Value;
           }
           else
           {
               puproseOfBookingParameter.Value = puproseOfBooking;
           }

           var hallPriceIdsParameter = new SqlParameter("HallPriceIds", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(hallPriceIds))
           {
               hallPriceIdsParameter.IsNullable = true;
               hallPriceIdsParameter.Value = DBNull.Value;
           }
           else
           {
               hallPriceIdsParameter.Value = hallPriceIds;
           }

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

            var requestByUserIdParameter = requestByUserId.HasValue ?
                new SqlParameter("RequestByUserId", requestByUserId) :
                new SqlParameter("RequestByUserId", SqlDbType.BigInt);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var hBRquestIdParameter = new SqlParameter("HBRquestId", SqlDbType.BigInt);
               hBRquestIdParameter.Direction = System.Data.ParameterDirection.Output;
               hBRquestIdParameter.Value = hBRquestId != null ? hBRquestId.Value : null;

           var livingMemberCentralUserIdParameter = new SqlParameter("LivingMemberCentralUserId", SqlDbType.BigInt);
               livingMemberCentralUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               livingMemberCentralUserIdParameter.Value = livingMemberCentralUserId != null ? livingMemberCentralUserId.Value : null;

            var toDaysClientDateParameter = toDaysClientDate.HasValue ?
                new SqlParameter("ToDaysClientDate", toDaysClientDate) :
                new SqlParameter("ToDaysClientDate", SqlDbType.DateTime);

            var slotIdParameter = slotId.HasValue ?
                new SqlParameter("SlotId", slotId) :
                new SqlParameter("SlotId", SqlDbType.BigInt);

           var isUserAcceptedTermsAndConditionsParameter = new SqlParameter("IsUserAcceptedTermsAndConditions", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isUserAcceptedTermsAndConditions))
           {
               isUserAcceptedTermsAndConditionsParameter.IsNullable = true;
               isUserAcceptedTermsAndConditionsParameter.Value = DBNull.Value;
           }
           else
           {
               isUserAcceptedTermsAndConditionsParameter.Value = isUserAcceptedTermsAndConditions;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveHallBookingRequestDetails_V1 @HallBookingRequestId, @RequestFor, @UnitId, @livingMemberUserId, @BookingDate, @PuproseOfBooking, @HallPriceIds, @StatusId, @RequestByUserId, @UpdatedBy, @ErrorCode OUT, @HBRquestId OUT, @LivingMemberCentralUserId OUT, @ToDaysClientDate, @SlotId, @IsUserAcceptedTermsAndConditions", hallBookingRequestIdParameter, requestForParameter, unitIdParameter, livingMemberUserIdParameter, bookingDateParameter, puproseOfBookingParameter, hallPriceIdsParameter, statusIdParameter, requestByUserIdParameter, updatedByParameter, errorCodeParameter, hBRquestIdParameter, livingMemberCentralUserIdParameter, toDaysClientDateParameter, slotIdParameter, isUserAcceptedTermsAndConditionsParameter);

            errorCode.Value = errorCodeParameter.Value;
            hBRquestId.Value = hBRquestIdParameter.Value;
            livingMemberCentralUserId.Value = livingMemberCentralUserIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveHallFeeDetails(string hallBookPriceInfo, string updatedBy, ObjectParameter errorCode)
        {

            var hallBookPriceInfoParameter = hallBookPriceInfo != null ?
                new SqlParameter("HallBookPriceInfo", hallBookPriceInfo) :
                new SqlParameter("HallBookPriceInfo", SqlDbType.Xml);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveHallFeeDetails @HallBookPriceInfo, @UpdatedBy, @ErrorCode OUT", hallBookPriceInfoParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveHallHourlyRateDetails(string unitRequestItemPriceInfo, string updatedBy, ObjectParameter errorCode)
        {

            var unitRequestItemPriceInfoParameter = unitRequestItemPriceInfo != null ?
                new SqlParameter("UnitRequestItemPriceInfo", unitRequestItemPriceInfo) :
                new SqlParameter("UnitRequestItemPriceInfo", SqlDbType.Xml);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveHallHourlyRateDetails @UnitRequestItemPriceInfo, @UpdatedBy, @ErrorCode OUT", unitRequestItemPriceInfoParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveHallSlotSettingDetails(string slotSetting, string createdBy, ObjectParameter errorCode)
        {

            var slotSettingParameter = slotSetting != null ?
                new SqlParameter("SlotSetting", slotSetting) :
                new SqlParameter("SlotSetting", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveHallSlotSettingDetails @SlotSetting, @CreatedBy, @ErrorCode OUT", slotSettingParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveHouseRuleDetails(Nullable<Int32> houseRuleId, string houseRulesPath, string comment, Nullable<DateTime> effectiveFrom, string updatedBy, ObjectParameter errorCode)
        {

            var houseRuleIdParameter = houseRuleId.HasValue ?
                new SqlParameter("HouseRuleId", houseRuleId) :
                new SqlParameter("HouseRuleId", SqlDbType.Int);

           var houseRulesPathParameter = new SqlParameter("HouseRulesPath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(houseRulesPath))
           {
               houseRulesPathParameter.IsNullable = true;
               houseRulesPathParameter.Value = DBNull.Value;
           }
           else
           {
               houseRulesPathParameter.Value = houseRulesPath;
           }

           var commentParameter = new SqlParameter("Comment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comment))
           {
               commentParameter.IsNullable = true;
               commentParameter.Value = DBNull.Value;
           }
           else
           {
               commentParameter.Value = comment;
           }

            var effectiveFromParameter = effectiveFrom.HasValue ?
                new SqlParameter("EffectiveFrom", effectiveFrom) :
                new SqlParameter("EffectiveFrom", SqlDbType.DateTime);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveHouseRuleDetails @HouseRuleId, @HouseRulesPath, @Comment, @EffectiveFrom, @UpdatedBy, @ErrorCode OUT", houseRuleIdParameter, houseRulesPathParameter, commentParameter, effectiveFromParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveInvoiceConfigurationDetails(Nullable<Int32> invoiceConfigId, Nullable<Int32> billTypeId, Nullable<Single> lateFee, Nullable<Int32> intrestFreeDays, Nullable<Single> rateOfIntrestPerMonth, Nullable<DateTime> biilingStartDate, Nullable<DateTime> effectiveFrom, string billcode, string lineDescription, string dueLineDesc, string intrestLineDesc, Nullable<Int32> invoicePeriodDuration, Nullable<Int32> billInclusiveMonth, string updatedBy, string unitType, string isLateFeeApplicable, ObjectParameter errorCode)
        {

            var invoiceConfigIdParameter = invoiceConfigId.HasValue ?
                new SqlParameter("InvoiceConfigId", invoiceConfigId) :
                new SqlParameter("InvoiceConfigId", SqlDbType.Int);

            var billTypeIdParameter = billTypeId.HasValue ?
                new SqlParameter("BillTypeId", billTypeId) :
                new SqlParameter("BillTypeId", SqlDbType.Int);

            var lateFeeParameter = lateFee.HasValue ?
                new SqlParameter("LateFee", lateFee) :
                new SqlParameter("LateFee", SqlDbType.Real);

            var intrestFreeDaysParameter = intrestFreeDays.HasValue ?
                new SqlParameter("IntrestFreeDays", intrestFreeDays) :
                new SqlParameter("IntrestFreeDays", SqlDbType.Int);

            var rateOfIntrestPerMonthParameter = rateOfIntrestPerMonth.HasValue ?
                new SqlParameter("RateOfIntrestPerMonth", rateOfIntrestPerMonth) :
                new SqlParameter("RateOfIntrestPerMonth", SqlDbType.Real);

            var biilingStartDateParameter = biilingStartDate.HasValue ?
                new SqlParameter("BiilingStartDate", biilingStartDate) :
                new SqlParameter("BiilingStartDate", SqlDbType.DateTime);

            var effectiveFromParameter = effectiveFrom.HasValue ?
                new SqlParameter("EffectiveFrom", effectiveFrom) :
                new SqlParameter("EffectiveFrom", SqlDbType.DateTime);

           var billcodeParameter = new SqlParameter("Billcode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(billcode))
           {
               billcodeParameter.IsNullable = true;
               billcodeParameter.Value = DBNull.Value;
           }
           else
           {
               billcodeParameter.Value = billcode;
           }

           var lineDescriptionParameter = new SqlParameter("LineDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(lineDescription))
           {
               lineDescriptionParameter.IsNullable = true;
               lineDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               lineDescriptionParameter.Value = lineDescription;
           }

           var dueLineDescParameter = new SqlParameter("DueLineDesc", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(dueLineDesc))
           {
               dueLineDescParameter.IsNullable = true;
               dueLineDescParameter.Value = DBNull.Value;
           }
           else
           {
               dueLineDescParameter.Value = dueLineDesc;
           }

           var intrestLineDescParameter = new SqlParameter("IntrestLineDesc", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(intrestLineDesc))
           {
               intrestLineDescParameter.IsNullable = true;
               intrestLineDescParameter.Value = DBNull.Value;
           }
           else
           {
               intrestLineDescParameter.Value = intrestLineDesc;
           }

            var invoicePeriodDurationParameter = invoicePeriodDuration.HasValue ?
                new SqlParameter("InvoicePeriodDuration", invoicePeriodDuration) :
                new SqlParameter("InvoicePeriodDuration", SqlDbType.Int);

            var billInclusiveMonthParameter = billInclusiveMonth.HasValue ?
                new SqlParameter("BillInclusiveMonth", billInclusiveMonth) :
                new SqlParameter("BillInclusiveMonth", SqlDbType.Int);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var unitTypeParameter = new SqlParameter("UnitType", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitType))
           {
               unitTypeParameter.IsNullable = true;
               unitTypeParameter.Value = DBNull.Value;
           }
           else
           {
               unitTypeParameter.Value = unitType;
           }

           var isLateFeeApplicableParameter = new SqlParameter("IsLateFeeApplicable", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isLateFeeApplicable))
           {
               isLateFeeApplicableParameter.IsNullable = true;
               isLateFeeApplicableParameter.Value = DBNull.Value;
           }
           else
           {
               isLateFeeApplicableParameter.Value = isLateFeeApplicable;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveInvoiceConfigurationDetails @InvoiceConfigId, @BillTypeId, @LateFee, @IntrestFreeDays, @RateOfIntrestPerMonth, @BiilingStartDate, @EffectiveFrom, @Billcode, @LineDescription, @DueLineDesc, @IntrestLineDesc, @InvoicePeriodDuration, @BillInclusiveMonth, @UpdatedBy, @UnitType, @IsLateFeeApplicable, @ErrorCode OUT", invoiceConfigIdParameter, billTypeIdParameter, lateFeeParameter, intrestFreeDaysParameter, rateOfIntrestPerMonthParameter, biilingStartDateParameter, effectiveFromParameter, billcodeParameter, lineDescriptionParameter, dueLineDescParameter, intrestLineDescParameter, invoicePeriodDurationParameter, billInclusiveMonthParameter, updatedByParameter, unitTypeParameter, isLateFeeApplicableParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveIPayMerchantDetails(Nullable<Int32> iPayMerchantId, string serviceProviderName, string merchantCompanyName, string merchantCode, string merchantKey, string merchantCountryCode, string merchantCurrencyCode, string serviceProviderReportURL, string reportURLLogIn, string reportURLPassword, Nullable<Decimal> percentageofChargesOnDirectPay, string language_IsoCode, string backendPostUrl, string createdBy, ObjectParameter errorCode)
        {

            var iPayMerchantIdParameter = iPayMerchantId.HasValue ?
                new SqlParameter("IPayMerchantId", iPayMerchantId) :
                new SqlParameter("IPayMerchantId", SqlDbType.Int);

           var serviceProviderNameParameter = new SqlParameter("ServiceProviderName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(serviceProviderName))
           {
               serviceProviderNameParameter.IsNullable = true;
               serviceProviderNameParameter.Value = DBNull.Value;
           }
           else
           {
               serviceProviderNameParameter.Value = serviceProviderName;
           }

           var merchantCompanyNameParameter = new SqlParameter("MerchantCompanyName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(merchantCompanyName))
           {
               merchantCompanyNameParameter.IsNullable = true;
               merchantCompanyNameParameter.Value = DBNull.Value;
           }
           else
           {
               merchantCompanyNameParameter.Value = merchantCompanyName;
           }

           var merchantCodeParameter = new SqlParameter("MerchantCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(merchantCode))
           {
               merchantCodeParameter.IsNullable = true;
               merchantCodeParameter.Value = DBNull.Value;
           }
           else
           {
               merchantCodeParameter.Value = merchantCode;
           }

           var merchantKeyParameter = new SqlParameter("MerchantKey", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(merchantKey))
           {
               merchantKeyParameter.IsNullable = true;
               merchantKeyParameter.Value = DBNull.Value;
           }
           else
           {
               merchantKeyParameter.Value = merchantKey;
           }

           var merchantCountryCodeParameter = new SqlParameter("MerchantCountryCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(merchantCountryCode))
           {
               merchantCountryCodeParameter.IsNullable = true;
               merchantCountryCodeParameter.Value = DBNull.Value;
           }
           else
           {
               merchantCountryCodeParameter.Value = merchantCountryCode;
           }

           var merchantCurrencyCodeParameter = new SqlParameter("MerchantCurrencyCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(merchantCurrencyCode))
           {
               merchantCurrencyCodeParameter.IsNullable = true;
               merchantCurrencyCodeParameter.Value = DBNull.Value;
           }
           else
           {
               merchantCurrencyCodeParameter.Value = merchantCurrencyCode;
           }

           var serviceProviderReportURLParameter = new SqlParameter("ServiceProviderReportURL", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(serviceProviderReportURL))
           {
               serviceProviderReportURLParameter.IsNullable = true;
               serviceProviderReportURLParameter.Value = DBNull.Value;
           }
           else
           {
               serviceProviderReportURLParameter.Value = serviceProviderReportURL;
           }

           var reportURLLogInParameter = new SqlParameter("ReportURLLogIn", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(reportURLLogIn))
           {
               reportURLLogInParameter.IsNullable = true;
               reportURLLogInParameter.Value = DBNull.Value;
           }
           else
           {
               reportURLLogInParameter.Value = reportURLLogIn;
           }

           var reportURLPasswordParameter = new SqlParameter("ReportURLPassword", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(reportURLPassword))
           {
               reportURLPasswordParameter.IsNullable = true;
               reportURLPasswordParameter.Value = DBNull.Value;
           }
           else
           {
               reportURLPasswordParameter.Value = reportURLPassword;
           }

            var percentageofChargesOnDirectPayParameter = percentageofChargesOnDirectPay.HasValue ?
                new SqlParameter("PercentageofChargesOnDirectPay", percentageofChargesOnDirectPay) :
                new SqlParameter("PercentageofChargesOnDirectPay", SqlDbType.Decimal);

           var language_IsoCodeParameter = new SqlParameter("Language_IsoCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(language_IsoCode))
           {
               language_IsoCodeParameter.IsNullable = true;
               language_IsoCodeParameter.Value = DBNull.Value;
           }
           else
           {
               language_IsoCodeParameter.Value = language_IsoCode;
           }

           var backendPostUrlParameter = new SqlParameter("BackendPostUrl", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(backendPostUrl))
           {
               backendPostUrlParameter.IsNullable = true;
               backendPostUrlParameter.Value = DBNull.Value;
           }
           else
           {
               backendPostUrlParameter.Value = backendPostUrl;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveIPayMerchantDetails @IPayMerchantId, @ServiceProviderName, @MerchantCompanyName, @MerchantCode, @MerchantKey, @MerchantCountryCode, @MerchantCurrencyCode, @ServiceProviderReportURL, @ReportURLLogIn, @ReportURLPassword, @PercentageofChargesOnDirectPay, @Language_IsoCode, @BackendPostUrl, @CreatedBy, @ErrorCode OUT", iPayMerchantIdParameter, serviceProviderNameParameter, merchantCompanyNameParameter, merchantCodeParameter, merchantKeyParameter, merchantCountryCodeParameter, merchantCurrencyCodeParameter, serviceProviderReportURLParameter, reportURLLogInParameter, reportURLPasswordParameter, percentageofChargesOnDirectPayParameter, language_IsoCodeParameter, backendPostUrlParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveLoanPaymentDetails(Nullable<Int32> pILItemLoanID, string paymentInfo, string comments, string additionalReferenceFilePath, Nullable<Int64> actionTakenByUserId, string updatedBY, ObjectParameter errorCode)
        {

            var pILItemLoanIDParameter = pILItemLoanID.HasValue ?
                new SqlParameter("PILItemLoanID", pILItemLoanID) :
                new SqlParameter("PILItemLoanID", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var additionalReferenceFilePathParameter = new SqlParameter("AdditionalReferenceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferenceFilePath))
           {
               additionalReferenceFilePathParameter.IsNullable = true;
               additionalReferenceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferenceFilePathParameter.Value = additionalReferenceFilePath;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveLoanPaymentDetails @PILItemLoanID, @PaymentInfo, @Comments, @AdditionalReferenceFilePath, @ActionTakenByUserId, @UpdatedBY, @ErrorCode OUT", pILItemLoanIDParameter, paymentInfoParameter, commentsParameter, additionalReferenceFilePathParameter, actionTakenByUserIdParameter, updatedBYParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveMenuUrls(Nullable<Int32> menuId, string displayMenuName, string roleIds, Nullable<Int32> parentMenuId, string menuName, string menuIconClass, string menuDescription, string isParentMenu, Nullable<Int32> displayOrder, string controllerName, string actionName, string @params, string isActive, string backGroundColor, string createdBy, ObjectParameter errorCode)
        {

            var menuIdParameter = menuId.HasValue ?
                new SqlParameter("MenuId", menuId) :
                new SqlParameter("MenuId", SqlDbType.Int);

           var displayMenuNameParameter = new SqlParameter("DisplayMenuName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(displayMenuName))
           {
               displayMenuNameParameter.IsNullable = true;
               displayMenuNameParameter.Value = DBNull.Value;
           }
           else
           {
               displayMenuNameParameter.Value = displayMenuName;
           }

           var roleIdsParameter = new SqlParameter("RoleIds", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(roleIds))
           {
               roleIdsParameter.IsNullable = true;
               roleIdsParameter.Value = DBNull.Value;
           }
           else
           {
               roleIdsParameter.Value = roleIds;
           }

            var parentMenuIdParameter = parentMenuId.HasValue ?
                new SqlParameter("ParentMenuId", parentMenuId) :
                new SqlParameter("ParentMenuId", SqlDbType.Int);

           var menuNameParameter = new SqlParameter("MenuName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(menuName))
           {
               menuNameParameter.IsNullable = true;
               menuNameParameter.Value = DBNull.Value;
           }
           else
           {
               menuNameParameter.Value = menuName;
           }

           var menuIconClassParameter = new SqlParameter("MenuIconClass", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(menuIconClass))
           {
               menuIconClassParameter.IsNullable = true;
               menuIconClassParameter.Value = DBNull.Value;
           }
           else
           {
               menuIconClassParameter.Value = menuIconClass;
           }

           var menuDescriptionParameter = new SqlParameter("MenuDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(menuDescription))
           {
               menuDescriptionParameter.IsNullable = true;
               menuDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               menuDescriptionParameter.Value = menuDescription;
           }

           var isParentMenuParameter = new SqlParameter("IsParentMenu", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isParentMenu))
           {
               isParentMenuParameter.IsNullable = true;
               isParentMenuParameter.Value = DBNull.Value;
           }
           else
           {
               isParentMenuParameter.Value = isParentMenu;
           }

            var displayOrderParameter = displayOrder.HasValue ?
                new SqlParameter("DisplayOrder", displayOrder) :
                new SqlParameter("DisplayOrder", SqlDbType.Int);

           var controllerNameParameter = new SqlParameter("ControllerName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(controllerName))
           {
               controllerNameParameter.IsNullable = true;
               controllerNameParameter.Value = DBNull.Value;
           }
           else
           {
               controllerNameParameter.Value = controllerName;
           }

           var actionNameParameter = new SqlParameter("ActionName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(actionName))
           {
               actionNameParameter.IsNullable = true;
               actionNameParameter.Value = DBNull.Value;
           }
           else
           {
               actionNameParameter.Value = actionName;
           }

           var paramsParameter = new SqlParameter("params", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(@params))
           {
               paramsParameter.IsNullable = true;
               paramsParameter.Value = DBNull.Value;
           }
           else
           {
               paramsParameter.Value = @params;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var backGroundColorParameter = new SqlParameter("BackGroundColor", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(backGroundColor))
           {
               backGroundColorParameter.IsNullable = true;
               backGroundColorParameter.Value = DBNull.Value;
           }
           else
           {
               backGroundColorParameter.Value = backGroundColor;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveMenuUrls @MenuId, @DisplayMenuName, @RoleIds, @ParentMenuId, @MenuName, @MenuIconClass, @MenuDescription, @IsParentMenu, @DisplayOrder, @ControllerName, @ActionName, @params, @IsActive, @BackGroundColor, @CreatedBy, @ErrorCode OUT", menuIdParameter, displayMenuNameParameter, roleIdsParameter, parentMenuIdParameter, menuNameParameter, menuIconClassParameter, menuDescriptionParameter, isParentMenuParameter, displayOrderParameter, controllerNameParameter, actionNameParameter, paramsParameter, isActiveParameter, backGroundColorParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveMinutesOfMeeting(Nullable<Int32> minutesOfMeetingId, Nullable<DateTime> meetingDate, string meetingVenue, string uploadDocument, string meetingsubject, string attendies, string importantNotes, string createdBy, ObjectParameter errorCode)
        {

            var minutesOfMeetingIdParameter = minutesOfMeetingId.HasValue ?
                new SqlParameter("MinutesOfMeetingId", minutesOfMeetingId) :
                new SqlParameter("MinutesOfMeetingId", SqlDbType.Int);

            var meetingDateParameter = meetingDate.HasValue ?
                new SqlParameter("MeetingDate", meetingDate) :
                new SqlParameter("MeetingDate", SqlDbType.DateTime);

           var meetingVenueParameter = new SqlParameter("MeetingVenue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(meetingVenue))
           {
               meetingVenueParameter.IsNullable = true;
               meetingVenueParameter.Value = DBNull.Value;
           }
           else
           {
               meetingVenueParameter.Value = meetingVenue;
           }

           var uploadDocumentParameter = new SqlParameter("UploadDocument", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(uploadDocument))
           {
               uploadDocumentParameter.IsNullable = true;
               uploadDocumentParameter.Value = DBNull.Value;
           }
           else
           {
               uploadDocumentParameter.Value = uploadDocument;
           }

           var meetingsubjectParameter = new SqlParameter("Meetingsubject", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(meetingsubject))
           {
               meetingsubjectParameter.IsNullable = true;
               meetingsubjectParameter.Value = DBNull.Value;
           }
           else
           {
               meetingsubjectParameter.Value = meetingsubject;
           }

           var attendiesParameter = new SqlParameter("Attendies", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(attendies))
           {
               attendiesParameter.IsNullable = true;
               attendiesParameter.Value = DBNull.Value;
           }
           else
           {
               attendiesParameter.Value = attendies;
           }

           var importantNotesParameter = new SqlParameter("ImportantNotes", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(importantNotes))
           {
               importantNotesParameter.IsNullable = true;
               importantNotesParameter.Value = DBNull.Value;
           }
           else
           {
               importantNotesParameter.Value = importantNotes;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveMinutesOfMeeting @MinutesOfMeetingId, @MeetingDate, @MeetingVenue, @UploadDocument, @Meetingsubject, @Attendies, @ImportantNotes, @CreatedBy, @ErrorCode OUT", minutesOfMeetingIdParameter, meetingDateParameter, meetingVenueParameter, uploadDocumentParameter, meetingsubjectParameter, attendiesParameter, importantNotesParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveNonStockItemCollectionDetails(Nullable<Int32> nonStockItemId, string isCollection, Nullable<Int32> bIllTypeId, string createdBy, ObjectParameter errorCode)
        {

            var nonStockItemIdParameter = nonStockItemId.HasValue ?
                new SqlParameter("NonStockItemId", nonStockItemId) :
                new SqlParameter("NonStockItemId", SqlDbType.Int);

           var isCollectionParameter = new SqlParameter("IsCollection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isCollection))
           {
               isCollectionParameter.IsNullable = true;
               isCollectionParameter.Value = DBNull.Value;
           }
           else
           {
               isCollectionParameter.Value = isCollection;
           }

            var bIllTypeIdParameter = bIllTypeId.HasValue ?
                new SqlParameter("BIllTypeId", bIllTypeId) :
                new SqlParameter("BIllTypeId", SqlDbType.Int);

           var createdByParameter = new SqlParameter("createdBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveNonStockItemCollectionDetails @NonStockItemId, @IsCollection, @BIllTypeId, @createdBy, @ErrorCode OUT", nonStockItemIdParameter, isCollectionParameter, bIllTypeIdParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveNonStockItemDetails(Nullable<Int32> nonStockItemId, string nonstockItemName, string itemDescription, string isActive, string createdBy, ObjectParameter errorCode, Nullable<Int32> expenseSetUpId)
        {

            var nonStockItemIdParameter = nonStockItemId.HasValue ?
                new SqlParameter("NonStockItemId", nonStockItemId) :
                new SqlParameter("NonStockItemId", SqlDbType.Int);

           var nonstockItemNameParameter = new SqlParameter("NonstockItemName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(nonstockItemName))
           {
               nonstockItemNameParameter.IsNullable = true;
               nonstockItemNameParameter.Value = DBNull.Value;
           }
           else
           {
               nonstockItemNameParameter.Value = nonstockItemName;
           }

           var itemDescriptionParameter = new SqlParameter("ItemDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(itemDescription))
           {
               itemDescriptionParameter.IsNullable = true;
               itemDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               itemDescriptionParameter.Value = itemDescription;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var createdByParameter = new SqlParameter("createdBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var expenseSetUpIdParameter = expenseSetUpId.HasValue ?
                new SqlParameter("ExpenseSetUpId", expenseSetUpId) :
                new SqlParameter("ExpenseSetUpId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveNonStockItemDetails @NonStockItemId, @NonstockItemName, @ItemDescription, @IsActive, @createdBy, @ErrorCode OUT, @ExpenseSetUpId", nonStockItemIdParameter, nonstockItemNameParameter, itemDescriptionParameter, isActiveParameter, createdByParameter, errorCodeParameter, expenseSetUpIdParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveNotification(Nullable<Int32> notificationId, string notificationSubject, string notificationDescription, Nullable<DateTime> validFrom, Nullable<DateTime> validTo, string referenceFileName, string receiverInfo, string updatedBy, string isActive, ObjectParameter errorCode)
        {

            var notificationIdParameter = notificationId.HasValue ?
                new SqlParameter("NotificationId", notificationId) :
                new SqlParameter("NotificationId", SqlDbType.Int);

           var notificationSubjectParameter = new SqlParameter("NotificationSubject", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(notificationSubject))
           {
               notificationSubjectParameter.IsNullable = true;
               notificationSubjectParameter.Value = DBNull.Value;
           }
           else
           {
               notificationSubjectParameter.Value = notificationSubject;
           }

           var notificationDescriptionParameter = new SqlParameter("NotificationDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(notificationDescription))
           {
               notificationDescriptionParameter.IsNullable = true;
               notificationDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               notificationDescriptionParameter.Value = notificationDescription;
           }

            var validFromParameter = validFrom.HasValue ?
                new SqlParameter("ValidFrom", validFrom) :
                new SqlParameter("ValidFrom", SqlDbType.DateTime);

            var validToParameter = validTo.HasValue ?
                new SqlParameter("ValidTo", validTo) :
                new SqlParameter("ValidTo", SqlDbType.DateTime);

           var referenceFileNameParameter = new SqlParameter("ReferenceFileName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(referenceFileName))
           {
               referenceFileNameParameter.IsNullable = true;
               referenceFileNameParameter.Value = DBNull.Value;
           }
           else
           {
               referenceFileNameParameter.Value = referenceFileName;
           }

            var receiverInfoParameter = receiverInfo != null ?
                new SqlParameter("ReceiverInfo", receiverInfo) :
                new SqlParameter("ReceiverInfo", SqlDbType.Xml);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveNotification @NotificationId, @NotificationSubject, @NotificationDescription, @ValidFrom, @ValidTo, @ReferenceFileName, @ReceiverInfo, @UpdatedBy, @IsActive, @ErrorCode OUT", notificationIdParameter, notificationSubjectParameter, notificationDescriptionParameter, validFromParameter, validToParameter, referenceFileNameParameter, receiverInfoParameter, updatedByParameter, isActiveParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveNotificationDetails(Nullable<Int32> notificationId, string notificationSubject, string notificationDescription, Nullable<DateTime> validFrom, Nullable<DateTime> validTo, string referenceFileName, string receiverInfo, string updatedBy, string isActive, ObjectParameter errorCode, ObjectParameter currentNotificationId)
        {

            var notificationIdParameter = notificationId.HasValue ?
                new SqlParameter("NotificationId", notificationId) :
                new SqlParameter("NotificationId", SqlDbType.Int);

           var notificationSubjectParameter = new SqlParameter("NotificationSubject", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(notificationSubject))
           {
               notificationSubjectParameter.IsNullable = true;
               notificationSubjectParameter.Value = DBNull.Value;
           }
           else
           {
               notificationSubjectParameter.Value = notificationSubject;
           }

           var notificationDescriptionParameter = new SqlParameter("NotificationDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(notificationDescription))
           {
               notificationDescriptionParameter.IsNullable = true;
               notificationDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               notificationDescriptionParameter.Value = notificationDescription;
           }

            var validFromParameter = validFrom.HasValue ?
                new SqlParameter("ValidFrom", validFrom) :
                new SqlParameter("ValidFrom", SqlDbType.DateTime);

            var validToParameter = validTo.HasValue ?
                new SqlParameter("ValidTo", validTo) :
                new SqlParameter("ValidTo", SqlDbType.DateTime);

           var referenceFileNameParameter = new SqlParameter("ReferenceFileName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(referenceFileName))
           {
               referenceFileNameParameter.IsNullable = true;
               referenceFileNameParameter.Value = DBNull.Value;
           }
           else
           {
               referenceFileNameParameter.Value = referenceFileName;
           }

            var receiverInfoParameter = receiverInfo != null ?
                new SqlParameter("ReceiverInfo", receiverInfo) :
                new SqlParameter("ReceiverInfo", SqlDbType.Xml);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var currentNotificationIdParameter = new SqlParameter("currentNotificationId", SqlDbType.Int);
               currentNotificationIdParameter.Direction = System.Data.ParameterDirection.Output;
               currentNotificationIdParameter.Value = currentNotificationId != null ? currentNotificationId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveNotificationDetails @NotificationId, @NotificationSubject, @NotificationDescription, @ValidFrom, @ValidTo, @ReferenceFileName, @ReceiverInfo, @UpdatedBy, @IsActive, @ErrorCode OUT, @currentNotificationId OUT", notificationIdParameter, notificationSubjectParameter, notificationDescriptionParameter, validFromParameter, validToParameter, referenceFileNameParameter, receiverInfoParameter, updatedByParameter, isActiveParameter, errorCodeParameter, currentNotificationIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            currentNotificationId.Value = currentNotificationIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SavePurchaseInvoiceDetails(Nullable<Int64> purchaseInvoiceId, Nullable<Int64> vendorRegId, Nullable<DateTime> billReceivedDate, string invoiceNumber, Nullable<DateTime> invoiceDate, Nullable<Int32> pymentTermDays, Nullable<Decimal> invoiceAmount, string statusid, string createdBy, string purchaseInvoiceFilePath, ObjectParameter errorCode)
        {

            var purchaseInvoiceIdParameter = purchaseInvoiceId.HasValue ?
                new SqlParameter("PurchaseInvoiceId", purchaseInvoiceId) :
                new SqlParameter("PurchaseInvoiceId", SqlDbType.BigInt);

            var vendorRegIdParameter = vendorRegId.HasValue ?
                new SqlParameter("VendorRegId", vendorRegId) :
                new SqlParameter("VendorRegId", SqlDbType.BigInt);

            var billReceivedDateParameter = billReceivedDate.HasValue ?
                new SqlParameter("BillReceivedDate", billReceivedDate) :
                new SqlParameter("BillReceivedDate", SqlDbType.DateTime);

           var invoiceNumberParameter = new SqlParameter("InvoiceNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(invoiceNumber))
           {
               invoiceNumberParameter.IsNullable = true;
               invoiceNumberParameter.Value = DBNull.Value;
           }
           else
           {
               invoiceNumberParameter.Value = invoiceNumber;
           }

            var invoiceDateParameter = invoiceDate.HasValue ?
                new SqlParameter("InvoiceDate", invoiceDate) :
                new SqlParameter("InvoiceDate", SqlDbType.DateTime);

            var pymentTermDaysParameter = pymentTermDays.HasValue ?
                new SqlParameter("PymentTermDays", pymentTermDays) :
                new SqlParameter("PymentTermDays", SqlDbType.Int);

            var invoiceAmountParameter = invoiceAmount.HasValue ?
                new SqlParameter("InvoiceAmount", invoiceAmount) :
                new SqlParameter("InvoiceAmount", SqlDbType.Decimal);

           var statusidParameter = new SqlParameter("Statusid", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(statusid))
           {
               statusidParameter.IsNullable = true;
               statusidParameter.Value = DBNull.Value;
           }
           else
           {
               statusidParameter.Value = statusid;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var purchaseInvoiceFilePathParameter = new SqlParameter("PurchaseInvoiceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(purchaseInvoiceFilePath))
           {
               purchaseInvoiceFilePathParameter.IsNullable = true;
               purchaseInvoiceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               purchaseInvoiceFilePathParameter.Value = purchaseInvoiceFilePath;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SavePurchaseInvoiceDetails @PurchaseInvoiceId, @VendorRegId, @BillReceivedDate, @InvoiceNumber, @InvoiceDate, @PymentTermDays, @InvoiceAmount, @Statusid, @CreatedBy, @PurchaseInvoiceFilePath, @ErrorCode OUT", purchaseInvoiceIdParameter, vendorRegIdParameter, billReceivedDateParameter, invoiceNumberParameter, invoiceDateParameter, pymentTermDaysParameter, invoiceAmountParameter, statusidParameter, createdByParameter, purchaseInvoiceFilePathParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SavePurchaseInvoiceLineItemDetails(Nullable<Int32> purchaseInvoiceLineID, Nullable<Int64> purchaseInvoiceId, Nullable<Int32> glAccountItemID, Nullable<Int64> materialID, string iSLoanApplicable, string lineNumber, string lineItemDescription, Nullable<Int32> purchaseQunitity, Nullable<Decimal> pricePerUnit, Nullable<Decimal> taxPercentageperUnit, Nullable<Decimal> taxAmountPerUnit, Nullable<Decimal> discountAmount, Nullable<Decimal> totalAmountPerUnit, Nullable<Decimal> lineTotalAmount, Nullable<Int32> pILItemLoanID, string bankName, string loanNumber, Nullable<Decimal> loanAmount, Nullable<Int32> loanPeriod, Nullable<Int32> totalNoOfEMIs, Nullable<Decimal> initialDownPaidAmount, Nullable<DateTime> loanStartDate, Nullable<Int32> nonstockItemId, string createdBy, ObjectParameter errorCode)
        {

            var purchaseInvoiceLineIDParameter = purchaseInvoiceLineID.HasValue ?
                new SqlParameter("PurchaseInvoiceLineID", purchaseInvoiceLineID) :
                new SqlParameter("PurchaseInvoiceLineID", SqlDbType.Int);

            var purchaseInvoiceIdParameter = purchaseInvoiceId.HasValue ?
                new SqlParameter("PurchaseInvoiceId", purchaseInvoiceId) :
                new SqlParameter("PurchaseInvoiceId", SqlDbType.BigInt);

            var glAccountItemIDParameter = glAccountItemID.HasValue ?
                new SqlParameter("GlAccountItemID", glAccountItemID) :
                new SqlParameter("GlAccountItemID", SqlDbType.Int);

            var materialIDParameter = materialID.HasValue ?
                new SqlParameter("MaterialID", materialID) :
                new SqlParameter("MaterialID", SqlDbType.BigInt);

           var iSLoanApplicableParameter = new SqlParameter("ISLoanApplicable", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(iSLoanApplicable))
           {
               iSLoanApplicableParameter.IsNullable = true;
               iSLoanApplicableParameter.Value = DBNull.Value;
           }
           else
           {
               iSLoanApplicableParameter.Value = iSLoanApplicable;
           }

           var lineNumberParameter = new SqlParameter("LineNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(lineNumber))
           {
               lineNumberParameter.IsNullable = true;
               lineNumberParameter.Value = DBNull.Value;
           }
           else
           {
               lineNumberParameter.Value = lineNumber;
           }

           var lineItemDescriptionParameter = new SqlParameter("LineItemDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(lineItemDescription))
           {
               lineItemDescriptionParameter.IsNullable = true;
               lineItemDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               lineItemDescriptionParameter.Value = lineItemDescription;
           }

            var purchaseQunitityParameter = purchaseQunitity.HasValue ?
                new SqlParameter("PurchaseQunitity", purchaseQunitity) :
                new SqlParameter("PurchaseQunitity", SqlDbType.Int);

            var pricePerUnitParameter = pricePerUnit.HasValue ?
                new SqlParameter("PricePerUnit", pricePerUnit) :
                new SqlParameter("PricePerUnit", SqlDbType.Decimal);

            var taxPercentageperUnitParameter = taxPercentageperUnit.HasValue ?
                new SqlParameter("TaxPercentageperUnit", taxPercentageperUnit) :
                new SqlParameter("TaxPercentageperUnit", SqlDbType.Decimal);

            var taxAmountPerUnitParameter = taxAmountPerUnit.HasValue ?
                new SqlParameter("TaxAmountPerUnit", taxAmountPerUnit) :
                new SqlParameter("TaxAmountPerUnit", SqlDbType.Decimal);

            var discountAmountParameter = discountAmount.HasValue ?
                new SqlParameter("DiscountAmount", discountAmount) :
                new SqlParameter("DiscountAmount", SqlDbType.Decimal);

            var totalAmountPerUnitParameter = totalAmountPerUnit.HasValue ?
                new SqlParameter("TotalAmountPerUnit", totalAmountPerUnit) :
                new SqlParameter("TotalAmountPerUnit", SqlDbType.Decimal);

            var lineTotalAmountParameter = lineTotalAmount.HasValue ?
                new SqlParameter("LineTotalAmount", lineTotalAmount) :
                new SqlParameter("LineTotalAmount", SqlDbType.Decimal);

            var pILItemLoanIDParameter = pILItemLoanID.HasValue ?
                new SqlParameter("PILItemLoanID", pILItemLoanID) :
                new SqlParameter("PILItemLoanID", SqlDbType.Int);

           var bankNameParameter = new SqlParameter("BankName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(bankName))
           {
               bankNameParameter.IsNullable = true;
               bankNameParameter.Value = DBNull.Value;
           }
           else
           {
               bankNameParameter.Value = bankName;
           }

           var loanNumberParameter = new SqlParameter("LoanNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(loanNumber))
           {
               loanNumberParameter.IsNullable = true;
               loanNumberParameter.Value = DBNull.Value;
           }
           else
           {
               loanNumberParameter.Value = loanNumber;
           }

            var loanAmountParameter = loanAmount.HasValue ?
                new SqlParameter("LoanAmount", loanAmount) :
                new SqlParameter("LoanAmount", SqlDbType.Decimal);

            var loanPeriodParameter = loanPeriod.HasValue ?
                new SqlParameter("LoanPeriod", loanPeriod) :
                new SqlParameter("LoanPeriod", SqlDbType.Int);

            var totalNoOfEMIsParameter = totalNoOfEMIs.HasValue ?
                new SqlParameter("TotalNoOfEMIs", totalNoOfEMIs) :
                new SqlParameter("TotalNoOfEMIs", SqlDbType.Int);

            var initialDownPaidAmountParameter = initialDownPaidAmount.HasValue ?
                new SqlParameter("InitialDownPaidAmount", initialDownPaidAmount) :
                new SqlParameter("InitialDownPaidAmount", SqlDbType.Decimal);

            var loanStartDateParameter = loanStartDate.HasValue ?
                new SqlParameter("LoanStartDate", loanStartDate) :
                new SqlParameter("LoanStartDate", SqlDbType.DateTime);

            var nonstockItemIdParameter = nonstockItemId.HasValue ?
                new SqlParameter("NonstockItemId", nonstockItemId) :
                new SqlParameter("NonstockItemId", SqlDbType.Int);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SavePurchaseInvoiceLineItemDetails @PurchaseInvoiceLineID, @PurchaseInvoiceId, @GlAccountItemID, @MaterialID, @ISLoanApplicable, @LineNumber, @LineItemDescription, @PurchaseQunitity, @PricePerUnit, @TaxPercentageperUnit, @TaxAmountPerUnit, @DiscountAmount, @TotalAmountPerUnit, @LineTotalAmount, @PILItemLoanID, @BankName, @LoanNumber, @LoanAmount, @LoanPeriod, @TotalNoOfEMIs, @InitialDownPaidAmount, @LoanStartDate, @NonstockItemId, @CreatedBy, @ErrorCode OUT", purchaseInvoiceLineIDParameter, purchaseInvoiceIdParameter, glAccountItemIDParameter, materialIDParameter, iSLoanApplicableParameter, lineNumberParameter, lineItemDescriptionParameter, purchaseQunitityParameter, pricePerUnitParameter, taxPercentageperUnitParameter, taxAmountPerUnitParameter, discountAmountParameter, totalAmountPerUnitParameter, lineTotalAmountParameter, pILItemLoanIDParameter, bankNameParameter, loanNumberParameter, loanAmountParameter, loanPeriodParameter, totalNoOfEMIsParameter, initialDownPaidAmountParameter, loanStartDateParameter, nonstockItemIdParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SavePurchaseInvoicePaymentDetails(Nullable<Int64> purchaseInvoiceId, Nullable<Int32> statusId, string paymentInfo, string comments, string additionalReferenceFilePath, Nullable<Int64> actionTakenByUserId, string updatedBY, ObjectParameter errorCode)
        {

            var purchaseInvoiceIdParameter = purchaseInvoiceId.HasValue ?
                new SqlParameter("PurchaseInvoiceId", purchaseInvoiceId) :
                new SqlParameter("PurchaseInvoiceId", SqlDbType.BigInt);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var additionalReferenceFilePathParameter = new SqlParameter("AdditionalReferenceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferenceFilePath))
           {
               additionalReferenceFilePathParameter.IsNullable = true;
               additionalReferenceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferenceFilePathParameter.Value = additionalReferenceFilePath;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SavePurchaseInvoicePaymentDetails @PurchaseInvoiceId, @StatusId, @PaymentInfo, @Comments, @AdditionalReferenceFilePath, @ActionTakenByUserId, @UpdatedBY, @ErrorCode OUT", purchaseInvoiceIdParameter, statusIdParameter, paymentInfoParameter, commentsParameter, additionalReferenceFilePathParameter, actionTakenByUserIdParameter, updatedBYParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveReconciliationAmendmentDetails(Nullable<Int64> bankReconciliationId, Nullable<Int32> paymentReqId, Nullable<DateTime> newReconciliationDate, string newReconciliationNote, Nullable<Int64> amendmentByUserId, string amendmentBy, Nullable<DateTime> todaysClientDate, string authorizedCode, ObjectParameter errorCode)
        {

            var bankReconciliationIdParameter = bankReconciliationId.HasValue ?
                new SqlParameter("BankReconciliationId", bankReconciliationId) :
                new SqlParameter("BankReconciliationId", SqlDbType.BigInt);

            var paymentReqIdParameter = paymentReqId.HasValue ?
                new SqlParameter("PaymentReqId", paymentReqId) :
                new SqlParameter("PaymentReqId", SqlDbType.Int);

            var newReconciliationDateParameter = newReconciliationDate.HasValue ?
                new SqlParameter("NewReconciliationDate", newReconciliationDate) :
                new SqlParameter("NewReconciliationDate", SqlDbType.DateTime);

           var newReconciliationNoteParameter = new SqlParameter("NewReconciliationNote", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(newReconciliationNote))
           {
               newReconciliationNoteParameter.IsNullable = true;
               newReconciliationNoteParameter.Value = DBNull.Value;
           }
           else
           {
               newReconciliationNoteParameter.Value = newReconciliationNote;
           }

            var amendmentByUserIdParameter = amendmentByUserId.HasValue ?
                new SqlParameter("AmendmentByUserId", amendmentByUserId) :
                new SqlParameter("AmendmentByUserId", SqlDbType.BigInt);

           var amendmentByParameter = new SqlParameter("AmendmentBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(amendmentBy))
           {
               amendmentByParameter.IsNullable = true;
               amendmentByParameter.Value = DBNull.Value;
           }
           else
           {
               amendmentByParameter.Value = amendmentBy;
           }

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);

           var authorizedCodeParameter = new SqlParameter("AuthorizedCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(authorizedCode))
           {
               authorizedCodeParameter.IsNullable = true;
               authorizedCodeParameter.Value = DBNull.Value;
           }
           else
           {
               authorizedCodeParameter.Value = authorizedCode;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveReconciliationAmendmentDetails @BankReconciliationId, @PaymentReqId, @NewReconciliationDate, @NewReconciliationNote, @AmendmentByUserId, @AmendmentBy, @TodaysClientDate, @AuthorizedCode, @ErrorCode OUT", bankReconciliationIdParameter, paymentReqIdParameter, newReconciliationDateParameter, newReconciliationNoteParameter, amendmentByUserIdParameter, amendmentByParameter, todaysClientDateParameter, authorizedCodeParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveReconciliationCarryForwardDetails(Nullable<Int32> carryForwardId, string carryForwardDetails, string carryForwardBy, ObjectParameter errorCode)
        {

            var carryForwardIdParameter = carryForwardId.HasValue ?
                new SqlParameter("CarryForwardId", carryForwardId) :
                new SqlParameter("CarryForwardId", SqlDbType.Int);

            var carryForwardDetailsParameter = carryForwardDetails != null ?
                new SqlParameter("CarryForwardDetails", carryForwardDetails) :
                new SqlParameter("CarryForwardDetails", SqlDbType.Xml);

           var carryForwardByParameter = new SqlParameter("CarryForwardBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(carryForwardBy))
           {
               carryForwardByParameter.IsNullable = true;
               carryForwardByParameter.Value = DBNull.Value;
           }
           else
           {
               carryForwardByParameter.Value = carryForwardBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveReconciliationCarryForwardDetails @CarryForwardId, @CarryForwardDetails, @CarryForwardBy, @ErrorCode OUT", carryForwardIdParameter, carryForwardDetailsParameter, carryForwardByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveReconciliationDetails(Nullable<Int64> bankReconciliationId, string reconciliationDetails, string reconciliationBy, ObjectParameter errorCode)
        {

            var bankReconciliationIdParameter = bankReconciliationId.HasValue ?
                new SqlParameter("BankReconciliationId", bankReconciliationId) :
                new SqlParameter("BankReconciliationId", SqlDbType.BigInt);

            var reconciliationDetailsParameter = reconciliationDetails != null ?
                new SqlParameter("ReconciliationDetails", reconciliationDetails) :
                new SqlParameter("ReconciliationDetails", SqlDbType.Xml);

           var reconciliationByParameter = new SqlParameter("ReconciliationBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(reconciliationBy))
           {
               reconciliationByParameter.IsNullable = true;
               reconciliationByParameter.Value = DBNull.Value;
           }
           else
           {
               reconciliationByParameter.Value = reconciliationBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveReconciliationDetails @BankReconciliationId, @ReconciliationDetails, @ReconciliationBy, @ErrorCode OUT", bankReconciliationIdParameter, reconciliationDetailsParameter, reconciliationByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveRennovationRequestActionDetails(Nullable<Int64> rennovationRequestId, Nullable<Int32> requestStatusId, string paymentInfo, string comments, string additionalReferenceFilePath, Nullable<Int64> actionTakenByUserId, string updatedBY, ObjectParameter errorCode, Nullable<Int32> previousStatusID, ObjectParameter rennovationRequestActionId, Nullable<DateTime> todaysClientDate)
        {

            var rennovationRequestIdParameter = rennovationRequestId.HasValue ?
                new SqlParameter("RennovationRequestId", rennovationRequestId) :
                new SqlParameter("RennovationRequestId", SqlDbType.BigInt);

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var additionalReferenceFilePathParameter = new SqlParameter("AdditionalReferenceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferenceFilePath))
           {
               additionalReferenceFilePathParameter.IsNullable = true;
               additionalReferenceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferenceFilePathParameter.Value = additionalReferenceFilePath;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);

           var rennovationRequestActionIdParameter = new SqlParameter("RennovationRequestActionId", SqlDbType.BigInt);
               rennovationRequestActionIdParameter.Direction = System.Data.ParameterDirection.Output;
               rennovationRequestActionIdParameter.Value = rennovationRequestActionId != null ? rennovationRequestActionId.Value : null;

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveRennovationRequestActionDetails @RennovationRequestId, @RequestStatusId, @PaymentInfo, @Comments, @AdditionalReferenceFilePath, @ActionTakenByUserId, @UpdatedBY, @ErrorCode OUT, @PreviousStatusID, @RennovationRequestActionId OUT, @TodaysClientDate", rennovationRequestIdParameter, requestStatusIdParameter, paymentInfoParameter, commentsParameter, additionalReferenceFilePathParameter, actionTakenByUserIdParameter, updatedBYParameter, errorCodeParameter, previousStatusIDParameter, rennovationRequestActionIdParameter, todaysClientDateParameter);

            errorCode.Value = errorCodeParameter.Value;
            rennovationRequestActionId.Value = rennovationRequestActionIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveRennovationRequestDetails(Nullable<Int64> rennovationRequestId, Nullable<Int32> unitID, Nullable<Int64> requestBehalfOfUserId, Nullable<DateTime> periodFrom, Nullable<DateTime> periodTo, Nullable<Decimal> depositAmount, string reqDescription, string contractorName, string contractorVehicalNumber, string contractorMobileNumber, Nullable<Int32> requestStatusId, Nullable<Int64> raisedByUserId, string updatedBy, ObjectParameter errorCode, ObjectParameter rRRequestid, ObjectParameter livingMemberCentralUserId, string isUserAcceptedTermsAndConditions, Nullable<DateTime> createdOn, Nullable<Int32> typeofRequest)
        {

            var rennovationRequestIdParameter = rennovationRequestId.HasValue ?
                new SqlParameter("RennovationRequestId", rennovationRequestId) :
                new SqlParameter("RennovationRequestId", SqlDbType.BigInt);

            var unitIDParameter = unitID.HasValue ?
                new SqlParameter("UnitID", unitID) :
                new SqlParameter("UnitID", SqlDbType.Int);

            var requestBehalfOfUserIdParameter = requestBehalfOfUserId.HasValue ?
                new SqlParameter("RequestBehalfOfUserId", requestBehalfOfUserId) :
                new SqlParameter("RequestBehalfOfUserId", SqlDbType.BigInt);

            var periodFromParameter = periodFrom.HasValue ?
                new SqlParameter("PeriodFrom", periodFrom) :
                new SqlParameter("PeriodFrom", SqlDbType.DateTime);

            var periodToParameter = periodTo.HasValue ?
                new SqlParameter("PeriodTo", periodTo) :
                new SqlParameter("PeriodTo", SqlDbType.DateTime);

            var depositAmountParameter = depositAmount.HasValue ?
                new SqlParameter("DepositAmount", depositAmount) :
                new SqlParameter("DepositAmount", SqlDbType.Decimal);

           var reqDescriptionParameter = new SqlParameter("ReqDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(reqDescription))
           {
               reqDescriptionParameter.IsNullable = true;
               reqDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               reqDescriptionParameter.Value = reqDescription;
           }

           var contractorNameParameter = new SqlParameter("ContractorName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(contractorName))
           {
               contractorNameParameter.IsNullable = true;
               contractorNameParameter.Value = DBNull.Value;
           }
           else
           {
               contractorNameParameter.Value = contractorName;
           }

           var contractorVehicalNumberParameter = new SqlParameter("ContractorVehicalNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(contractorVehicalNumber))
           {
               contractorVehicalNumberParameter.IsNullable = true;
               contractorVehicalNumberParameter.Value = DBNull.Value;
           }
           else
           {
               contractorVehicalNumberParameter.Value = contractorVehicalNumber;
           }

           var contractorMobileNumberParameter = new SqlParameter("ContractorMobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(contractorMobileNumber))
           {
               contractorMobileNumberParameter.IsNullable = true;
               contractorMobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               contractorMobileNumberParameter.Value = contractorMobileNumber;
           }

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var raisedByUserIdParameter = raisedByUserId.HasValue ?
                new SqlParameter("RaisedByUserId", raisedByUserId) :
                new SqlParameter("RaisedByUserId", SqlDbType.BigInt);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var rRRequestidParameter = new SqlParameter("RRRequestid", SqlDbType.BigInt);
               rRRequestidParameter.Direction = System.Data.ParameterDirection.Output;
               rRRequestidParameter.Value = rRRequestid != null ? rRRequestid.Value : null;

           var livingMemberCentralUserIdParameter = new SqlParameter("LivingMemberCentralUserId", SqlDbType.BigInt);
               livingMemberCentralUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               livingMemberCentralUserIdParameter.Value = livingMemberCentralUserId != null ? livingMemberCentralUserId.Value : null;

           var isUserAcceptedTermsAndConditionsParameter = new SqlParameter("IsUserAcceptedTermsAndConditions", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isUserAcceptedTermsAndConditions))
           {
               isUserAcceptedTermsAndConditionsParameter.IsNullable = true;
               isUserAcceptedTermsAndConditionsParameter.Value = DBNull.Value;
           }
           else
           {
               isUserAcceptedTermsAndConditionsParameter.Value = isUserAcceptedTermsAndConditions;
           }

            var createdOnParameter = createdOn.HasValue ?
                new SqlParameter("CreatedOn", createdOn) :
                new SqlParameter("CreatedOn", SqlDbType.DateTime);

            var typeofRequestParameter = typeofRequest.HasValue ?
                new SqlParameter("TypeofRequest", typeofRequest) :
                new SqlParameter("TypeofRequest", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveRennovationRequestDetails @RennovationRequestId, @UnitID, @RequestBehalfOfUserId, @PeriodFrom, @PeriodTo, @DepositAmount, @ReqDescription, @ContractorName, @ContractorVehicalNumber, @ContractorMobileNumber, @RequestStatusId, @RaisedByUserId, @UpdatedBy, @ErrorCode OUT, @RRRequestid OUT, @LivingMemberCentralUserId OUT, @IsUserAcceptedTermsAndConditions, @CreatedOn, @TypeofRequest", rennovationRequestIdParameter, unitIDParameter, requestBehalfOfUserIdParameter, periodFromParameter, periodToParameter, depositAmountParameter, reqDescriptionParameter, contractorNameParameter, contractorVehicalNumberParameter, contractorMobileNumberParameter, requestStatusIdParameter, raisedByUserIdParameter, updatedByParameter, errorCodeParameter, rRRequestidParameter, livingMemberCentralUserIdParameter, isUserAcceptedTermsAndConditionsParameter, createdOnParameter, typeofRequestParameter);

            errorCode.Value = errorCodeParameter.Value;
            rRRequestid.Value = rRRequestidParameter.Value;
            livingMemberCentralUserId.Value = livingMemberCentralUserIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveRequestForQuotationItemDetails(Nullable<Int64> rFQItemID, Nullable<Int32> rFQID, string itemDetails, Nullable<Decimal> estimateCost, string createdBy, ObjectParameter errorCode)
        {

            var rFQItemIDParameter = rFQItemID.HasValue ?
                new SqlParameter("RFQItemID", rFQItemID) :
                new SqlParameter("RFQItemID", SqlDbType.BigInt);

            var rFQIDParameter = rFQID.HasValue ?
                new SqlParameter("RFQID", rFQID) :
                new SqlParameter("RFQID", SqlDbType.Int);

           var itemDetailsParameter = new SqlParameter("ItemDetails", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(itemDetails))
           {
               itemDetailsParameter.IsNullable = true;
               itemDetailsParameter.Value = DBNull.Value;
           }
           else
           {
               itemDetailsParameter.Value = itemDetails;
           }

            var estimateCostParameter = estimateCost.HasValue ?
                new SqlParameter("EstimateCost", estimateCost) :
                new SqlParameter("EstimateCost", SqlDbType.Decimal);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveRequestForQuotationItemDetails @RFQItemID, @RFQID, @ItemDetails, @EstimateCost, @CreatedBy, @ErrorCode OUT", rFQItemIDParameter, rFQIDParameter, itemDetailsParameter, estimateCostParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveReviseRFQuotesDetails(Nullable<Int64> rFQReviseId, Nullable<Int64> rFQuotesID, Nullable<Int32> rFQID, Nullable<Decimal> quotesPrice, Nullable<DateTime> reviseDate, string comments, string uploadedReferenceFile, string createdBy, ObjectParameter errorCode)
        {

            var rFQReviseIdParameter = rFQReviseId.HasValue ?
                new SqlParameter("RFQReviseId", rFQReviseId) :
                new SqlParameter("RFQReviseId", SqlDbType.BigInt);

            var rFQuotesIDParameter = rFQuotesID.HasValue ?
                new SqlParameter("RFQuotesID", rFQuotesID) :
                new SqlParameter("RFQuotesID", SqlDbType.BigInt);

            var rFQIDParameter = rFQID.HasValue ?
                new SqlParameter("RFQID", rFQID) :
                new SqlParameter("RFQID", SqlDbType.Int);

            var quotesPriceParameter = quotesPrice.HasValue ?
                new SqlParameter("QuotesPrice", quotesPrice) :
                new SqlParameter("QuotesPrice", SqlDbType.Decimal);

            var reviseDateParameter = reviseDate.HasValue ?
                new SqlParameter("ReviseDate", reviseDate) :
                new SqlParameter("ReviseDate", SqlDbType.DateTime);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var uploadedReferenceFileParameter = new SqlParameter("UploadedReferenceFile", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(uploadedReferenceFile))
           {
               uploadedReferenceFileParameter.IsNullable = true;
               uploadedReferenceFileParameter.Value = DBNull.Value;
           }
           else
           {
               uploadedReferenceFileParameter.Value = uploadedReferenceFile;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveReviseRFQuotesDetails @RFQReviseId, @RFQuotesID, @RFQID, @QuotesPrice, @ReviseDate, @Comments, @UploadedReferenceFile, @CreatedBy, @ErrorCode OUT", rFQReviseIdParameter, rFQuotesIDParameter, rFQIDParameter, quotesPriceParameter, reviseDateParameter, commentsParameter, uploadedReferenceFileParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveRFQDetails(Nullable<Int32> rFQID, Nullable<Int32> minutesOfMeetingId, string rFQNumber, string rFQReference, string rFQSubject, string orderDescription, string rFQNotes, Nullable<Int32> statusID, string createdBy, ObjectParameter errorCode)
        {

            var rFQIDParameter = rFQID.HasValue ?
                new SqlParameter("RFQID", rFQID) :
                new SqlParameter("RFQID", SqlDbType.Int);

            var minutesOfMeetingIdParameter = minutesOfMeetingId.HasValue ?
                new SqlParameter("MinutesOfMeetingId", minutesOfMeetingId) :
                new SqlParameter("MinutesOfMeetingId", SqlDbType.Int);

           var rFQNumberParameter = new SqlParameter("RFQNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(rFQNumber))
           {
               rFQNumberParameter.IsNullable = true;
               rFQNumberParameter.Value = DBNull.Value;
           }
           else
           {
               rFQNumberParameter.Value = rFQNumber;
           }

           var rFQReferenceParameter = new SqlParameter("RFQReference", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(rFQReference))
           {
               rFQReferenceParameter.IsNullable = true;
               rFQReferenceParameter.Value = DBNull.Value;
           }
           else
           {
               rFQReferenceParameter.Value = rFQReference;
           }

           var rFQSubjectParameter = new SqlParameter("RFQSubject", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(rFQSubject))
           {
               rFQSubjectParameter.IsNullable = true;
               rFQSubjectParameter.Value = DBNull.Value;
           }
           else
           {
               rFQSubjectParameter.Value = rFQSubject;
           }

           var orderDescriptionParameter = new SqlParameter("OrderDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(orderDescription))
           {
               orderDescriptionParameter.IsNullable = true;
               orderDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               orderDescriptionParameter.Value = orderDescription;
           }

           var rFQNotesParameter = new SqlParameter("RFQNotes", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(rFQNotes))
           {
               rFQNotesParameter.IsNullable = true;
               rFQNotesParameter.Value = DBNull.Value;
           }
           else
           {
               rFQNotesParameter.Value = rFQNotes;
           }

            var statusIDParameter = statusID.HasValue ?
                new SqlParameter("StatusID", statusID) :
                new SqlParameter("StatusID", SqlDbType.Int);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveRFQDetails @RFQID, @MinutesOfMeetingId, @RFQNumber, @RFQReference, @RFQSubject, @OrderDescription, @RFQNotes, @StatusID, @CreatedBy, @ErrorCode OUT", rFQIDParameter, minutesOfMeetingIdParameter, rFQNumberParameter, rFQReferenceParameter, rFQSubjectParameter, orderDescriptionParameter, rFQNotesParameter, statusIDParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveRFQQuotesDetails(Nullable<Int64> rFQuotesID, Nullable<Int32> rFQID, string quotesReference, string quotesSubject, Nullable<Decimal> quotesPrice, Nullable<DateTime> estimatecompletionTime, Nullable<Int32> statusID, Nullable<DateTime> quotesReceivedDate, string companyName, string companyAddress, string companyPhoneNumber, string companyFaxNumber, string companyEmail, string companyContactPersonName, string contactPersonMobilenumber, string contactPersonEmail, string uploadedReferenceFile, string addressLine1, string addressLine2, string addressLine3, string city, string addressState, string postalCode, string createdBy, ObjectParameter errorCode)
        {

            var rFQuotesIDParameter = rFQuotesID.HasValue ?
                new SqlParameter("RFQuotesID", rFQuotesID) :
                new SqlParameter("RFQuotesID", SqlDbType.BigInt);

            var rFQIDParameter = rFQID.HasValue ?
                new SqlParameter("RFQID", rFQID) :
                new SqlParameter("RFQID", SqlDbType.Int);

           var quotesReferenceParameter = new SqlParameter("QuotesReference", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(quotesReference))
           {
               quotesReferenceParameter.IsNullable = true;
               quotesReferenceParameter.Value = DBNull.Value;
           }
           else
           {
               quotesReferenceParameter.Value = quotesReference;
           }

           var quotesSubjectParameter = new SqlParameter("QuotesSubject", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(quotesSubject))
           {
               quotesSubjectParameter.IsNullable = true;
               quotesSubjectParameter.Value = DBNull.Value;
           }
           else
           {
               quotesSubjectParameter.Value = quotesSubject;
           }

            var quotesPriceParameter = quotesPrice.HasValue ?
                new SqlParameter("QuotesPrice", quotesPrice) :
                new SqlParameter("QuotesPrice", SqlDbType.Decimal);

            var estimatecompletionTimeParameter = estimatecompletionTime.HasValue ?
                new SqlParameter("EstimatecompletionTime", estimatecompletionTime) :
                new SqlParameter("EstimatecompletionTime", SqlDbType.DateTime);

            var statusIDParameter = statusID.HasValue ?
                new SqlParameter("StatusID", statusID) :
                new SqlParameter("StatusID", SqlDbType.Int);

            var quotesReceivedDateParameter = quotesReceivedDate.HasValue ?
                new SqlParameter("QuotesReceivedDate", quotesReceivedDate) :
                new SqlParameter("QuotesReceivedDate", SqlDbType.DateTime);

           var companyNameParameter = new SqlParameter("CompanyName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyName))
           {
               companyNameParameter.IsNullable = true;
               companyNameParameter.Value = DBNull.Value;
           }
           else
           {
               companyNameParameter.Value = companyName;
           }

           var companyAddressParameter = new SqlParameter("CompanyAddress", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyAddress))
           {
               companyAddressParameter.IsNullable = true;
               companyAddressParameter.Value = DBNull.Value;
           }
           else
           {
               companyAddressParameter.Value = companyAddress;
           }

           var companyPhoneNumberParameter = new SqlParameter("CompanyPhoneNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyPhoneNumber))
           {
               companyPhoneNumberParameter.IsNullable = true;
               companyPhoneNumberParameter.Value = DBNull.Value;
           }
           else
           {
               companyPhoneNumberParameter.Value = companyPhoneNumber;
           }

           var companyFaxNumberParameter = new SqlParameter("CompanyFaxNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyFaxNumber))
           {
               companyFaxNumberParameter.IsNullable = true;
               companyFaxNumberParameter.Value = DBNull.Value;
           }
           else
           {
               companyFaxNumberParameter.Value = companyFaxNumber;
           }

           var companyEmailParameter = new SqlParameter("CompanyEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyEmail))
           {
               companyEmailParameter.IsNullable = true;
               companyEmailParameter.Value = DBNull.Value;
           }
           else
           {
               companyEmailParameter.Value = companyEmail;
           }

           var companyContactPersonNameParameter = new SqlParameter("CompanyContactPersonName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyContactPersonName))
           {
               companyContactPersonNameParameter.IsNullable = true;
               companyContactPersonNameParameter.Value = DBNull.Value;
           }
           else
           {
               companyContactPersonNameParameter.Value = companyContactPersonName;
           }

           var contactPersonMobilenumberParameter = new SqlParameter("ContactPersonMobilenumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(contactPersonMobilenumber))
           {
               contactPersonMobilenumberParameter.IsNullable = true;
               contactPersonMobilenumberParameter.Value = DBNull.Value;
           }
           else
           {
               contactPersonMobilenumberParameter.Value = contactPersonMobilenumber;
           }

           var contactPersonEmailParameter = new SqlParameter("ContactPersonEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(contactPersonEmail))
           {
               contactPersonEmailParameter.IsNullable = true;
               contactPersonEmailParameter.Value = DBNull.Value;
           }
           else
           {
               contactPersonEmailParameter.Value = contactPersonEmail;
           }

           var uploadedReferenceFileParameter = new SqlParameter("UploadedReferenceFile", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(uploadedReferenceFile))
           {
               uploadedReferenceFileParameter.IsNullable = true;
               uploadedReferenceFileParameter.Value = DBNull.Value;
           }
           else
           {
               uploadedReferenceFileParameter.Value = uploadedReferenceFile;
           }

           var addressLine1Parameter = new SqlParameter("AddressLine1", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressLine1))
           {
               addressLine1Parameter.IsNullable = true;
               addressLine1Parameter.Value = DBNull.Value;
           }
           else
           {
               addressLine1Parameter.Value = addressLine1;
           }

           var addressLine2Parameter = new SqlParameter("AddressLine2", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressLine2))
           {
               addressLine2Parameter.IsNullable = true;
               addressLine2Parameter.Value = DBNull.Value;
           }
           else
           {
               addressLine2Parameter.Value = addressLine2;
           }

           var addressLine3Parameter = new SqlParameter("AddressLine3", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressLine3))
           {
               addressLine3Parameter.IsNullable = true;
               addressLine3Parameter.Value = DBNull.Value;
           }
           else
           {
               addressLine3Parameter.Value = addressLine3;
           }

           var cityParameter = new SqlParameter("City", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(city))
           {
               cityParameter.IsNullable = true;
               cityParameter.Value = DBNull.Value;
           }
           else
           {
               cityParameter.Value = city;
           }

           var addressStateParameter = new SqlParameter("AddressState", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressState))
           {
               addressStateParameter.IsNullable = true;
               addressStateParameter.Value = DBNull.Value;
           }
           else
           {
               addressStateParameter.Value = addressState;
           }

           var postalCodeParameter = new SqlParameter("PostalCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(postalCode))
           {
               postalCodeParameter.IsNullable = true;
               postalCodeParameter.Value = DBNull.Value;
           }
           else
           {
               postalCodeParameter.Value = postalCode;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveRFQQuotesDetails @RFQuotesID, @RFQID, @QuotesReference, @QuotesSubject, @QuotesPrice, @EstimatecompletionTime, @StatusID, @QuotesReceivedDate, @CompanyName, @CompanyAddress, @CompanyPhoneNumber, @CompanyFaxNumber, @CompanyEmail, @CompanyContactPersonName, @ContactPersonMobilenumber, @ContactPersonEmail, @UploadedReferenceFile, @AddressLine1, @AddressLine2, @AddressLine3, @City, @AddressState, @PostalCode, @CreatedBy, @ErrorCode OUT", rFQuotesIDParameter, rFQIDParameter, quotesReferenceParameter, quotesSubjectParameter, quotesPriceParameter, estimatecompletionTimeParameter, statusIDParameter, quotesReceivedDateParameter, companyNameParameter, companyAddressParameter, companyPhoneNumberParameter, companyFaxNumberParameter, companyEmailParameter, companyContactPersonNameParameter, contactPersonMobilenumberParameter, contactPersonEmailParameter, uploadedReferenceFileParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, cityParameter, addressStateParameter, postalCodeParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveRFQStatusChange(Nullable<Int32> rFQID, Nullable<Int32> statusId, string updatedBy)
        {

            var rFQIDParameter = rFQID.HasValue ?
                new SqlParameter("RFQID", rFQID) :
                new SqlParameter("RFQID", SqlDbType.Int);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveRFQStatusChange @RFQID, @StatusId, @UpdatedBy", rFQIDParameter, statusIdParameter, updatedByParameter);


            return retVal;

        }
        public virtual int SP_DGC_SaveRolesDetails(Nullable<Int32> roleId, Nullable<Int32> departmentId, string roleName, string roleDisplayName, string roleDescription, string isActive, string createdBy, ObjectParameter errorCode)
        {

            var roleIdParameter = roleId.HasValue ?
                new SqlParameter("RoleId", roleId) :
                new SqlParameter("RoleId", SqlDbType.Int);

            var departmentIdParameter = departmentId.HasValue ?
                new SqlParameter("DepartmentId", departmentId) :
                new SqlParameter("DepartmentId", SqlDbType.Int);

           var roleNameParameter = new SqlParameter("RoleName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(roleName))
           {
               roleNameParameter.IsNullable = true;
               roleNameParameter.Value = DBNull.Value;
           }
           else
           {
               roleNameParameter.Value = roleName;
           }

           var roleDisplayNameParameter = new SqlParameter("RoleDisplayName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(roleDisplayName))
           {
               roleDisplayNameParameter.IsNullable = true;
               roleDisplayNameParameter.Value = DBNull.Value;
           }
           else
           {
               roleDisplayNameParameter.Value = roleDisplayName;
           }

           var roleDescriptionParameter = new SqlParameter("RoleDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(roleDescription))
           {
               roleDescriptionParameter.IsNullable = true;
               roleDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               roleDescriptionParameter.Value = roleDescription;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveRolesDetails @RoleId, @DepartmentId, @RoleName, @RoleDisplayName, @RoleDescription, @IsActive, @CreatedBy, @ErrorCode OUT", roleIdParameter, departmentIdParameter, roleNameParameter, roleDisplayNameParameter, roleDescriptionParameter, isActiveParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveShopActionDetails(Nullable<Int32> commercialUnitId, Nullable<Int32> shopRegistrationId, Nullable<Int32> requestStatusId, string paymentInfo, string comments, string additionalReferenceFilePath, Nullable<Int64> actionTakenByUserId, string updatedBY, ObjectParameter errorCode, Nullable<Int32> previousStatusID, Nullable<DateTime> finalStopBillDate, ObjectParameter shopRequestActionId)
        {

            var commercialUnitIdParameter = commercialUnitId.HasValue ?
                new SqlParameter("CommercialUnitId", commercialUnitId) :
                new SqlParameter("CommercialUnitId", SqlDbType.Int);

            var shopRegistrationIdParameter = shopRegistrationId.HasValue ?
                new SqlParameter("ShopRegistrationId", shopRegistrationId) :
                new SqlParameter("ShopRegistrationId", SqlDbType.Int);

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var additionalReferenceFilePathParameter = new SqlParameter("AdditionalReferenceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferenceFilePath))
           {
               additionalReferenceFilePathParameter.IsNullable = true;
               additionalReferenceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferenceFilePathParameter.Value = additionalReferenceFilePath;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);

            var finalStopBillDateParameter = finalStopBillDate.HasValue ?
                new SqlParameter("FinalStopBillDate", finalStopBillDate) :
                new SqlParameter("FinalStopBillDate", SqlDbType.DateTime);

           var shopRequestActionIdParameter = new SqlParameter("ShopRequestActionId", SqlDbType.BigInt);
               shopRequestActionIdParameter.Direction = System.Data.ParameterDirection.Output;
               shopRequestActionIdParameter.Value = shopRequestActionId != null ? shopRequestActionId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveShopActionDetails @CommercialUnitId, @ShopRegistrationId, @RequestStatusId, @PaymentInfo, @Comments, @AdditionalReferenceFilePath, @ActionTakenByUserId, @UpdatedBY, @ErrorCode OUT, @PreviousStatusID, @FinalStopBillDate, @ShopRequestActionId OUT", commercialUnitIdParameter, shopRegistrationIdParameter, requestStatusIdParameter, paymentInfoParameter, commentsParameter, additionalReferenceFilePathParameter, actionTakenByUserIdParameter, updatedBYParameter, errorCodeParameter, previousStatusIDParameter, finalStopBillDateParameter, shopRequestActionIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            shopRequestActionId.Value = shopRequestActionIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveShopMemberDetails(Nullable<Int32> shopMemberId, Nullable<Int32> shopRegistrationId, string memberName, string memberEmail, string memberMobileNo, string isCardIssued, string cardNumber, string isActive, string updatedBy, ObjectParameter errorCode)
        {

            var shopMemberIdParameter = shopMemberId.HasValue ?
                new SqlParameter("ShopMemberId", shopMemberId) :
                new SqlParameter("ShopMemberId", SqlDbType.Int);

            var shopRegistrationIdParameter = shopRegistrationId.HasValue ?
                new SqlParameter("ShopRegistrationId", shopRegistrationId) :
                new SqlParameter("ShopRegistrationId", SqlDbType.Int);

           var memberNameParameter = new SqlParameter("MemberName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(memberName))
           {
               memberNameParameter.IsNullable = true;
               memberNameParameter.Value = DBNull.Value;
           }
           else
           {
               memberNameParameter.Value = memberName;
           }

           var memberEmailParameter = new SqlParameter("MemberEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(memberEmail))
           {
               memberEmailParameter.IsNullable = true;
               memberEmailParameter.Value = DBNull.Value;
           }
           else
           {
               memberEmailParameter.Value = memberEmail;
           }

           var memberMobileNoParameter = new SqlParameter("MemberMobileNo", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(memberMobileNo))
           {
               memberMobileNoParameter.IsNullable = true;
               memberMobileNoParameter.Value = DBNull.Value;
           }
           else
           {
               memberMobileNoParameter.Value = memberMobileNo;
           }

           var isCardIssuedParameter = new SqlParameter("IsCardIssued", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isCardIssued))
           {
               isCardIssuedParameter.IsNullable = true;
               isCardIssuedParameter.Value = DBNull.Value;
           }
           else
           {
               isCardIssuedParameter.Value = isCardIssued;
           }

           var cardNumberParameter = new SqlParameter("CardNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cardNumber))
           {
               cardNumberParameter.IsNullable = true;
               cardNumberParameter.Value = DBNull.Value;
           }
           else
           {
               cardNumberParameter.Value = cardNumber;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveShopMemberDetails @ShopMemberId, @ShopRegistrationId, @MemberName, @MemberEmail, @MemberMobileNo, @IsCardIssued, @CardNumber, @IsActive, @UpdatedBy, @ErrorCode OUT", shopMemberIdParameter, shopRegistrationIdParameter, memberNameParameter, memberEmailParameter, memberMobileNoParameter, isCardIssuedParameter, cardNumberParameter, isActiveParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveShopPICDetails(Nullable<Int32> shopPICId, Nullable<Int32> shopRegistrationId, Nullable<Int64> picUserID, string pICName, string pICEmail, string pICMobileNumber, string isActive, string createdBy, ObjectParameter errorCode, Nullable<Int32> shopSetupId)
        {

            var shopPICIdParameter = shopPICId.HasValue ?
                new SqlParameter("ShopPICId", shopPICId) :
                new SqlParameter("ShopPICId", SqlDbType.Int);

            var shopRegistrationIdParameter = shopRegistrationId.HasValue ?
                new SqlParameter("ShopRegistrationId", shopRegistrationId) :
                new SqlParameter("ShopRegistrationId", SqlDbType.Int);

            var picUserIDParameter = picUserID.HasValue ?
                new SqlParameter("PicUserID", picUserID) :
                new SqlParameter("PicUserID", SqlDbType.BigInt);

           var pICNameParameter = new SqlParameter("PICName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(pICName))
           {
               pICNameParameter.IsNullable = true;
               pICNameParameter.Value = DBNull.Value;
           }
           else
           {
               pICNameParameter.Value = pICName;
           }

           var pICEmailParameter = new SqlParameter("PICEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(pICEmail))
           {
               pICEmailParameter.IsNullable = true;
               pICEmailParameter.Value = DBNull.Value;
           }
           else
           {
               pICEmailParameter.Value = pICEmail;
           }

           var pICMobileNumberParameter = new SqlParameter("PICMobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(pICMobileNumber))
           {
               pICMobileNumberParameter.IsNullable = true;
               pICMobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               pICMobileNumberParameter.Value = pICMobileNumber;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var shopSetupIdParameter = shopSetupId.HasValue ?
                new SqlParameter("shopSetupId", shopSetupId) :
                new SqlParameter("shopSetupId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveShopPICDetails @ShopPICId, @ShopRegistrationId, @PicUserID, @PICName, @PICEmail, @PICMobileNumber, @IsActive, @CreatedBy, @ErrorCode OUT, @shopSetupId", shopPICIdParameter, shopRegistrationIdParameter, picUserIDParameter, pICNameParameter, pICEmailParameter, pICMobileNumberParameter, isActiveParameter, createdByParameter, errorCodeParameter, shopSetupIdParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveShopRegistration_Payment_LedgerDetails(Nullable<Int32> shopRegistrationId, Nullable<Int64> sRActionId, string receivedByUser, ObjectParameter errorCode)
        {

            var shopRegistrationIdParameter = shopRegistrationId.HasValue ?
                new SqlParameter("ShopRegistrationId", shopRegistrationId) :
                new SqlParameter("ShopRegistrationId", SqlDbType.Int);

            var sRActionIdParameter = sRActionId.HasValue ?
                new SqlParameter("SRActionId", sRActionId) :
                new SqlParameter("SRActionId", SqlDbType.BigInt);

           var receivedByUserParameter = new SqlParameter("ReceivedByUser", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(receivedByUser))
           {
               receivedByUserParameter.IsNullable = true;
               receivedByUserParameter.Value = DBNull.Value;
           }
           else
           {
               receivedByUserParameter.Value = receivedByUser;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveShopRegistration_Payment_LedgerDetails @ShopRegistrationId, @SRActionId, @ReceivedByUser, @ErrorCode OUT", shopRegistrationIdParameter, sRActionIdParameter, receivedByUserParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveShopRegistration_PaymentRefund_LedgerDetails(Nullable<Int32> shopRegistrationId, Nullable<Int64> requestActionId, string receivedByUser, ObjectParameter errorCode)
        {

            var shopRegistrationIdParameter = shopRegistrationId.HasValue ?
                new SqlParameter("ShopRegistrationId", shopRegistrationId) :
                new SqlParameter("ShopRegistrationId", SqlDbType.Int);

            var requestActionIdParameter = requestActionId.HasValue ?
                new SqlParameter("RequestActionId", requestActionId) :
                new SqlParameter("RequestActionId", SqlDbType.BigInt);

           var receivedByUserParameter = new SqlParameter("ReceivedByUser", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(receivedByUser))
           {
               receivedByUserParameter.IsNullable = true;
               receivedByUserParameter.Value = DBNull.Value;
           }
           else
           {
               receivedByUserParameter.Value = receivedByUser;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveShopRegistration_PaymentRefund_LedgerDetails @ShopRegistrationId, @RequestActionId, @ReceivedByUser, @ErrorCode OUT", shopRegistrationIdParameter, requestActionIdParameter, receivedByUserParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveShopRegistrationDetails(Nullable<Int32> shopRegistrationId, Nullable<Int32> unitId, Nullable<Decimal> rentalAmount, Nullable<Decimal> depositAmount, string companyName, string companyAddress, string companyPhoneNumber, string companyFaxNumber, string companyEmail, Nullable<DateTime> contractFrom, Nullable<DateTime> contractTo, string rentalAgreementDocumentPath, string shopType, string remarks, Nullable<Int32> vacationNoticePeriodInDays, string updatedBy, ObjectParameter errorCode, Nullable<Int32> shopSetupId)
        {

            var shopRegistrationIdParameter = shopRegistrationId.HasValue ?
                new SqlParameter("ShopRegistrationId", shopRegistrationId) :
                new SqlParameter("ShopRegistrationId", SqlDbType.Int);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var rentalAmountParameter = rentalAmount.HasValue ?
                new SqlParameter("RentalAmount", rentalAmount) :
                new SqlParameter("RentalAmount", SqlDbType.Decimal);

            var depositAmountParameter = depositAmount.HasValue ?
                new SqlParameter("DepositAmount", depositAmount) :
                new SqlParameter("DepositAmount", SqlDbType.Decimal);

           var companyNameParameter = new SqlParameter("CompanyName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyName))
           {
               companyNameParameter.IsNullable = true;
               companyNameParameter.Value = DBNull.Value;
           }
           else
           {
               companyNameParameter.Value = companyName;
           }

           var companyAddressParameter = new SqlParameter("CompanyAddress", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyAddress))
           {
               companyAddressParameter.IsNullable = true;
               companyAddressParameter.Value = DBNull.Value;
           }
           else
           {
               companyAddressParameter.Value = companyAddress;
           }

           var companyPhoneNumberParameter = new SqlParameter("CompanyPhoneNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyPhoneNumber))
           {
               companyPhoneNumberParameter.IsNullable = true;
               companyPhoneNumberParameter.Value = DBNull.Value;
           }
           else
           {
               companyPhoneNumberParameter.Value = companyPhoneNumber;
           }

           var companyFaxNumberParameter = new SqlParameter("CompanyFaxNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyFaxNumber))
           {
               companyFaxNumberParameter.IsNullable = true;
               companyFaxNumberParameter.Value = DBNull.Value;
           }
           else
           {
               companyFaxNumberParameter.Value = companyFaxNumber;
           }

           var companyEmailParameter = new SqlParameter("CompanyEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyEmail))
           {
               companyEmailParameter.IsNullable = true;
               companyEmailParameter.Value = DBNull.Value;
           }
           else
           {
               companyEmailParameter.Value = companyEmail;
           }

            var contractFromParameter = contractFrom.HasValue ?
                new SqlParameter("ContractFrom", contractFrom) :
                new SqlParameter("ContractFrom", SqlDbType.DateTime);

            var contractToParameter = contractTo.HasValue ?
                new SqlParameter("ContractTo", contractTo) :
                new SqlParameter("ContractTo", SqlDbType.DateTime);

           var rentalAgreementDocumentPathParameter = new SqlParameter("RentalAgreementDocumentPath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(rentalAgreementDocumentPath))
           {
               rentalAgreementDocumentPathParameter.IsNullable = true;
               rentalAgreementDocumentPathParameter.Value = DBNull.Value;
           }
           else
           {
               rentalAgreementDocumentPathParameter.Value = rentalAgreementDocumentPath;
           }

           var shopTypeParameter = new SqlParameter("ShopType", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(shopType))
           {
               shopTypeParameter.IsNullable = true;
               shopTypeParameter.Value = DBNull.Value;
           }
           else
           {
               shopTypeParameter.Value = shopType;
           }

           var remarksParameter = new SqlParameter("Remarks", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(remarks))
           {
               remarksParameter.IsNullable = true;
               remarksParameter.Value = DBNull.Value;
           }
           else
           {
               remarksParameter.Value = remarks;
           }

            var vacationNoticePeriodInDaysParameter = vacationNoticePeriodInDays.HasValue ?
                new SqlParameter("VacationNoticePeriodInDays", vacationNoticePeriodInDays) :
                new SqlParameter("VacationNoticePeriodInDays", SqlDbType.Int);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var shopSetupIdParameter = shopSetupId.HasValue ?
                new SqlParameter("shopSetupId", shopSetupId) :
                new SqlParameter("shopSetupId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveShopRegistrationDetails @ShopRegistrationId, @UnitId, @RentalAmount, @DepositAmount, @CompanyName, @CompanyAddress, @CompanyPhoneNumber, @CompanyFaxNumber, @CompanyEmail, @ContractFrom, @ContractTo, @RentalAgreementDocumentPath, @ShopType, @Remarks, @VacationNoticePeriodInDays, @UpdatedBy, @ErrorCode OUT, @shopSetupId", shopRegistrationIdParameter, unitIdParameter, rentalAmountParameter, depositAmountParameter, companyNameParameter, companyAddressParameter, companyPhoneNumberParameter, companyFaxNumberParameter, companyEmailParameter, contractFromParameter, contractToParameter, rentalAgreementDocumentPathParameter, shopTypeParameter, remarksParameter, vacationNoticePeriodInDaysParameter, updatedByParameter, errorCodeParameter, shopSetupIdParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveSinkFundDetails(string sinkFundXML, ObjectParameter errorCode)
        {

           var sinkFundXMLParameter = new SqlParameter("SinkFundXML", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sinkFundXML))
           {
               sinkFundXMLParameter.IsNullable = true;
               sinkFundXMLParameter.Value = DBNull.Value;
           }
           else
           {
               sinkFundXMLParameter.Value = sinkFundXML;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveSinkFundDetails @SinkFundXML, @ErrorCode OUT", sinkFundXMLParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveSMSDeliveryDetails(string recieverMobileNumber, string aPIReferenceId, string sentBy)
        {

           var recieverMobileNumberParameter = new SqlParameter("RecieverMobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(recieverMobileNumber))
           {
               recieverMobileNumberParameter.IsNullable = true;
               recieverMobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               recieverMobileNumberParameter.Value = recieverMobileNumber;
           }

           var aPIReferenceIdParameter = new SqlParameter("APIReferenceId", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(aPIReferenceId))
           {
               aPIReferenceIdParameter.IsNullable = true;
               aPIReferenceIdParameter.Value = DBNull.Value;
           }
           else
           {
               aPIReferenceIdParameter.Value = aPIReferenceId;
           }

           var sentByParameter = new SqlParameter("SentBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sentBy))
           {
               sentByParameter.IsNullable = true;
               sentByParameter.Value = DBNull.Value;
           }
           else
           {
               sentByParameter.Value = sentBy;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveSMSDeliveryDetails @RecieverMobileNumber, @APIReferenceId, @SentBy", recieverMobileNumberParameter, aPIReferenceIdParameter, sentByParameter);


            return retVal;

        }
        public virtual int SP_DGC_SaveStockCategory(Nullable<Int32> stockCategoryId, string isProvalleyAdmin, string categoryName, string categoryDescription, string isActive, Nullable<DateTime> effectiveFrom, string createdBy, ObjectParameter errorCode)
        {

            var stockCategoryIdParameter = stockCategoryId.HasValue ?
                new SqlParameter("StockCategoryId", stockCategoryId) :
                new SqlParameter("StockCategoryId", SqlDbType.Int);

           var isProvalleyAdminParameter = new SqlParameter("IsProvalleyAdmin", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isProvalleyAdmin))
           {
               isProvalleyAdminParameter.IsNullable = true;
               isProvalleyAdminParameter.Value = DBNull.Value;
           }
           else
           {
               isProvalleyAdminParameter.Value = isProvalleyAdmin;
           }

           var categoryNameParameter = new SqlParameter("CategoryName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(categoryName))
           {
               categoryNameParameter.IsNullable = true;
               categoryNameParameter.Value = DBNull.Value;
           }
           else
           {
               categoryNameParameter.Value = categoryName;
           }

           var categoryDescriptionParameter = new SqlParameter("CategoryDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(categoryDescription))
           {
               categoryDescriptionParameter.IsNullable = true;
               categoryDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               categoryDescriptionParameter.Value = categoryDescription;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

            var effectiveFromParameter = effectiveFrom.HasValue ?
                new SqlParameter("EffectiveFrom", effectiveFrom) :
                new SqlParameter("EffectiveFrom", SqlDbType.DateTime);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveStockCategory @StockCategoryId, @IsProvalleyAdmin, @CategoryName, @CategoryDescription, @IsActive, @EffectiveFrom, @CreatedBy, @ErrorCode OUT", stockCategoryIdParameter, isProvalleyAdminParameter, categoryNameParameter, categoryDescriptionParameter, isActiveParameter, effectiveFromParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveStockDispatchDetails(Nullable<Int64> stockDeliveryDetailsId, Nullable<Int64> materialId, Nullable<Int32> purchaseInvoiceItemId, Nullable<DateTime> actualDeliveredDate, Nullable<Int32> deliveredQuantity, string deliveredToPersonname, string deliveredToPersonContactNumber, string deliveredToEmail, string createdBy, ObjectParameter errorCode)
        {

            var stockDeliveryDetailsIdParameter = stockDeliveryDetailsId.HasValue ?
                new SqlParameter("StockDeliveryDetailsId", stockDeliveryDetailsId) :
                new SqlParameter("StockDeliveryDetailsId", SqlDbType.BigInt);

            var materialIdParameter = materialId.HasValue ?
                new SqlParameter("MaterialId", materialId) :
                new SqlParameter("MaterialId", SqlDbType.BigInt);

            var purchaseInvoiceItemIdParameter = purchaseInvoiceItemId.HasValue ?
                new SqlParameter("PurchaseInvoiceItemId", purchaseInvoiceItemId) :
                new SqlParameter("PurchaseInvoiceItemId", SqlDbType.Int);

            var actualDeliveredDateParameter = actualDeliveredDate.HasValue ?
                new SqlParameter("ActualDeliveredDate", actualDeliveredDate) :
                new SqlParameter("ActualDeliveredDate", SqlDbType.DateTime);

            var deliveredQuantityParameter = deliveredQuantity.HasValue ?
                new SqlParameter("DeliveredQuantity", deliveredQuantity) :
                new SqlParameter("DeliveredQuantity", SqlDbType.Int);

           var deliveredToPersonnameParameter = new SqlParameter("DeliveredToPersonname", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deliveredToPersonname))
           {
               deliveredToPersonnameParameter.IsNullable = true;
               deliveredToPersonnameParameter.Value = DBNull.Value;
           }
           else
           {
               deliveredToPersonnameParameter.Value = deliveredToPersonname;
           }

           var deliveredToPersonContactNumberParameter = new SqlParameter("DeliveredToPersonContactNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deliveredToPersonContactNumber))
           {
               deliveredToPersonContactNumberParameter.IsNullable = true;
               deliveredToPersonContactNumberParameter.Value = DBNull.Value;
           }
           else
           {
               deliveredToPersonContactNumberParameter.Value = deliveredToPersonContactNumber;
           }

           var deliveredToEmailParameter = new SqlParameter("DeliveredToEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deliveredToEmail))
           {
               deliveredToEmailParameter.IsNullable = true;
               deliveredToEmailParameter.Value = DBNull.Value;
           }
           else
           {
               deliveredToEmailParameter.Value = deliveredToEmail;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveStockDispatchDetails @StockDeliveryDetailsId, @MaterialId, @PurchaseInvoiceItemId, @ActualDeliveredDate, @DeliveredQuantity, @DeliveredToPersonname, @DeliveredToPersonContactNumber, @DeliveredToEmail, @CreatedBy, @ErrorCode OUT", stockDeliveryDetailsIdParameter, materialIdParameter, purchaseInvoiceItemIdParameter, actualDeliveredDateParameter, deliveredQuantityParameter, deliveredToPersonnameParameter, deliveredToPersonContactNumberParameter, deliveredToEmailParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveStockSellingPrice(Nullable<Int32> stockSellingPriceId, Nullable<Int64> stockID, Nullable<Decimal> sellingPrice, Nullable<DateTime> effectivefrom, string createdBy, ObjectParameter errorCode)
        {

            var stockSellingPriceIdParameter = stockSellingPriceId.HasValue ?
                new SqlParameter("StockSellingPriceId", stockSellingPriceId) :
                new SqlParameter("StockSellingPriceId", SqlDbType.Int);

            var stockIDParameter = stockID.HasValue ?
                new SqlParameter("StockID", stockID) :
                new SqlParameter("StockID", SqlDbType.BigInt);

            var sellingPriceParameter = sellingPrice.HasValue ?
                new SqlParameter("SellingPrice", sellingPrice) :
                new SqlParameter("SellingPrice", SqlDbType.Decimal);

            var effectivefromParameter = effectivefrom.HasValue ?
                new SqlParameter("Effectivefrom", effectivefrom) :
                new SqlParameter("Effectivefrom", SqlDbType.DateTime);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveStockSellingPrice @StockSellingPriceId, @StockID, @SellingPrice, @Effectivefrom, @CreatedBy, @ErrorCode OUT", stockSellingPriceIdParameter, stockIDParameter, sellingPriceParameter, effectivefromParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveTaxAmount(Nullable<Int32> taxSetUpId, string taxCode, string taxDescription, string isActive, Nullable<DateTime> effectiveFrom, string createdBy, ObjectParameter errorCode)
        {

            var taxSetUpIdParameter = taxSetUpId.HasValue ?
                new SqlParameter("TaxSetUpId", taxSetUpId) :
                new SqlParameter("TaxSetUpId", SqlDbType.Int);

           var taxCodeParameter = new SqlParameter("TaxCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(taxCode))
           {
               taxCodeParameter.IsNullable = true;
               taxCodeParameter.Value = DBNull.Value;
           }
           else
           {
               taxCodeParameter.Value = taxCode;
           }

           var taxDescriptionParameter = new SqlParameter("TaxDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(taxDescription))
           {
               taxDescriptionParameter.IsNullable = true;
               taxDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               taxDescriptionParameter.Value = taxDescription;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

            var effectiveFromParameter = effectiveFrom.HasValue ?
                new SqlParameter("EffectiveFrom", effectiveFrom) :
                new SqlParameter("EffectiveFrom", SqlDbType.DateTime);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveTaxAmount @TaxSetUpId, @TaxCode, @TaxDescription, @IsActive, @EffectiveFrom, @CreatedBy, @ErrorCode OUT", taxSetUpIdParameter, taxCodeParameter, taxDescriptionParameter, isActiveParameter, effectiveFromParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveTrainerDetails(Nullable<Int32> trainerId, Nullable<Int32> facilitiesId, string trainerName, string mobileNo, string email, string trainerTiming, Nullable<DateTime> effectiveFrom, string isActive, string profilePic, string updatedBy, string isAllowMultipleBookingsForTimeSlot, ObjectParameter errorCode)
        {

            var trainerIdParameter = trainerId.HasValue ?
                new SqlParameter("TrainerId", trainerId) :
                new SqlParameter("TrainerId", SqlDbType.Int);

            var facilitiesIdParameter = facilitiesId.HasValue ?
                new SqlParameter("FacilitiesId", facilitiesId) :
                new SqlParameter("FacilitiesId", SqlDbType.Int);

           var trainerNameParameter = new SqlParameter("TrainerName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(trainerName))
           {
               trainerNameParameter.IsNullable = true;
               trainerNameParameter.Value = DBNull.Value;
           }
           else
           {
               trainerNameParameter.Value = trainerName;
           }

           var mobileNoParameter = new SqlParameter("MobileNo", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(mobileNo))
           {
               mobileNoParameter.IsNullable = true;
               mobileNoParameter.Value = DBNull.Value;
           }
           else
           {
               mobileNoParameter.Value = mobileNo;
           }

           var emailParameter = new SqlParameter("Email", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(email))
           {
               emailParameter.IsNullable = true;
               emailParameter.Value = DBNull.Value;
           }
           else
           {
               emailParameter.Value = email;
           }

            var trainerTimingParameter = trainerTiming != null ?
                new SqlParameter("TrainerTiming", trainerTiming) :
                new SqlParameter("TrainerTiming", SqlDbType.Xml);

            var effectiveFromParameter = effectiveFrom.HasValue ?
                new SqlParameter("EffectiveFrom", effectiveFrom) :
                new SqlParameter("EffectiveFrom", SqlDbType.DateTime);

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var profilePicParameter = new SqlParameter("ProfilePic", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(profilePic))
           {
               profilePicParameter.IsNullable = true;
               profilePicParameter.Value = DBNull.Value;
           }
           else
           {
               profilePicParameter.Value = profilePic;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var isAllowMultipleBookingsForTimeSlotParameter = new SqlParameter("IsAllowMultipleBookingsForTimeSlot", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isAllowMultipleBookingsForTimeSlot))
           {
               isAllowMultipleBookingsForTimeSlotParameter.IsNullable = true;
               isAllowMultipleBookingsForTimeSlotParameter.Value = DBNull.Value;
           }
           else
           {
               isAllowMultipleBookingsForTimeSlotParameter.Value = isAllowMultipleBookingsForTimeSlot;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveTrainerDetails @TrainerId, @FacilitiesId, @TrainerName, @MobileNo, @Email, @TrainerTiming, @EffectiveFrom, @IsActive, @ProfilePic, @UpdatedBy, @IsAllowMultipleBookingsForTimeSlot, @ErrorCode OUT", trainerIdParameter, facilitiesIdParameter, trainerNameParameter, mobileNoParameter, emailParameter, trainerTimingParameter, effectiveFromParameter, isActiveParameter, profilePicParameter, updatedByParameter, isAllowMultipleBookingsForTimeSlotParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnitDetails(Nullable<Int32> unitId, string unitName, string unitDescription, Nullable<Single> builtUpArea, Nullable<Int32> floorId, Nullable<Int32> blockId, string isActive, string updatedBy, string isResidence, Nullable<Decimal> rentPerMonth, Nullable<Decimal> depositAmount, string qrCodePath, ObjectParameter errorCode)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

           var unitNameParameter = new SqlParameter("UnitName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitName))
           {
               unitNameParameter.IsNullable = true;
               unitNameParameter.Value = DBNull.Value;
           }
           else
           {
               unitNameParameter.Value = unitName;
           }

           var unitDescriptionParameter = new SqlParameter("UnitDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitDescription))
           {
               unitDescriptionParameter.IsNullable = true;
               unitDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               unitDescriptionParameter.Value = unitDescription;
           }

            var builtUpAreaParameter = builtUpArea.HasValue ?
                new SqlParameter("BuiltUpArea", builtUpArea) :
                new SqlParameter("BuiltUpArea", SqlDbType.Real);

            var floorIdParameter = floorId.HasValue ?
                new SqlParameter("FloorId", floorId) :
                new SqlParameter("FloorId", SqlDbType.Int);

            var blockIdParameter = blockId.HasValue ?
                new SqlParameter("BlockId", blockId) :
                new SqlParameter("BlockId", SqlDbType.Int);

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var isResidenceParameter = new SqlParameter("IsResidence", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isResidence))
           {
               isResidenceParameter.IsNullable = true;
               isResidenceParameter.Value = DBNull.Value;
           }
           else
           {
               isResidenceParameter.Value = isResidence;
           }

            var rentPerMonthParameter = rentPerMonth.HasValue ?
                new SqlParameter("RentPerMonth", rentPerMonth) :
                new SqlParameter("RentPerMonth", SqlDbType.Decimal);

            var depositAmountParameter = depositAmount.HasValue ?
                new SqlParameter("DepositAmount", depositAmount) :
                new SqlParameter("DepositAmount", SqlDbType.Decimal);

           var qrCodePathParameter = new SqlParameter("QrCodePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(qrCodePath))
           {
               qrCodePathParameter.IsNullable = true;
               qrCodePathParameter.Value = DBNull.Value;
           }
           else
           {
               qrCodePathParameter.Value = qrCodePath;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnitDetails @UnitId, @UnitName, @UnitDescription, @BuiltUpArea, @FloorId, @BlockId, @IsActive, @UpdatedBy, @IsResidence, @RentPerMonth, @DepositAmount, @QrCodePath, @ErrorCode OUT", unitIdParameter, unitNameParameter, unitDescriptionParameter, builtUpAreaParameter, floorIdParameter, blockIdParameter, isActiveParameter, updatedByParameter, isResidenceParameter, rentPerMonthParameter, depositAmountParameter, qrCodePathParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnitDueRemainder_MailsentList(Nullable<Int32> dueRemainderId, Nullable<Int32> unitId, string notificationType, Nullable<Int64> notifiedByUserId, Nullable<Int64> notifiedToReceiptance, string notifiedByUser, Nullable<DateTime> notifiedOn, ObjectParameter errorCode)
        {

            var dueRemainderIdParameter = dueRemainderId.HasValue ?
                new SqlParameter("DueRemainderId", dueRemainderId) :
                new SqlParameter("DueRemainderId", SqlDbType.Int);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

           var notificationTypeParameter = new SqlParameter("NotificationType", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(notificationType))
           {
               notificationTypeParameter.IsNullable = true;
               notificationTypeParameter.Value = DBNull.Value;
           }
           else
           {
               notificationTypeParameter.Value = notificationType;
           }

            var notifiedByUserIdParameter = notifiedByUserId.HasValue ?
                new SqlParameter("NotifiedByUserId", notifiedByUserId) :
                new SqlParameter("NotifiedByUserId", SqlDbType.BigInt);

            var notifiedToReceiptanceParameter = notifiedToReceiptance.HasValue ?
                new SqlParameter("NotifiedToReceiptance", notifiedToReceiptance) :
                new SqlParameter("NotifiedToReceiptance", SqlDbType.BigInt);

           var notifiedByUserParameter = new SqlParameter("NotifiedByUser", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(notifiedByUser))
           {
               notifiedByUserParameter.IsNullable = true;
               notifiedByUserParameter.Value = DBNull.Value;
           }
           else
           {
               notifiedByUserParameter.Value = notifiedByUser;
           }

            var notifiedOnParameter = notifiedOn.HasValue ?
                new SqlParameter("NotifiedOn", notifiedOn) :
                new SqlParameter("NotifiedOn", SqlDbType.DateTime);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnitDueRemainder_MailsentList @DueRemainderId, @UnitId, @NotificationType, @NotifiedByUserId, @NotifiedToReceiptance, @NotifiedByUser, @NotifiedOn, @ErrorCode OUT", dueRemainderIdParameter, unitIdParameter, notificationTypeParameter, notifiedByUserIdParameter, notifiedToReceiptanceParameter, notifiedByUserParameter, notifiedOnParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnitInvoiceCofigurationDetails(Nullable<Int32> unitConfigurationId, string billGeneratedDate, Nullable<Int32> invoiceSourceId, Nullable<Int32> billDueDuration, Nullable<Decimal> lateFee, Nullable<Decimal> rateOfInterest, Nullable<DateTime> effectiveFrom, string updatedBy, ObjectParameter errorCode)
        {

            var unitConfigurationIdParameter = unitConfigurationId.HasValue ?
                new SqlParameter("UnitConfigurationId", unitConfigurationId) :
                new SqlParameter("UnitConfigurationId", SqlDbType.Int);

           var billGeneratedDateParameter = new SqlParameter("BillGeneratedDate", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(billGeneratedDate))
           {
               billGeneratedDateParameter.IsNullable = true;
               billGeneratedDateParameter.Value = DBNull.Value;
           }
           else
           {
               billGeneratedDateParameter.Value = billGeneratedDate;
           }

            var invoiceSourceIdParameter = invoiceSourceId.HasValue ?
                new SqlParameter("InvoiceSourceId", invoiceSourceId) :
                new SqlParameter("InvoiceSourceId", SqlDbType.Int);

            var billDueDurationParameter = billDueDuration.HasValue ?
                new SqlParameter("BillDueDuration", billDueDuration) :
                new SqlParameter("BillDueDuration", SqlDbType.Int);

            var lateFeeParameter = lateFee.HasValue ?
                new SqlParameter("LateFee", lateFee) :
                new SqlParameter("LateFee", SqlDbType.Decimal);

            var rateOfInterestParameter = rateOfInterest.HasValue ?
                new SqlParameter("RateOfInterest", rateOfInterest) :
                new SqlParameter("RateOfInterest", SqlDbType.Decimal);

            var effectiveFromParameter = effectiveFrom.HasValue ?
                new SqlParameter("EffectiveFrom", effectiveFrom) :
                new SqlParameter("EffectiveFrom", SqlDbType.DateTime);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnitInvoiceCofigurationDetails @UnitConfigurationId, @BillGeneratedDate, @InvoiceSourceId, @BillDueDuration, @LateFee, @RateOfInterest, @EffectiveFrom, @UpdatedBy, @ErrorCode OUT", unitConfigurationIdParameter, billGeneratedDateParameter, invoiceSourceIdParameter, billDueDurationParameter, lateFeeParameter, rateOfInterestParameter, effectiveFromParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnitInvoicePaymentReversalDetails(Nullable<Int32> paymentReversalId, Nullable<Int64> paymentRequestId, Nullable<Int64> unitId, string comments, Nullable<DateTime> reversalDate, string reversalBy, Nullable<Int64> reversalByUserId, ObjectParameter errorCode)
        {

            var paymentReversalIdParameter = paymentReversalId.HasValue ?
                new SqlParameter("PaymentReversalId", paymentReversalId) :
                new SqlParameter("PaymentReversalId", SqlDbType.Int);

            var paymentRequestIdParameter = paymentRequestId.HasValue ?
                new SqlParameter("PaymentRequestId", paymentRequestId) :
                new SqlParameter("PaymentRequestId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.BigInt);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

            var reversalDateParameter = reversalDate.HasValue ?
                new SqlParameter("ReversalDate", reversalDate) :
                new SqlParameter("ReversalDate", SqlDbType.DateTime);

           var reversalByParameter = new SqlParameter("ReversalBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(reversalBy))
           {
               reversalByParameter.IsNullable = true;
               reversalByParameter.Value = DBNull.Value;
           }
           else
           {
               reversalByParameter.Value = reversalBy;
           }

            var reversalByUserIdParameter = reversalByUserId.HasValue ?
                new SqlParameter("ReversalByUserId", reversalByUserId) :
                new SqlParameter("ReversalByUserId", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnitInvoicePaymentReversalDetails @PaymentReversalId, @PaymentRequestId, @UnitId, @Comments, @ReversalDate, @ReversalBy, @ReversalByUserId, @ErrorCode OUT", paymentReversalIdParameter, paymentRequestIdParameter, unitIdParameter, commentsParameter, reversalDateParameter, reversalByParameter, reversalByUserIdParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnitMasterDetails(Nullable<Int32> unitId, string unitName, string unitDescription, Nullable<Single> builtUpArea, Nullable<Int32> floorId, Nullable<Int32> blockId, string isActive, string updatedBy, string isResidence, Nullable<Decimal> rentPerMonth, Nullable<Decimal> depositAmount, Nullable<Decimal> openingBalance, Nullable<DateTime> oBAsONDate, string qrCodePath, Nullable<Int32> noOfParkingSlots, Nullable<Single> shareArea, Nullable<Single> totalArea, string isunderManagement, ObjectParameter errorCode)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

           var unitNameParameter = new SqlParameter("UnitName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitName))
           {
               unitNameParameter.IsNullable = true;
               unitNameParameter.Value = DBNull.Value;
           }
           else
           {
               unitNameParameter.Value = unitName;
           }

           var unitDescriptionParameter = new SqlParameter("UnitDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitDescription))
           {
               unitDescriptionParameter.IsNullable = true;
               unitDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               unitDescriptionParameter.Value = unitDescription;
           }

            var builtUpAreaParameter = builtUpArea.HasValue ?
                new SqlParameter("BuiltUpArea", builtUpArea) :
                new SqlParameter("BuiltUpArea", SqlDbType.Real);

            var floorIdParameter = floorId.HasValue ?
                new SqlParameter("FloorId", floorId) :
                new SqlParameter("FloorId", SqlDbType.Int);

            var blockIdParameter = blockId.HasValue ?
                new SqlParameter("BlockId", blockId) :
                new SqlParameter("BlockId", SqlDbType.Int);

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var isResidenceParameter = new SqlParameter("IsResidence", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isResidence))
           {
               isResidenceParameter.IsNullable = true;
               isResidenceParameter.Value = DBNull.Value;
           }
           else
           {
               isResidenceParameter.Value = isResidence;
           }

            var rentPerMonthParameter = rentPerMonth.HasValue ?
                new SqlParameter("RentPerMonth", rentPerMonth) :
                new SqlParameter("RentPerMonth", SqlDbType.Decimal);

            var depositAmountParameter = depositAmount.HasValue ?
                new SqlParameter("DepositAmount", depositAmount) :
                new SqlParameter("DepositAmount", SqlDbType.Decimal);

            var openingBalanceParameter = openingBalance.HasValue ?
                new SqlParameter("OpeningBalance", openingBalance) :
                new SqlParameter("OpeningBalance", SqlDbType.Decimal);

            var oBAsONDateParameter = oBAsONDate.HasValue ?
                new SqlParameter("OBAsONDate", oBAsONDate) :
                new SqlParameter("OBAsONDate", SqlDbType.DateTime);

           var qrCodePathParameter = new SqlParameter("QrCodePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(qrCodePath))
           {
               qrCodePathParameter.IsNullable = true;
               qrCodePathParameter.Value = DBNull.Value;
           }
           else
           {
               qrCodePathParameter.Value = qrCodePath;
           }

            var noOfParkingSlotsParameter = noOfParkingSlots.HasValue ?
                new SqlParameter("NoOfParkingSlots", noOfParkingSlots) :
                new SqlParameter("NoOfParkingSlots", SqlDbType.Int);

            var shareAreaParameter = shareArea.HasValue ?
                new SqlParameter("ShareArea", shareArea) :
                new SqlParameter("ShareArea", SqlDbType.Real);

            var totalAreaParameter = totalArea.HasValue ?
                new SqlParameter("TotalArea", totalArea) :
                new SqlParameter("TotalArea", SqlDbType.Real);

           var isunderManagementParameter = new SqlParameter("IsunderManagement", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isunderManagement))
           {
               isunderManagementParameter.IsNullable = true;
               isunderManagementParameter.Value = DBNull.Value;
           }
           else
           {
               isunderManagementParameter.Value = isunderManagement;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnitMasterDetails @UnitId, @UnitName, @UnitDescription, @BuiltUpArea, @FloorId, @BlockId, @IsActive, @UpdatedBy, @IsResidence, @RentPerMonth, @DepositAmount, @OpeningBalance, @OBAsONDate, @QrCodePath, @NoOfParkingSlots, @ShareArea, @TotalArea, @IsunderManagement, @ErrorCode OUT", unitIdParameter, unitNameParameter, unitDescriptionParameter, builtUpAreaParameter, floorIdParameter, blockIdParameter, isActiveParameter, updatedByParameter, isResidenceParameter, rentPerMonthParameter, depositAmountParameter, openingBalanceParameter, oBAsONDateParameter, qrCodePathParameter, noOfParkingSlotsParameter, shareAreaParameter, totalAreaParameter, isunderManagementParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnitMemberDetails(Nullable<Int64> unitOccupiedFamilyMemberId, Nullable<Int32> unitId, string memberName, string memberEmail, string memberMobileNumber, string memberIsMalaysian, Nullable<Int32> memberCountryId, string memberICorPassPortNumber, string memberVisaExpireMonthYear, string isOwner, string memberProfilePicPath, string raisedBy, ObjectParameter errorCode, string isAggreeToDisplayDCVMS)
        {

            var unitOccupiedFamilyMemberIdParameter = unitOccupiedFamilyMemberId.HasValue ?
                new SqlParameter("UnitOccupiedFamilyMemberId", unitOccupiedFamilyMemberId) :
                new SqlParameter("UnitOccupiedFamilyMemberId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

           var memberNameParameter = new SqlParameter("MemberName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(memberName))
           {
               memberNameParameter.IsNullable = true;
               memberNameParameter.Value = DBNull.Value;
           }
           else
           {
               memberNameParameter.Value = memberName;
           }

           var memberEmailParameter = new SqlParameter("MemberEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(memberEmail))
           {
               memberEmailParameter.IsNullable = true;
               memberEmailParameter.Value = DBNull.Value;
           }
           else
           {
               memberEmailParameter.Value = memberEmail;
           }

           var memberMobileNumberParameter = new SqlParameter("MemberMobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(memberMobileNumber))
           {
               memberMobileNumberParameter.IsNullable = true;
               memberMobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               memberMobileNumberParameter.Value = memberMobileNumber;
           }

           var memberIsMalaysianParameter = new SqlParameter("MemberIsMalaysian", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(memberIsMalaysian))
           {
               memberIsMalaysianParameter.IsNullable = true;
               memberIsMalaysianParameter.Value = DBNull.Value;
           }
           else
           {
               memberIsMalaysianParameter.Value = memberIsMalaysian;
           }

            var memberCountryIdParameter = memberCountryId.HasValue ?
                new SqlParameter("MemberCountryId", memberCountryId) :
                new SqlParameter("MemberCountryId", SqlDbType.Int);

           var memberICorPassPortNumberParameter = new SqlParameter("MemberICorPassPortNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(memberICorPassPortNumber))
           {
               memberICorPassPortNumberParameter.IsNullable = true;
               memberICorPassPortNumberParameter.Value = DBNull.Value;
           }
           else
           {
               memberICorPassPortNumberParameter.Value = memberICorPassPortNumber;
           }

           var memberVisaExpireMonthYearParameter = new SqlParameter("MemberVisaExpireMonthYear", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(memberVisaExpireMonthYear))
           {
               memberVisaExpireMonthYearParameter.IsNullable = true;
               memberVisaExpireMonthYearParameter.Value = DBNull.Value;
           }
           else
           {
               memberVisaExpireMonthYearParameter.Value = memberVisaExpireMonthYear;
           }

           var isOwnerParameter = new SqlParameter("IsOwner", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isOwner))
           {
               isOwnerParameter.IsNullable = true;
               isOwnerParameter.Value = DBNull.Value;
           }
           else
           {
               isOwnerParameter.Value = isOwner;
           }

           var memberProfilePicPathParameter = new SqlParameter("MemberProfilePicPath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(memberProfilePicPath))
           {
               memberProfilePicPathParameter.IsNullable = true;
               memberProfilePicPathParameter.Value = DBNull.Value;
           }
           else
           {
               memberProfilePicPathParameter.Value = memberProfilePicPath;
           }

           var raisedByParameter = new SqlParameter("RaisedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(raisedBy))
           {
               raisedByParameter.IsNullable = true;
               raisedByParameter.Value = DBNull.Value;
           }
           else
           {
               raisedByParameter.Value = raisedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var isAggreeToDisplayDCVMSParameter = new SqlParameter("IsAggreeToDisplayDCVMS", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isAggreeToDisplayDCVMS))
           {
               isAggreeToDisplayDCVMSParameter.IsNullable = true;
               isAggreeToDisplayDCVMSParameter.Value = DBNull.Value;
           }
           else
           {
               isAggreeToDisplayDCVMSParameter.Value = isAggreeToDisplayDCVMS;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnitMemberDetails @UnitOccupiedFamilyMemberId, @UnitId, @MemberName, @MemberEmail, @MemberMobileNumber, @MemberIsMalaysian, @MemberCountryId, @MemberICorPassPortNumber, @MemberVisaExpireMonthYear, @IsOwner, @MemberProfilePicPath, @RaisedBy, @ErrorCode OUT, @IsAggreeToDisplayDCVMS", unitOccupiedFamilyMemberIdParameter, unitIdParameter, memberNameParameter, memberEmailParameter, memberMobileNumberParameter, memberIsMalaysianParameter, memberCountryIdParameter, memberICorPassPortNumberParameter, memberVisaExpireMonthYearParameter, isOwnerParameter, memberProfilePicPathParameter, raisedByParameter, errorCodeParameter, isAggreeToDisplayDCVMSParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnitOpenCreditDetails(Nullable<Int64> unitOpenCreditId, Nullable<Int32> creditUnitId, Nullable<Int64> ownerORTenantUserID, Nullable<Int32> managementAccountId, Nullable<Decimal> creditAmount, Nullable<DateTime> creditOn, Nullable<DateTime> actuvalCreditOn, string paymentMode, string cHEQUENUMBER, string cHEQUEIssueBankName, Nullable<DateTime> chequeDate, string reason, string recievedByUserName, Nullable<Int64> recievedByUserId, ObjectParameter errorCode, string additionalReferenceFile, Nullable<Int32> intialSetupId)
        {

            var unitOpenCreditIdParameter = unitOpenCreditId.HasValue ?
                new SqlParameter("UnitOpenCreditId", unitOpenCreditId) :
                new SqlParameter("UnitOpenCreditId", SqlDbType.BigInt);

            var creditUnitIdParameter = creditUnitId.HasValue ?
                new SqlParameter("CreditUnitId", creditUnitId) :
                new SqlParameter("CreditUnitId", SqlDbType.Int);

            var ownerORTenantUserIDParameter = ownerORTenantUserID.HasValue ?
                new SqlParameter("OwnerORTenantUserID", ownerORTenantUserID) :
                new SqlParameter("OwnerORTenantUserID", SqlDbType.BigInt);

            var managementAccountIdParameter = managementAccountId.HasValue ?
                new SqlParameter("ManagementAccountId", managementAccountId) :
                new SqlParameter("ManagementAccountId", SqlDbType.Int);

            var creditAmountParameter = creditAmount.HasValue ?
                new SqlParameter("CreditAmount", creditAmount) :
                new SqlParameter("CreditAmount", SqlDbType.Decimal);

            var creditOnParameter = creditOn.HasValue ?
                new SqlParameter("CreditOn", creditOn) :
                new SqlParameter("CreditOn", SqlDbType.DateTime);

            var actuvalCreditOnParameter = actuvalCreditOn.HasValue ?
                new SqlParameter("ActuvalCreditOn", actuvalCreditOn) :
                new SqlParameter("ActuvalCreditOn", SqlDbType.DateTime);

           var paymentModeParameter = new SqlParameter("PaymentMode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(paymentMode))
           {
               paymentModeParameter.IsNullable = true;
               paymentModeParameter.Value = DBNull.Value;
           }
           else
           {
               paymentModeParameter.Value = paymentMode;
           }

           var cHEQUENUMBERParameter = new SqlParameter("CHEQUENUMBER", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cHEQUENUMBER))
           {
               cHEQUENUMBERParameter.IsNullable = true;
               cHEQUENUMBERParameter.Value = DBNull.Value;
           }
           else
           {
               cHEQUENUMBERParameter.Value = cHEQUENUMBER;
           }

           var cHEQUEIssueBankNameParameter = new SqlParameter("CHEQUEIssueBankName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(cHEQUEIssueBankName))
           {
               cHEQUEIssueBankNameParameter.IsNullable = true;
               cHEQUEIssueBankNameParameter.Value = DBNull.Value;
           }
           else
           {
               cHEQUEIssueBankNameParameter.Value = cHEQUEIssueBankName;
           }

            var chequeDateParameter = chequeDate.HasValue ?
                new SqlParameter("ChequeDate", chequeDate) :
                new SqlParameter("ChequeDate", SqlDbType.DateTime);

           var reasonParameter = new SqlParameter("Reason", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(reason))
           {
               reasonParameter.IsNullable = true;
               reasonParameter.Value = DBNull.Value;
           }
           else
           {
               reasonParameter.Value = reason;
           }

           var recievedByUserNameParameter = new SqlParameter("RecievedByUserName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(recievedByUserName))
           {
               recievedByUserNameParameter.IsNullable = true;
               recievedByUserNameParameter.Value = DBNull.Value;
           }
           else
           {
               recievedByUserNameParameter.Value = recievedByUserName;
           }

            var recievedByUserIdParameter = recievedByUserId.HasValue ?
                new SqlParameter("RecievedByUserId", recievedByUserId) :
                new SqlParameter("RecievedByUserId", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var additionalReferenceFileParameter = new SqlParameter("AdditionalReferenceFile", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferenceFile))
           {
               additionalReferenceFileParameter.IsNullable = true;
               additionalReferenceFileParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferenceFileParameter.Value = additionalReferenceFile;
           }

            var intialSetupIdParameter = intialSetupId.HasValue ?
                new SqlParameter("IntialSetupId", intialSetupId) :
                new SqlParameter("IntialSetupId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnitOpenCreditDetails @UnitOpenCreditId, @CreditUnitId, @OwnerORTenantUserID, @ManagementAccountId, @CreditAmount, @CreditOn, @ActuvalCreditOn, @PaymentMode, @CHEQUENUMBER, @CHEQUEIssueBankName, @ChequeDate, @Reason, @RecievedByUserName, @RecievedByUserId, @ErrorCode OUT, @AdditionalReferenceFile, @IntialSetupId", unitOpenCreditIdParameter, creditUnitIdParameter, ownerORTenantUserIDParameter, managementAccountIdParameter, creditAmountParameter, creditOnParameter, actuvalCreditOnParameter, paymentModeParameter, cHEQUENUMBERParameter, cHEQUEIssueBankNameParameter, chequeDateParameter, reasonParameter, recievedByUserNameParameter, recievedByUserIdParameter, errorCodeParameter, additionalReferenceFileParameter, intialSetupIdParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnitOwnerSetupDetails(string ownersDetails, string createdBy, ObjectParameter errorCode)
        {

            var ownersDetailsParameter = ownersDetails != null ?
                new SqlParameter("OwnersDetails", ownersDetails) :
                new SqlParameter("OwnersDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnitOwnerSetupDetails @OwnersDetails, @CreatedBy, @ErrorCode OUT", ownersDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnitPurchaseRequestDetails(Nullable<Int64> unitPurchaseRequestId, Nullable<Int32> unitId, Nullable<Int64> ownerUserId, string isSelfOccupied, string ownerAddress, Nullable<DateTime> unitPurchaseDate, string sPAFilePath, string ownerUserName, string ownerMobileNumber, string ownerEmail, string ownerIsMalaysian, string ownerICorPassportNumber, string ownerVisaExpirity, Nullable<Int32> ownerCountryId, string ownerProfilePath, string currentPassword, string isActive, Nullable<DateTime> occupiedFrom, Nullable<DateTime> vacatingDate, Nullable<Int64> ownerCentralUserId, string addressLine1, string addressLine2, string addressLine3, string city, string addressState, string postalCode, string updatedBy, ObjectParameter errorCode, ObjectParameter isNewUser, ObjectParameter condomiumName, Nullable<Decimal> openingBalance, Nullable<DateTime> openingBalanceAsOnDate, string countryCode, Nullable<Int32> ownerSetupID)
        {

            var unitPurchaseRequestIdParameter = unitPurchaseRequestId.HasValue ?
                new SqlParameter("UnitPurchaseRequestId", unitPurchaseRequestId) :
                new SqlParameter("UnitPurchaseRequestId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var ownerUserIdParameter = ownerUserId.HasValue ?
                new SqlParameter("OwnerUserId", ownerUserId) :
                new SqlParameter("OwnerUserId", SqlDbType.BigInt);

           var isSelfOccupiedParameter = new SqlParameter("IsSelfOccupied", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isSelfOccupied))
           {
               isSelfOccupiedParameter.IsNullable = true;
               isSelfOccupiedParameter.Value = DBNull.Value;
           }
           else
           {
               isSelfOccupiedParameter.Value = isSelfOccupied;
           }

           var ownerAddressParameter = new SqlParameter("OwnerAddress", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ownerAddress))
           {
               ownerAddressParameter.IsNullable = true;
               ownerAddressParameter.Value = DBNull.Value;
           }
           else
           {
               ownerAddressParameter.Value = ownerAddress;
           }

            var unitPurchaseDateParameter = unitPurchaseDate.HasValue ?
                new SqlParameter("UnitPurchaseDate", unitPurchaseDate) :
                new SqlParameter("UnitPurchaseDate", SqlDbType.DateTime);

           var sPAFilePathParameter = new SqlParameter("SPAFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sPAFilePath))
           {
               sPAFilePathParameter.IsNullable = true;
               sPAFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               sPAFilePathParameter.Value = sPAFilePath;
           }

           var ownerUserNameParameter = new SqlParameter("OwnerUserName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ownerUserName))
           {
               ownerUserNameParameter.IsNullable = true;
               ownerUserNameParameter.Value = DBNull.Value;
           }
           else
           {
               ownerUserNameParameter.Value = ownerUserName;
           }

           var ownerMobileNumberParameter = new SqlParameter("OwnerMobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ownerMobileNumber))
           {
               ownerMobileNumberParameter.IsNullable = true;
               ownerMobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               ownerMobileNumberParameter.Value = ownerMobileNumber;
           }

           var ownerEmailParameter = new SqlParameter("OwnerEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ownerEmail))
           {
               ownerEmailParameter.IsNullable = true;
               ownerEmailParameter.Value = DBNull.Value;
           }
           else
           {
               ownerEmailParameter.Value = ownerEmail;
           }

           var ownerIsMalaysianParameter = new SqlParameter("OwnerIsMalaysian", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ownerIsMalaysian))
           {
               ownerIsMalaysianParameter.IsNullable = true;
               ownerIsMalaysianParameter.Value = DBNull.Value;
           }
           else
           {
               ownerIsMalaysianParameter.Value = ownerIsMalaysian;
           }

           var ownerICorPassportNumberParameter = new SqlParameter("OwnerICorPassportNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ownerICorPassportNumber))
           {
               ownerICorPassportNumberParameter.IsNullable = true;
               ownerICorPassportNumberParameter.Value = DBNull.Value;
           }
           else
           {
               ownerICorPassportNumberParameter.Value = ownerICorPassportNumber;
           }

           var ownerVisaExpirityParameter = new SqlParameter("OwnerVisaExpirity", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ownerVisaExpirity))
           {
               ownerVisaExpirityParameter.IsNullable = true;
               ownerVisaExpirityParameter.Value = DBNull.Value;
           }
           else
           {
               ownerVisaExpirityParameter.Value = ownerVisaExpirity;
           }

            var ownerCountryIdParameter = ownerCountryId.HasValue ?
                new SqlParameter("OwnerCountryId", ownerCountryId) :
                new SqlParameter("OwnerCountryId", SqlDbType.Int);

           var ownerProfilePathParameter = new SqlParameter("OwnerProfilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ownerProfilePath))
           {
               ownerProfilePathParameter.IsNullable = true;
               ownerProfilePathParameter.Value = DBNull.Value;
           }
           else
           {
               ownerProfilePathParameter.Value = ownerProfilePath;
           }

           var currentPasswordParameter = new SqlParameter("CurrentPassword", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(currentPassword))
           {
               currentPasswordParameter.IsNullable = true;
               currentPasswordParameter.Value = DBNull.Value;
           }
           else
           {
               currentPasswordParameter.Value = currentPassword;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

            var occupiedFromParameter = occupiedFrom.HasValue ?
                new SqlParameter("OccupiedFrom", occupiedFrom) :
                new SqlParameter("OccupiedFrom", SqlDbType.DateTime);

            var vacatingDateParameter = vacatingDate.HasValue ?
                new SqlParameter("VacatingDate", vacatingDate) :
                new SqlParameter("VacatingDate", SqlDbType.DateTime);

            var ownerCentralUserIdParameter = ownerCentralUserId.HasValue ?
                new SqlParameter("OwnerCentralUserId", ownerCentralUserId) :
                new SqlParameter("OwnerCentralUserId", SqlDbType.BigInt);

           var addressLine1Parameter = new SqlParameter("AddressLine1", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressLine1))
           {
               addressLine1Parameter.IsNullable = true;
               addressLine1Parameter.Value = DBNull.Value;
           }
           else
           {
               addressLine1Parameter.Value = addressLine1;
           }

           var addressLine2Parameter = new SqlParameter("AddressLine2", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressLine2))
           {
               addressLine2Parameter.IsNullable = true;
               addressLine2Parameter.Value = DBNull.Value;
           }
           else
           {
               addressLine2Parameter.Value = addressLine2;
           }

           var addressLine3Parameter = new SqlParameter("AddressLine3", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressLine3))
           {
               addressLine3Parameter.IsNullable = true;
               addressLine3Parameter.Value = DBNull.Value;
           }
           else
           {
               addressLine3Parameter.Value = addressLine3;
           }

           var cityParameter = new SqlParameter("City", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(city))
           {
               cityParameter.IsNullable = true;
               cityParameter.Value = DBNull.Value;
           }
           else
           {
               cityParameter.Value = city;
           }

           var addressStateParameter = new SqlParameter("AddressState", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressState))
           {
               addressStateParameter.IsNullable = true;
               addressStateParameter.Value = DBNull.Value;
           }
           else
           {
               addressStateParameter.Value = addressState;
           }

           var postalCodeParameter = new SqlParameter("PostalCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(postalCode))
           {
               postalCodeParameter.IsNullable = true;
               postalCodeParameter.Value = DBNull.Value;
           }
           else
           {
               postalCodeParameter.Value = postalCode;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var isNewUserParameter = new SqlParameter("IsNewUser", SqlDbType.VarChar, 500);
               isNewUserParameter.Direction = System.Data.ParameterDirection.Output;
               isNewUserParameter.Value = isNewUser != null ? isNewUser.Value : null;

           var condomiumNameParameter = new SqlParameter("CondomiumName", SqlDbType.VarChar, 500);
               condomiumNameParameter.Direction = System.Data.ParameterDirection.Output;
               condomiumNameParameter.Value = condomiumName != null ? condomiumName.Value : null;

            var openingBalanceParameter = openingBalance.HasValue ?
                new SqlParameter("OpeningBalance", openingBalance) :
                new SqlParameter("OpeningBalance", SqlDbType.Decimal);

            var openingBalanceAsOnDateParameter = openingBalanceAsOnDate.HasValue ?
                new SqlParameter("OpeningBalanceAsOnDate", openingBalanceAsOnDate) :
                new SqlParameter("OpeningBalanceAsOnDate", SqlDbType.DateTime);

           var countryCodeParameter = new SqlParameter("CountryCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(countryCode))
           {
               countryCodeParameter.IsNullable = true;
               countryCodeParameter.Value = DBNull.Value;
           }
           else
           {
               countryCodeParameter.Value = countryCode;
           }

            var ownerSetupIDParameter = ownerSetupID.HasValue ?
                new SqlParameter("OwnerSetupID", ownerSetupID) :
                new SqlParameter("OwnerSetupID", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnitPurchaseRequestDetails @UnitPurchaseRequestId, @UnitId, @OwnerUserId, @IsSelfOccupied, @OwnerAddress, @UnitPurchaseDate, @SPAFilePath, @OwnerUserName, @OwnerMobileNumber, @OwnerEmail, @OwnerIsMalaysian, @OwnerICorPassportNumber, @OwnerVisaExpirity, @OwnerCountryId, @OwnerProfilePath, @CurrentPassword, @IsActive, @OccupiedFrom, @VacatingDate, @OwnerCentralUserId, @AddressLine1, @AddressLine2, @AddressLine3, @City, @AddressState, @PostalCode, @UpdatedBy, @ErrorCode OUT, @IsNewUser OUT, @CondomiumName OUT, @OpeningBalance, @OpeningBalanceAsOnDate, @CountryCode, @OwnerSetupID", unitPurchaseRequestIdParameter, unitIdParameter, ownerUserIdParameter, isSelfOccupiedParameter, ownerAddressParameter, unitPurchaseDateParameter, sPAFilePathParameter, ownerUserNameParameter, ownerMobileNumberParameter, ownerEmailParameter, ownerIsMalaysianParameter, ownerICorPassportNumberParameter, ownerVisaExpirityParameter, ownerCountryIdParameter, ownerProfilePathParameter, currentPasswordParameter, isActiveParameter, occupiedFromParameter, vacatingDateParameter, ownerCentralUserIdParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, cityParameter, addressStateParameter, postalCodeParameter, updatedByParameter, errorCodeParameter, isNewUserParameter, condomiumNameParameter, openingBalanceParameter, openingBalanceAsOnDateParameter, countryCodeParameter, ownerSetupIDParameter);

            errorCode.Value = errorCodeParameter.Value;
            isNewUser.Value = isNewUserParameter.Value;
            condomiumName.Value = condomiumNameParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnitRequestItemDetails(Nullable<Int32> unitRequestItemId, string unitRequestType, string unitRequestItem, string unitItemCode, string updatedBy, ObjectParameter errorCode)
        {

            var unitRequestItemIdParameter = unitRequestItemId.HasValue ?
                new SqlParameter("UnitRequestItemId", unitRequestItemId) :
                new SqlParameter("UnitRequestItemId", SqlDbType.Int);

           var unitRequestTypeParameter = new SqlParameter("UnitRequestType", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitRequestType))
           {
               unitRequestTypeParameter.IsNullable = true;
               unitRequestTypeParameter.Value = DBNull.Value;
           }
           else
           {
               unitRequestTypeParameter.Value = unitRequestType;
           }

           var unitRequestItemParameter = new SqlParameter("UnitRequestItem", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitRequestItem))
           {
               unitRequestItemParameter.IsNullable = true;
               unitRequestItemParameter.Value = DBNull.Value;
           }
           else
           {
               unitRequestItemParameter.Value = unitRequestItem;
           }

           var unitItemCodeParameter = new SqlParameter("UnitItemCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitItemCode))
           {
               unitItemCodeParameter.IsNullable = true;
               unitItemCodeParameter.Value = DBNull.Value;
           }
           else
           {
               unitItemCodeParameter.Value = unitItemCode;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnitRequestItemDetails @UnitRequestItemId, @UnitRequestType, @UnitRequestItem, @UnitItemCode, @UpdatedBy, @ErrorCode OUT", unitRequestItemIdParameter, unitRequestTypeParameter, unitRequestItemParameter, unitItemCodeParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnitRequestItemFeeDetails(string unitRequestItemPriceInfo, string updatedBy, ObjectParameter errorCode)
        {

            var unitRequestItemPriceInfoParameter = unitRequestItemPriceInfo != null ?
                new SqlParameter("UnitRequestItemPriceInfo", unitRequestItemPriceInfo) :
                new SqlParameter("UnitRequestItemPriceInfo", SqlDbType.Xml);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnitRequestItemFeeDetails @UnitRequestItemPriceInfo, @UpdatedBy, @ErrorCode OUT", unitRequestItemPriceInfoParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnitRequestItemMappingDetails(Nullable<Int32> unitRequestItemId, Nullable<Int32> chartsOfAccountId, Nullable<Int32> accountItemId, string mappedBy, ObjectParameter errorCode)
        {

            var unitRequestItemIdParameter = unitRequestItemId.HasValue ?
                new SqlParameter("UnitRequestItemId", unitRequestItemId) :
                new SqlParameter("UnitRequestItemId", SqlDbType.Int);

            var chartsOfAccountIdParameter = chartsOfAccountId.HasValue ?
                new SqlParameter("ChartsOfAccountId", chartsOfAccountId) :
                new SqlParameter("ChartsOfAccountId", SqlDbType.Int);

            var accountItemIdParameter = accountItemId.HasValue ?
                new SqlParameter("AccountItemId", accountItemId) :
                new SqlParameter("AccountItemId", SqlDbType.Int);

           var mappedByParameter = new SqlParameter("MappedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(mappedBy))
           {
               mappedByParameter.IsNullable = true;
               mappedByParameter.Value = DBNull.Value;
           }
           else
           {
               mappedByParameter.Value = mappedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnitRequestItemMappingDetails @UnitRequestItemId, @ChartsOfAccountId, @AccountItemId, @MappedBy, @ErrorCode OUT", unitRequestItemIdParameter, chartsOfAccountIdParameter, accountItemIdParameter, mappedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnitRequestItemUnMappingDetails(Nullable<Int32> mappingId, string unMappedComment, string unMappedBy, ObjectParameter errorCode)
        {

            var mappingIdParameter = mappingId.HasValue ?
                new SqlParameter("MappingId", mappingId) :
                new SqlParameter("MappingId", SqlDbType.Int);

           var unMappedCommentParameter = new SqlParameter("UnMappedComment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unMappedComment))
           {
               unMappedCommentParameter.IsNullable = true;
               unMappedCommentParameter.Value = DBNull.Value;
           }
           else
           {
               unMappedCommentParameter.Value = unMappedComment;
           }

           var unMappedByParameter = new SqlParameter("UnMappedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unMappedBy))
           {
               unMappedByParameter.IsNullable = true;
               unMappedByParameter.Value = DBNull.Value;
           }
           else
           {
               unMappedByParameter.Value = unMappedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnitRequestItemUnMappingDetails @MappingId, @UnMappedComment, @UnMappedBy, @ErrorCode OUT", mappingIdParameter, unMappedCommentParameter, unMappedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnitRequestPaymentLinesForGL(Nullable<Int32> unitRequestItemId, Nullable<Int32> unitRequestTypeConfigKey, string unitRequestItem, string unitRequestLineCode, Nullable<Int32> linePaymentTypeConfigKey, Nullable<Int32> isRefundableConfigKey, string isDeposit, string isActive, Nullable<Int32> facilityId, Nullable<Int32> commercialUnitId, string updatedBy, ObjectParameter errorCode)
        {

            var unitRequestItemIdParameter = unitRequestItemId.HasValue ?
                new SqlParameter("UnitRequestItemId", unitRequestItemId) :
                new SqlParameter("UnitRequestItemId", SqlDbType.Int);

            var unitRequestTypeConfigKeyParameter = unitRequestTypeConfigKey.HasValue ?
                new SqlParameter("UnitRequestTypeConfigKey", unitRequestTypeConfigKey) :
                new SqlParameter("UnitRequestTypeConfigKey", SqlDbType.Int);

           var unitRequestItemParameter = new SqlParameter("UnitRequestItem", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitRequestItem))
           {
               unitRequestItemParameter.IsNullable = true;
               unitRequestItemParameter.Value = DBNull.Value;
           }
           else
           {
               unitRequestItemParameter.Value = unitRequestItem;
           }

           var unitRequestLineCodeParameter = new SqlParameter("UnitRequestLineCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(unitRequestLineCode))
           {
               unitRequestLineCodeParameter.IsNullable = true;
               unitRequestLineCodeParameter.Value = DBNull.Value;
           }
           else
           {
               unitRequestLineCodeParameter.Value = unitRequestLineCode;
           }

            var linePaymentTypeConfigKeyParameter = linePaymentTypeConfigKey.HasValue ?
                new SqlParameter("LinePaymentTypeConfigKey", linePaymentTypeConfigKey) :
                new SqlParameter("LinePaymentTypeConfigKey", SqlDbType.Int);

            var isRefundableConfigKeyParameter = isRefundableConfigKey.HasValue ?
                new SqlParameter("IsRefundableConfigKey", isRefundableConfigKey) :
                new SqlParameter("IsRefundableConfigKey", SqlDbType.Int);

           var isDepositParameter = new SqlParameter("IsDeposit", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isDeposit))
           {
               isDepositParameter.IsNullable = true;
               isDepositParameter.Value = DBNull.Value;
           }
           else
           {
               isDepositParameter.Value = isDeposit;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

            var facilityIdParameter = facilityId.HasValue ?
                new SqlParameter("FacilityId", facilityId) :
                new SqlParameter("FacilityId", SqlDbType.Int);

            var commercialUnitIdParameter = commercialUnitId.HasValue ?
                new SqlParameter("CommercialUnitId", commercialUnitId) :
                new SqlParameter("CommercialUnitId", SqlDbType.Int);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnitRequestPaymentLinesForGL @UnitRequestItemId, @UnitRequestTypeConfigKey, @UnitRequestItem, @UnitRequestLineCode, @LinePaymentTypeConfigKey, @IsRefundableConfigKey, @IsDeposit, @IsActive, @FacilityId, @CommercialUnitId, @UpdatedBy, @ErrorCode OUT", unitRequestItemIdParameter, unitRequestTypeConfigKeyParameter, unitRequestItemParameter, unitRequestLineCodeParameter, linePaymentTypeConfigKeyParameter, isRefundableConfigKeyParameter, isDepositParameter, isActiveParameter, facilityIdParameter, commercialUnitIdParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnitRequestPaymentPriceConfiguration(Nullable<Int32> uRItemFeeConfigId, Nullable<Int32> unitRequestItemId, Nullable<Decimal> itemFee, Nullable<DateTime> effectiveFrom, string updatedBy, Nullable<DateTime> updatedOn, ObjectParameter errorCode)
        {

            var uRItemFeeConfigIdParameter = uRItemFeeConfigId.HasValue ?
                new SqlParameter("URItemFeeConfigId", uRItemFeeConfigId) :
                new SqlParameter("URItemFeeConfigId", SqlDbType.Int);

            var unitRequestItemIdParameter = unitRequestItemId.HasValue ?
                new SqlParameter("UnitRequestItemId", unitRequestItemId) :
                new SqlParameter("UnitRequestItemId", SqlDbType.Int);

            var itemFeeParameter = itemFee.HasValue ?
                new SqlParameter("ItemFee", itemFee) :
                new SqlParameter("ItemFee", SqlDbType.Decimal);

            var effectiveFromParameter = effectiveFrom.HasValue ?
                new SqlParameter("EffectiveFrom", effectiveFrom) :
                new SqlParameter("EffectiveFrom", SqlDbType.DateTime);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

            var updatedOnParameter = updatedOn.HasValue ?
                new SqlParameter("UpdatedOn", updatedOn) :
                new SqlParameter("UpdatedOn", SqlDbType.DateTime);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnitRequestPaymentPriceConfiguration @URItemFeeConfigId, @UnitRequestItemId, @ItemFee, @EffectiveFrom, @UpdatedBy, @UpdatedOn, @ErrorCode OUT", uRItemFeeConfigIdParameter, unitRequestItemIdParameter, itemFeeParameter, effectiveFromParameter, updatedByParameter, updatedOnParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnitTenantRequestDetails(Nullable<Int64> unitTenantRequestId, Nullable<Int64> unitPurchaseRequestId, Nullable<Int32> unitId, Nullable<Int64> tenantUserId, Nullable<DateTime> tenantOccupiedFrom, Nullable<Int32> numberOfLivingPeople, string tenantCompanyName, Nullable<DateTime> tenancyAgreementDate, Nullable<DateTime> tenantOccupiedTo, string rentalAgreementFilePath, string tenantUserName, string tenantMobileNumber, string tenantEmail, string tenantIsMalaysian, string tenantICorPassportNumber, string tenantVisaExpirity, Nullable<Int32> tenantCountryId, string tenantProfilePath, string currentPassword, string isActive, Nullable<Int64> tenantCentralUserId, string updatedBy, ObjectParameter errorCode, ObjectParameter isNewUser, ObjectParameter condomiumName, string countryCode, Nullable<Int32> tenantSetupId)
        {

            var unitTenantRequestIdParameter = unitTenantRequestId.HasValue ?
                new SqlParameter("UnitTenantRequestId", unitTenantRequestId) :
                new SqlParameter("UnitTenantRequestId", SqlDbType.BigInt);

            var unitPurchaseRequestIdParameter = unitPurchaseRequestId.HasValue ?
                new SqlParameter("UnitPurchaseRequestId", unitPurchaseRequestId) :
                new SqlParameter("UnitPurchaseRequestId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var tenantUserIdParameter = tenantUserId.HasValue ?
                new SqlParameter("TenantUserId", tenantUserId) :
                new SqlParameter("TenantUserId", SqlDbType.BigInt);

            var tenantOccupiedFromParameter = tenantOccupiedFrom.HasValue ?
                new SqlParameter("TenantOccupiedFrom", tenantOccupiedFrom) :
                new SqlParameter("TenantOccupiedFrom", SqlDbType.DateTime);

            var numberOfLivingPeopleParameter = numberOfLivingPeople.HasValue ?
                new SqlParameter("NumberOfLivingPeople", numberOfLivingPeople) :
                new SqlParameter("NumberOfLivingPeople", SqlDbType.Int);

           var tenantCompanyNameParameter = new SqlParameter("TenantCompanyName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(tenantCompanyName))
           {
               tenantCompanyNameParameter.IsNullable = true;
               tenantCompanyNameParameter.Value = DBNull.Value;
           }
           else
           {
               tenantCompanyNameParameter.Value = tenantCompanyName;
           }

            var tenancyAgreementDateParameter = tenancyAgreementDate.HasValue ?
                new SqlParameter("TenancyAgreementDate", tenancyAgreementDate) :
                new SqlParameter("TenancyAgreementDate", SqlDbType.DateTime);

            var tenantOccupiedToParameter = tenantOccupiedTo.HasValue ?
                new SqlParameter("TenantOccupiedTo", tenantOccupiedTo) :
                new SqlParameter("TenantOccupiedTo", SqlDbType.DateTime);

           var rentalAgreementFilePathParameter = new SqlParameter("RentalAgreementFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(rentalAgreementFilePath))
           {
               rentalAgreementFilePathParameter.IsNullable = true;
               rentalAgreementFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               rentalAgreementFilePathParameter.Value = rentalAgreementFilePath;
           }

           var tenantUserNameParameter = new SqlParameter("TenantUserName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(tenantUserName))
           {
               tenantUserNameParameter.IsNullable = true;
               tenantUserNameParameter.Value = DBNull.Value;
           }
           else
           {
               tenantUserNameParameter.Value = tenantUserName;
           }

           var tenantMobileNumberParameter = new SqlParameter("TenantMobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(tenantMobileNumber))
           {
               tenantMobileNumberParameter.IsNullable = true;
               tenantMobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               tenantMobileNumberParameter.Value = tenantMobileNumber;
           }

           var tenantEmailParameter = new SqlParameter("TenantEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(tenantEmail))
           {
               tenantEmailParameter.IsNullable = true;
               tenantEmailParameter.Value = DBNull.Value;
           }
           else
           {
               tenantEmailParameter.Value = tenantEmail;
           }

           var tenantIsMalaysianParameter = new SqlParameter("TenantIsMalaysian", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(tenantIsMalaysian))
           {
               tenantIsMalaysianParameter.IsNullable = true;
               tenantIsMalaysianParameter.Value = DBNull.Value;
           }
           else
           {
               tenantIsMalaysianParameter.Value = tenantIsMalaysian;
           }

           var tenantICorPassportNumberParameter = new SqlParameter("TenantICorPassportNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(tenantICorPassportNumber))
           {
               tenantICorPassportNumberParameter.IsNullable = true;
               tenantICorPassportNumberParameter.Value = DBNull.Value;
           }
           else
           {
               tenantICorPassportNumberParameter.Value = tenantICorPassportNumber;
           }

           var tenantVisaExpirityParameter = new SqlParameter("TenantVisaExpirity", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(tenantVisaExpirity))
           {
               tenantVisaExpirityParameter.IsNullable = true;
               tenantVisaExpirityParameter.Value = DBNull.Value;
           }
           else
           {
               tenantVisaExpirityParameter.Value = tenantVisaExpirity;
           }

            var tenantCountryIdParameter = tenantCountryId.HasValue ?
                new SqlParameter("TenantCountryId", tenantCountryId) :
                new SqlParameter("TenantCountryId", SqlDbType.Int);

           var tenantProfilePathParameter = new SqlParameter("TenantProfilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(tenantProfilePath))
           {
               tenantProfilePathParameter.IsNullable = true;
               tenantProfilePathParameter.Value = DBNull.Value;
           }
           else
           {
               tenantProfilePathParameter.Value = tenantProfilePath;
           }

           var currentPasswordParameter = new SqlParameter("CurrentPassword", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(currentPassword))
           {
               currentPasswordParameter.IsNullable = true;
               currentPasswordParameter.Value = DBNull.Value;
           }
           else
           {
               currentPasswordParameter.Value = currentPassword;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

            var tenantCentralUserIdParameter = tenantCentralUserId.HasValue ?
                new SqlParameter("TenantCentralUserId", tenantCentralUserId) :
                new SqlParameter("TenantCentralUserId", SqlDbType.BigInt);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var isNewUserParameter = new SqlParameter("IsNewUser", SqlDbType.VarChar, 500);
               isNewUserParameter.Direction = System.Data.ParameterDirection.Output;
               isNewUserParameter.Value = isNewUser != null ? isNewUser.Value : null;

           var condomiumNameParameter = new SqlParameter("CondomiumName", SqlDbType.VarChar, 500);
               condomiumNameParameter.Direction = System.Data.ParameterDirection.Output;
               condomiumNameParameter.Value = condomiumName != null ? condomiumName.Value : null;

           var countryCodeParameter = new SqlParameter("CountryCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(countryCode))
           {
               countryCodeParameter.IsNullable = true;
               countryCodeParameter.Value = DBNull.Value;
           }
           else
           {
               countryCodeParameter.Value = countryCode;
           }

            var tenantSetupIdParameter = tenantSetupId.HasValue ?
                new SqlParameter("TenantSetupId", tenantSetupId) :
                new SqlParameter("TenantSetupId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnitTenantRequestDetails @UnitTenantRequestId, @UnitPurchaseRequestId, @UnitId, @TenantUserId, @TenantOccupiedFrom, @NumberOfLivingPeople, @TenantCompanyName, @TenancyAgreementDate, @TenantOccupiedTo, @RentalAgreementFilePath, @TenantUserName, @TenantMobileNumber, @TenantEmail, @TenantIsMalaysian, @TenantICorPassportNumber, @TenantVisaExpirity, @TenantCountryId, @TenantProfilePath, @CurrentPassword, @IsActive, @TenantCentralUserId, @UpdatedBy, @ErrorCode OUT, @IsNewUser OUT, @CondomiumName OUT, @CountryCode, @TenantSetupId", unitTenantRequestIdParameter, unitPurchaseRequestIdParameter, unitIdParameter, tenantUserIdParameter, tenantOccupiedFromParameter, numberOfLivingPeopleParameter, tenantCompanyNameParameter, tenancyAgreementDateParameter, tenantOccupiedToParameter, rentalAgreementFilePathParameter, tenantUserNameParameter, tenantMobileNumberParameter, tenantEmailParameter, tenantIsMalaysianParameter, tenantICorPassportNumberParameter, tenantVisaExpirityParameter, tenantCountryIdParameter, tenantProfilePathParameter, currentPasswordParameter, isActiveParameter, tenantCentralUserIdParameter, updatedByParameter, errorCodeParameter, isNewUserParameter, condomiumNameParameter, countryCodeParameter, tenantSetupIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            isNewUser.Value = isNewUserParameter.Value;
            condomiumName.Value = condomiumNameParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUnSourceExpensiveDetails(Nullable<Int64> uSRequestId, Nullable<Int32> typeOfExpense, string modeOfPayment, Nullable<Int32> fromCondoBankAccountID, Nullable<Int32> fromGLAccountItemid, Nullable<Int32> toCondoBankAccountId, Nullable<Int32> toGLAccountItemId, Nullable<Decimal> trasactionAmount, Nullable<DateTime> actualTransactionDate, string transactionReason, Nullable<DateTime> chequePostDate, string chequeOrReferenceNumber, string bankName, string createdBy, ObjectParameter errorCode)
        {

            var uSRequestIdParameter = uSRequestId.HasValue ?
                new SqlParameter("USRequestId", uSRequestId) :
                new SqlParameter("USRequestId", SqlDbType.BigInt);

            var typeOfExpenseParameter = typeOfExpense.HasValue ?
                new SqlParameter("TypeOfExpense", typeOfExpense) :
                new SqlParameter("TypeOfExpense", SqlDbType.Int);

           var modeOfPaymentParameter = new SqlParameter("ModeOfPayment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(modeOfPayment))
           {
               modeOfPaymentParameter.IsNullable = true;
               modeOfPaymentParameter.Value = DBNull.Value;
           }
           else
           {
               modeOfPaymentParameter.Value = modeOfPayment;
           }

            var fromCondoBankAccountIDParameter = fromCondoBankAccountID.HasValue ?
                new SqlParameter("FromCondoBankAccountID", fromCondoBankAccountID) :
                new SqlParameter("FromCondoBankAccountID", SqlDbType.Int);

            var fromGLAccountItemidParameter = fromGLAccountItemid.HasValue ?
                new SqlParameter("FromGLAccountItemid", fromGLAccountItemid) :
                new SqlParameter("FromGLAccountItemid", SqlDbType.Int);

            var toCondoBankAccountIdParameter = toCondoBankAccountId.HasValue ?
                new SqlParameter("ToCondoBankAccountId", toCondoBankAccountId) :
                new SqlParameter("ToCondoBankAccountId", SqlDbType.Int);

            var toGLAccountItemIdParameter = toGLAccountItemId.HasValue ?
                new SqlParameter("ToGLAccountItemId", toGLAccountItemId) :
                new SqlParameter("ToGLAccountItemId", SqlDbType.Int);

            var trasactionAmountParameter = trasactionAmount.HasValue ?
                new SqlParameter("TrasactionAmount", trasactionAmount) :
                new SqlParameter("TrasactionAmount", SqlDbType.Decimal);

            var actualTransactionDateParameter = actualTransactionDate.HasValue ?
                new SqlParameter("ActualTransactionDate", actualTransactionDate) :
                new SqlParameter("ActualTransactionDate", SqlDbType.DateTime);

           var transactionReasonParameter = new SqlParameter("TransactionReason", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(transactionReason))
           {
               transactionReasonParameter.IsNullable = true;
               transactionReasonParameter.Value = DBNull.Value;
           }
           else
           {
               transactionReasonParameter.Value = transactionReason;
           }

            var chequePostDateParameter = chequePostDate.HasValue ?
                new SqlParameter("ChequePostDate", chequePostDate) :
                new SqlParameter("ChequePostDate", SqlDbType.DateTime);

           var chequeOrReferenceNumberParameter = new SqlParameter("ChequeOrReferenceNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(chequeOrReferenceNumber))
           {
               chequeOrReferenceNumberParameter.IsNullable = true;
               chequeOrReferenceNumberParameter.Value = DBNull.Value;
           }
           else
           {
               chequeOrReferenceNumberParameter.Value = chequeOrReferenceNumber;
           }

           var bankNameParameter = new SqlParameter("BankName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(bankName))
           {
               bankNameParameter.IsNullable = true;
               bankNameParameter.Value = DBNull.Value;
           }
           else
           {
               bankNameParameter.Value = bankName;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUnSourceExpensiveDetails @USRequestId, @TypeOfExpense, @ModeOfPayment, @FromCondoBankAccountID, @FromGLAccountItemid, @ToCondoBankAccountId, @ToGLAccountItemId, @TrasactionAmount, @ActualTransactionDate, @TransactionReason, @ChequePostDate, @ChequeOrReferenceNumber, @BankName, @CreatedBy, @ErrorCode OUT", uSRequestIdParameter, typeOfExpenseParameter, modeOfPaymentParameter, fromCondoBankAccountIDParameter, fromGLAccountItemidParameter, toCondoBankAccountIdParameter, toGLAccountItemIdParameter, trasactionAmountParameter, actualTransactionDateParameter, transactionReasonParameter, chequePostDateParameter, chequeOrReferenceNumberParameter, bankNameParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUserDetails(Nullable<Int64> userId, string userName, string isMalaysian, string iCorPassportNumber, string userVisaExpirity, Nullable<Int32> roleId, string userAddress, string userEmail, string userMobileNumber, Nullable<Int32> userCountryId, string userProfilePath, string currentPassword, string isActive, string isLoginRequired, Nullable<Int64> centralUserId, string addressLine1, string addressLine2, string addressLine3, string city, string addressState, string postalCode, string updatedBy, ObjectParameter errorCode, string countryMobileCode)
        {

            var userIdParameter = userId.HasValue ?
                new SqlParameter("UserId", userId) :
                new SqlParameter("UserId", SqlDbType.BigInt);

           var userNameParameter = new SqlParameter("UserName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userName))
           {
               userNameParameter.IsNullable = true;
               userNameParameter.Value = DBNull.Value;
           }
           else
           {
               userNameParameter.Value = userName;
           }

           var isMalaysianParameter = new SqlParameter("IsMalaysian", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isMalaysian))
           {
               isMalaysianParameter.IsNullable = true;
               isMalaysianParameter.Value = DBNull.Value;
           }
           else
           {
               isMalaysianParameter.Value = isMalaysian;
           }

           var iCorPassportNumberParameter = new SqlParameter("ICorPassportNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(iCorPassportNumber))
           {
               iCorPassportNumberParameter.IsNullable = true;
               iCorPassportNumberParameter.Value = DBNull.Value;
           }
           else
           {
               iCorPassportNumberParameter.Value = iCorPassportNumber;
           }

           var userVisaExpirityParameter = new SqlParameter("UserVisaExpirity", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userVisaExpirity))
           {
               userVisaExpirityParameter.IsNullable = true;
               userVisaExpirityParameter.Value = DBNull.Value;
           }
           else
           {
               userVisaExpirityParameter.Value = userVisaExpirity;
           }

            var roleIdParameter = roleId.HasValue ?
                new SqlParameter("RoleId", roleId) :
                new SqlParameter("RoleId", SqlDbType.Int);

           var userAddressParameter = new SqlParameter("UserAddress", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userAddress))
           {
               userAddressParameter.IsNullable = true;
               userAddressParameter.Value = DBNull.Value;
           }
           else
           {
               userAddressParameter.Value = userAddress;
           }

           var userEmailParameter = new SqlParameter("UserEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userEmail))
           {
               userEmailParameter.IsNullable = true;
               userEmailParameter.Value = DBNull.Value;
           }
           else
           {
               userEmailParameter.Value = userEmail;
           }

           var userMobileNumberParameter = new SqlParameter("UserMobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userMobileNumber))
           {
               userMobileNumberParameter.IsNullable = true;
               userMobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               userMobileNumberParameter.Value = userMobileNumber;
           }

            var userCountryIdParameter = userCountryId.HasValue ?
                new SqlParameter("UserCountryId", userCountryId) :
                new SqlParameter("UserCountryId", SqlDbType.Int);

           var userProfilePathParameter = new SqlParameter("UserProfilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userProfilePath))
           {
               userProfilePathParameter.IsNullable = true;
               userProfilePathParameter.Value = DBNull.Value;
           }
           else
           {
               userProfilePathParameter.Value = userProfilePath;
           }

           var currentPasswordParameter = new SqlParameter("CurrentPassword", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(currentPassword))
           {
               currentPasswordParameter.IsNullable = true;
               currentPasswordParameter.Value = DBNull.Value;
           }
           else
           {
               currentPasswordParameter.Value = currentPassword;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var isLoginRequiredParameter = new SqlParameter("IsLoginRequired", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isLoginRequired))
           {
               isLoginRequiredParameter.IsNullable = true;
               isLoginRequiredParameter.Value = DBNull.Value;
           }
           else
           {
               isLoginRequiredParameter.Value = isLoginRequired;
           }

            var centralUserIdParameter = centralUserId.HasValue ?
                new SqlParameter("CentralUserId", centralUserId) :
                new SqlParameter("CentralUserId", SqlDbType.BigInt);

           var addressLine1Parameter = new SqlParameter("AddressLine1", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressLine1))
           {
               addressLine1Parameter.IsNullable = true;
               addressLine1Parameter.Value = DBNull.Value;
           }
           else
           {
               addressLine1Parameter.Value = addressLine1;
           }

           var addressLine2Parameter = new SqlParameter("AddressLine2", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressLine2))
           {
               addressLine2Parameter.IsNullable = true;
               addressLine2Parameter.Value = DBNull.Value;
           }
           else
           {
               addressLine2Parameter.Value = addressLine2;
           }

           var addressLine3Parameter = new SqlParameter("AddressLine3", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressLine3))
           {
               addressLine3Parameter.IsNullable = true;
               addressLine3Parameter.Value = DBNull.Value;
           }
           else
           {
               addressLine3Parameter.Value = addressLine3;
           }

           var cityParameter = new SqlParameter("City", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(city))
           {
               cityParameter.IsNullable = true;
               cityParameter.Value = DBNull.Value;
           }
           else
           {
               cityParameter.Value = city;
           }

           var addressStateParameter = new SqlParameter("AddressState", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressState))
           {
               addressStateParameter.IsNullable = true;
               addressStateParameter.Value = DBNull.Value;
           }
           else
           {
               addressStateParameter.Value = addressState;
           }

           var postalCodeParameter = new SqlParameter("PostalCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(postalCode))
           {
               postalCodeParameter.IsNullable = true;
               postalCodeParameter.Value = DBNull.Value;
           }
           else
           {
               postalCodeParameter.Value = postalCode;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var countryMobileCodeParameter = new SqlParameter("CountryMobileCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(countryMobileCode))
           {
               countryMobileCodeParameter.IsNullable = true;
               countryMobileCodeParameter.Value = DBNull.Value;
           }
           else
           {
               countryMobileCodeParameter.Value = countryMobileCode;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUserDetails @UserId, @UserName, @IsMalaysian, @ICorPassportNumber, @UserVisaExpirity, @RoleId, @UserAddress, @UserEmail, @UserMobileNumber, @UserCountryId, @UserProfilePath, @CurrentPassword, @IsActive, @IsLoginRequired, @CentralUserId, @AddressLine1, @AddressLine2, @AddressLine3, @City, @AddressState, @PostalCode, @UpdatedBy, @ErrorCode OUT, @CountryMobileCode", userIdParameter, userNameParameter, isMalaysianParameter, iCorPassportNumberParameter, userVisaExpirityParameter, roleIdParameter, userAddressParameter, userEmailParameter, userMobileNumberParameter, userCountryIdParameter, userProfilePathParameter, currentPasswordParameter, isActiveParameter, isLoginRequiredParameter, centralUserIdParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, cityParameter, addressStateParameter, postalCodeParameter, updatedByParameter, errorCodeParameter, countryMobileCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUtilityBillsDetails(Nullable<Int32> utiltityBillId, Nullable<Int32> configurationid, string providerName, string isActive, string createdBy, ObjectParameter errorCode)
        {

            var utiltityBillIdParameter = utiltityBillId.HasValue ?
                new SqlParameter("UtiltityBillId", utiltityBillId) :
                new SqlParameter("UtiltityBillId", SqlDbType.Int);

            var configurationidParameter = configurationid.HasValue ?
                new SqlParameter("Configurationid", configurationid) :
                new SqlParameter("Configurationid", SqlDbType.Int);

           var providerNameParameter = new SqlParameter("ProviderName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(providerName))
           {
               providerNameParameter.IsNullable = true;
               providerNameParameter.Value = DBNull.Value;
           }
           else
           {
               providerNameParameter.Value = providerName;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUtilityBillsDetails @UtiltityBillId, @Configurationid, @ProviderName, @IsActive, @CreatedBy, @ErrorCode OUT", utiltityBillIdParameter, configurationidParameter, providerNameParameter, isActiveParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUtilityInvoiceDetails(Nullable<Int64> utilityInvoiceId, Nullable<Int32> utilityConfigKey, Nullable<Int32> utiltityBillId, Nullable<Int64> utilityRegId, Nullable<DateTime> billReceivedDate, string invoiceNumber, Nullable<DateTime> invoiceDate, Nullable<Int32> pymentTermDays, Nullable<Decimal> invoiceAmount, string statusid, string createdBy, string utilityInvoiceFilePath, ObjectParameter errorCode)
        {

            var utilityInvoiceIdParameter = utilityInvoiceId.HasValue ?
                new SqlParameter("UtilityInvoiceId", utilityInvoiceId) :
                new SqlParameter("UtilityInvoiceId", SqlDbType.BigInt);

            var utilityConfigKeyParameter = utilityConfigKey.HasValue ?
                new SqlParameter("UtilityConfigKey", utilityConfigKey) :
                new SqlParameter("UtilityConfigKey", SqlDbType.Int);

            var utiltityBillIdParameter = utiltityBillId.HasValue ?
                new SqlParameter("UtiltityBillId", utiltityBillId) :
                new SqlParameter("UtiltityBillId", SqlDbType.Int);

            var utilityRegIdParameter = utilityRegId.HasValue ?
                new SqlParameter("UtilityRegId", utilityRegId) :
                new SqlParameter("UtilityRegId", SqlDbType.BigInt);

            var billReceivedDateParameter = billReceivedDate.HasValue ?
                new SqlParameter("BillReceivedDate", billReceivedDate) :
                new SqlParameter("BillReceivedDate", SqlDbType.DateTime);

           var invoiceNumberParameter = new SqlParameter("InvoiceNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(invoiceNumber))
           {
               invoiceNumberParameter.IsNullable = true;
               invoiceNumberParameter.Value = DBNull.Value;
           }
           else
           {
               invoiceNumberParameter.Value = invoiceNumber;
           }

            var invoiceDateParameter = invoiceDate.HasValue ?
                new SqlParameter("InvoiceDate", invoiceDate) :
                new SqlParameter("InvoiceDate", SqlDbType.DateTime);

            var pymentTermDaysParameter = pymentTermDays.HasValue ?
                new SqlParameter("PymentTermDays", pymentTermDays) :
                new SqlParameter("PymentTermDays", SqlDbType.Int);

            var invoiceAmountParameter = invoiceAmount.HasValue ?
                new SqlParameter("InvoiceAmount", invoiceAmount) :
                new SqlParameter("InvoiceAmount", SqlDbType.Decimal);

           var statusidParameter = new SqlParameter("Statusid", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(statusid))
           {
               statusidParameter.IsNullable = true;
               statusidParameter.Value = DBNull.Value;
           }
           else
           {
               statusidParameter.Value = statusid;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var utilityInvoiceFilePathParameter = new SqlParameter("UtilityInvoiceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(utilityInvoiceFilePath))
           {
               utilityInvoiceFilePathParameter.IsNullable = true;
               utilityInvoiceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               utilityInvoiceFilePathParameter.Value = utilityInvoiceFilePath;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUtilityInvoiceDetails @UtilityInvoiceId, @UtilityConfigKey, @UtiltityBillId, @UtilityRegId, @BillReceivedDate, @InvoiceNumber, @InvoiceDate, @PymentTermDays, @InvoiceAmount, @Statusid, @CreatedBy, @UtilityInvoiceFilePath, @ErrorCode OUT", utilityInvoiceIdParameter, utilityConfigKeyParameter, utiltityBillIdParameter, utilityRegIdParameter, billReceivedDateParameter, invoiceNumberParameter, invoiceDateParameter, pymentTermDaysParameter, invoiceAmountParameter, statusidParameter, createdByParameter, utilityInvoiceFilePathParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUtilityInvoiceLineItemDetails(Nullable<Int32> utilityInvoiceLineID, Nullable<Int64> utilityInvoiceId, Nullable<Int32> glAccountItemID, string lineNumber, string lineItemDescription, Nullable<Decimal> lineTotalAmount, Nullable<Int32> nonstockItemId, string createdBy, ObjectParameter errorCode)
        {

            var utilityInvoiceLineIDParameter = utilityInvoiceLineID.HasValue ?
                new SqlParameter("UtilityInvoiceLineID", utilityInvoiceLineID) :
                new SqlParameter("UtilityInvoiceLineID", SqlDbType.Int);

            var utilityInvoiceIdParameter = utilityInvoiceId.HasValue ?
                new SqlParameter("UtilityInvoiceId", utilityInvoiceId) :
                new SqlParameter("UtilityInvoiceId", SqlDbType.BigInt);

            var glAccountItemIDParameter = glAccountItemID.HasValue ?
                new SqlParameter("GlAccountItemID", glAccountItemID) :
                new SqlParameter("GlAccountItemID", SqlDbType.Int);

           var lineNumberParameter = new SqlParameter("LineNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(lineNumber))
           {
               lineNumberParameter.IsNullable = true;
               lineNumberParameter.Value = DBNull.Value;
           }
           else
           {
               lineNumberParameter.Value = lineNumber;
           }

           var lineItemDescriptionParameter = new SqlParameter("LineItemDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(lineItemDescription))
           {
               lineItemDescriptionParameter.IsNullable = true;
               lineItemDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               lineItemDescriptionParameter.Value = lineItemDescription;
           }

            var lineTotalAmountParameter = lineTotalAmount.HasValue ?
                new SqlParameter("LineTotalAmount", lineTotalAmount) :
                new SqlParameter("LineTotalAmount", SqlDbType.Decimal);

            var nonstockItemIdParameter = nonstockItemId.HasValue ?
                new SqlParameter("NonstockItemId", nonstockItemId) :
                new SqlParameter("NonstockItemId", SqlDbType.Int);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUtilityInvoiceLineItemDetails @UtilityInvoiceLineID, @UtilityInvoiceId, @GlAccountItemID, @LineNumber, @LineItemDescription, @LineTotalAmount, @NonstockItemId, @CreatedBy, @ErrorCode OUT", utilityInvoiceLineIDParameter, utilityInvoiceIdParameter, glAccountItemIDParameter, lineNumberParameter, lineItemDescriptionParameter, lineTotalAmountParameter, nonstockItemIdParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUtilityInvoicePaymentDetails(Nullable<Int64> utilityInvoiceId, Nullable<Int32> statusId, string paymentInfo, string comments, string additionalReferenceFilePath, Nullable<Int64> actionTakenByUserId, string updatedBY, ObjectParameter errorCode)
        {

            var utilityInvoiceIdParameter = utilityInvoiceId.HasValue ?
                new SqlParameter("UtilityInvoiceId", utilityInvoiceId) :
                new SqlParameter("UtilityInvoiceId", SqlDbType.BigInt);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var additionalReferenceFilePathParameter = new SqlParameter("AdditionalReferenceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferenceFilePath))
           {
               additionalReferenceFilePathParameter.IsNullable = true;
               additionalReferenceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferenceFilePathParameter.Value = additionalReferenceFilePath;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUtilityInvoicePaymentDetails @UtilityInvoiceId, @StatusId, @PaymentInfo, @Comments, @AdditionalReferenceFilePath, @ActionTakenByUserId, @UpdatedBY, @ErrorCode OUT", utilityInvoiceIdParameter, statusIdParameter, paymentInfoParameter, commentsParameter, additionalReferenceFilePathParameter, actionTakenByUserIdParameter, updatedBYParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVehicleParkFeeDetails(string hallBookPriceInfo, string updatedBy, ObjectParameter errorCode)
        {

           var hallBookPriceInfoParameter = new SqlParameter("HallBookPriceInfo", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(hallBookPriceInfo))
           {
               hallBookPriceInfoParameter.IsNullable = true;
               hallBookPriceInfoParameter.Value = DBNull.Value;
           }
           else
           {
               hallBookPriceInfoParameter.Value = hallBookPriceInfo;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVehicleParkFeeDetails @HallBookPriceInfo, @UpdatedBy, @ErrorCode OUT", hallBookPriceInfoParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVehicleParkingRequest(Nullable<Int64> vehicleParkingRequestID, Nullable<Int32> vehicleSlotId, Nullable<Int32> allowdVehicleId, Nullable<Int32> unitId, Nullable<Int64> ownerOrTenantUserID, Nullable<Decimal> parkingPrice, Nullable<DateTime> bookingFromDate, string bookingComment, string vehicleParkPriceIds, string createdBy, ObjectParameter errorCode, Nullable<Int32> initalSetupRequestID, ObjectParameter currentVehicleParkingRequestID, string isUserAcceptedTermsAndConditions, Nullable<DateTime> createdOn)
        {

            var vehicleParkingRequestIDParameter = vehicleParkingRequestID.HasValue ?
                new SqlParameter("VehicleParkingRequestID", vehicleParkingRequestID) :
                new SqlParameter("VehicleParkingRequestID", SqlDbType.BigInt);

            var vehicleSlotIdParameter = vehicleSlotId.HasValue ?
                new SqlParameter("VehicleSlotId", vehicleSlotId) :
                new SqlParameter("VehicleSlotId", SqlDbType.Int);

            var allowdVehicleIdParameter = allowdVehicleId.HasValue ?
                new SqlParameter("AllowdVehicleId", allowdVehicleId) :
                new SqlParameter("AllowdVehicleId", SqlDbType.Int);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var ownerOrTenantUserIDParameter = ownerOrTenantUserID.HasValue ?
                new SqlParameter("OwnerOrTenantUserID", ownerOrTenantUserID) :
                new SqlParameter("OwnerOrTenantUserID", SqlDbType.BigInt);

            var parkingPriceParameter = parkingPrice.HasValue ?
                new SqlParameter("ParkingPrice", parkingPrice) :
                new SqlParameter("ParkingPrice", SqlDbType.Decimal);

            var bookingFromDateParameter = bookingFromDate.HasValue ?
                new SqlParameter("BookingFromDate", bookingFromDate) :
                new SqlParameter("BookingFromDate", SqlDbType.DateTime);

           var bookingCommentParameter = new SqlParameter("BookingComment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(bookingComment))
           {
               bookingCommentParameter.IsNullable = true;
               bookingCommentParameter.Value = DBNull.Value;
           }
           else
           {
               bookingCommentParameter.Value = bookingComment;
           }

           var vehicleParkPriceIdsParameter = new SqlParameter("VehicleParkPriceIds", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(vehicleParkPriceIds))
           {
               vehicleParkPriceIdsParameter.IsNullable = true;
               vehicleParkPriceIdsParameter.Value = DBNull.Value;
           }
           else
           {
               vehicleParkPriceIdsParameter.Value = vehicleParkPriceIds;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var initalSetupRequestIDParameter = initalSetupRequestID.HasValue ?
                new SqlParameter("InitalSetupRequestID", initalSetupRequestID) :
                new SqlParameter("InitalSetupRequestID", SqlDbType.Int);

           var currentVehicleParkingRequestIDParameter = new SqlParameter("CurrentVehicleParkingRequestID", SqlDbType.BigInt);
               currentVehicleParkingRequestIDParameter.Direction = System.Data.ParameterDirection.Output;
               currentVehicleParkingRequestIDParameter.Value = currentVehicleParkingRequestID != null ? currentVehicleParkingRequestID.Value : null;

           var isUserAcceptedTermsAndConditionsParameter = new SqlParameter("IsUserAcceptedTermsAndConditions", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isUserAcceptedTermsAndConditions))
           {
               isUserAcceptedTermsAndConditionsParameter.IsNullable = true;
               isUserAcceptedTermsAndConditionsParameter.Value = DBNull.Value;
           }
           else
           {
               isUserAcceptedTermsAndConditionsParameter.Value = isUserAcceptedTermsAndConditions;
           }

            var createdOnParameter = createdOn.HasValue ?
                new SqlParameter("CreatedOn", createdOn) :
                new SqlParameter("CreatedOn", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVehicleParkingRequest @VehicleParkingRequestID, @VehicleSlotId, @AllowdVehicleId, @UnitId, @OwnerOrTenantUserID, @ParkingPrice, @BookingFromDate, @BookingComment, @VehicleParkPriceIds, @CreatedBy, @ErrorCode OUT, @InitalSetupRequestID, @CurrentVehicleParkingRequestID OUT, @IsUserAcceptedTermsAndConditions, @CreatedOn", vehicleParkingRequestIDParameter, vehicleSlotIdParameter, allowdVehicleIdParameter, unitIdParameter, ownerOrTenantUserIDParameter, parkingPriceParameter, bookingFromDateParameter, bookingCommentParameter, vehicleParkPriceIdsParameter, createdByParameter, errorCodeParameter, initalSetupRequestIDParameter, currentVehicleParkingRequestIDParameter, isUserAcceptedTermsAndConditionsParameter, createdOnParameter);

            errorCode.Value = errorCodeParameter.Value;
            currentVehicleParkingRequestID.Value = currentVehicleParkingRequestIDParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVehicleParkingRequestActionDetails(Nullable<Int64> vehicleParkingRequestID, Nullable<Int32> requestStatusId, string paymentInfo, string comments, string additionalReferenceFilePath, Nullable<Int64> actionTakenByUserId, string updatedBY, ObjectParameter errorCode, Nullable<Int32> previousStatusID, Nullable<DateTime> finalStopBillDate, Nullable<DateTime> todaysClientDate, ObjectParameter vehicleParkingRequestActionId)
        {

            var vehicleParkingRequestIDParameter = vehicleParkingRequestID.HasValue ?
                new SqlParameter("VehicleParkingRequestID", vehicleParkingRequestID) :
                new SqlParameter("VehicleParkingRequestID", SqlDbType.BigInt);

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var additionalReferenceFilePathParameter = new SqlParameter("AdditionalReferenceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferenceFilePath))
           {
               additionalReferenceFilePathParameter.IsNullable = true;
               additionalReferenceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferenceFilePathParameter.Value = additionalReferenceFilePath;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);

            var finalStopBillDateParameter = finalStopBillDate.HasValue ?
                new SqlParameter("FinalStopBillDate", finalStopBillDate) :
                new SqlParameter("FinalStopBillDate", SqlDbType.DateTime);

            var todaysClientDateParameter = todaysClientDate.HasValue ?
                new SqlParameter("TodaysClientDate", todaysClientDate) :
                new SqlParameter("TodaysClientDate", SqlDbType.DateTime);

           var vehicleParkingRequestActionIdParameter = new SqlParameter("VehicleParkingRequestActionId", SqlDbType.BigInt);
               vehicleParkingRequestActionIdParameter.Direction = System.Data.ParameterDirection.Output;
               vehicleParkingRequestActionIdParameter.Value = vehicleParkingRequestActionId != null ? vehicleParkingRequestActionId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVehicleParkingRequestActionDetails @VehicleParkingRequestID, @RequestStatusId, @PaymentInfo, @Comments, @AdditionalReferenceFilePath, @ActionTakenByUserId, @UpdatedBY, @ErrorCode OUT, @PreviousStatusID, @FinalStopBillDate, @TodaysClientDate, @VehicleParkingRequestActionId OUT", vehicleParkingRequestIDParameter, requestStatusIdParameter, paymentInfoParameter, commentsParameter, additionalReferenceFilePathParameter, actionTakenByUserIdParameter, updatedBYParameter, errorCodeParameter, previousStatusIDParameter, finalStopBillDateParameter, todaysClientDateParameter, vehicleParkingRequestActionIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            vehicleParkingRequestActionId.Value = vehicleParkingRequestActionIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVehicleParkingSlotSetting(Nullable<Int32> vehicleSlotId, string slotName, Nullable<Int32> allowdVehicleId, string isVisitorParking, string createdBy, ObjectParameter errorCode)
        {

            var vehicleSlotIdParameter = vehicleSlotId.HasValue ?
                new SqlParameter("VehicleSlotId", vehicleSlotId) :
                new SqlParameter("VehicleSlotId", SqlDbType.Int);

           var slotNameParameter = new SqlParameter("SlotName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(slotName))
           {
               slotNameParameter.IsNullable = true;
               slotNameParameter.Value = DBNull.Value;
           }
           else
           {
               slotNameParameter.Value = slotName;
           }

            var allowdVehicleIdParameter = allowdVehicleId.HasValue ?
                new SqlParameter("AllowdVehicleId", allowdVehicleId) :
                new SqlParameter("AllowdVehicleId", SqlDbType.Int);

           var isVisitorParkingParameter = new SqlParameter("IsVisitorParking", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isVisitorParking))
           {
               isVisitorParkingParameter.IsNullable = true;
               isVisitorParkingParameter.Value = DBNull.Value;
           }
           else
           {
               isVisitorParkingParameter.Value = isVisitorParking;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVehicleParkingSlotSetting @VehicleSlotId, @SlotName, @AllowdVehicleId, @IsVisitorParking, @CreatedBy, @ErrorCode OUT", vehicleSlotIdParameter, slotNameParameter, allowdVehicleIdParameter, isVisitorParkingParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVendorCreditNoteSubmitGLPostDetails(Nullable<Int64> creditNoteId, string updatedBy, ObjectParameter errorCode)
        {

            var creditNoteIdParameter = creditNoteId.HasValue ?
                new SqlParameter("CreditNoteId", creditNoteId) :
                new SqlParameter("CreditNoteId", SqlDbType.BigInt);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVendorCreditNoteSubmitGLPostDetails @CreditNoteId, @UpdatedBy, @ErrorCode OUT", creditNoteIdParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVendorDebitNoteSubmitGLPostDetails(Nullable<Int64> debitNoteId, string updatedBy, ObjectParameter errorCode)
        {

            var debitNoteIdParameter = debitNoteId.HasValue ?
                new SqlParameter("DebitNoteId", debitNoteId) :
                new SqlParameter("DebitNoteId", SqlDbType.BigInt);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVendorDebitNoteSubmitGLPostDetails @DebitNoteId, @UpdatedBy, @ErrorCode OUT", debitNoteIdParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVendorInvoice(Nullable<Int64> vendorInvoiceId, Nullable<Int64> vendorRegId, string monthOfInvoice, Nullable<DateTime> invoicePeriodFrom, Nullable<DateTime> invoicePeriodTo, Nullable<DateTime> billReceivedDate, string invoiceNumber, Nullable<DateTime> invoiceDate, Nullable<Int32> pymentTermDays, Nullable<Decimal> invoiceAmount, string otherCompanyName, string statusid, string createdBy, string vendorInvoiceFilePath, ObjectParameter errorCode)
        {

            var vendorInvoiceIdParameter = vendorInvoiceId.HasValue ?
                new SqlParameter("VendorInvoiceId", vendorInvoiceId) :
                new SqlParameter("VendorInvoiceId", SqlDbType.BigInt);

            var vendorRegIdParameter = vendorRegId.HasValue ?
                new SqlParameter("VendorRegId", vendorRegId) :
                new SqlParameter("VendorRegId", SqlDbType.BigInt);

           var monthOfInvoiceParameter = new SqlParameter("MonthOfInvoice", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(monthOfInvoice))
           {
               monthOfInvoiceParameter.IsNullable = true;
               monthOfInvoiceParameter.Value = DBNull.Value;
           }
           else
           {
               monthOfInvoiceParameter.Value = monthOfInvoice;
           }

            var invoicePeriodFromParameter = invoicePeriodFrom.HasValue ?
                new SqlParameter("InvoicePeriodFrom", invoicePeriodFrom) :
                new SqlParameter("InvoicePeriodFrom", SqlDbType.DateTime);

            var invoicePeriodToParameter = invoicePeriodTo.HasValue ?
                new SqlParameter("InvoicePeriodTo", invoicePeriodTo) :
                new SqlParameter("InvoicePeriodTo", SqlDbType.DateTime);

            var billReceivedDateParameter = billReceivedDate.HasValue ?
                new SqlParameter("BillReceivedDate", billReceivedDate) :
                new SqlParameter("BillReceivedDate", SqlDbType.DateTime);

           var invoiceNumberParameter = new SqlParameter("InvoiceNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(invoiceNumber))
           {
               invoiceNumberParameter.IsNullable = true;
               invoiceNumberParameter.Value = DBNull.Value;
           }
           else
           {
               invoiceNumberParameter.Value = invoiceNumber;
           }

            var invoiceDateParameter = invoiceDate.HasValue ?
                new SqlParameter("InvoiceDate", invoiceDate) :
                new SqlParameter("InvoiceDate", SqlDbType.DateTime);

            var pymentTermDaysParameter = pymentTermDays.HasValue ?
                new SqlParameter("PymentTermDays", pymentTermDays) :
                new SqlParameter("PymentTermDays", SqlDbType.Int);

            var invoiceAmountParameter = invoiceAmount.HasValue ?
                new SqlParameter("InvoiceAmount", invoiceAmount) :
                new SqlParameter("InvoiceAmount", SqlDbType.Decimal);

           var otherCompanyNameParameter = new SqlParameter("OtherCompanyName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(otherCompanyName))
           {
               otherCompanyNameParameter.IsNullable = true;
               otherCompanyNameParameter.Value = DBNull.Value;
           }
           else
           {
               otherCompanyNameParameter.Value = otherCompanyName;
           }

           var statusidParameter = new SqlParameter("Statusid", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(statusid))
           {
               statusidParameter.IsNullable = true;
               statusidParameter.Value = DBNull.Value;
           }
           else
           {
               statusidParameter.Value = statusid;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var vendorInvoiceFilePathParameter = new SqlParameter("VendorInvoiceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(vendorInvoiceFilePath))
           {
               vendorInvoiceFilePathParameter.IsNullable = true;
               vendorInvoiceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               vendorInvoiceFilePathParameter.Value = vendorInvoiceFilePath;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVendorInvoice @VendorInvoiceId, @VendorRegId, @MonthOfInvoice, @InvoicePeriodFrom, @InvoicePeriodTo, @BillReceivedDate, @InvoiceNumber, @InvoiceDate, @PymentTermDays, @InvoiceAmount, @OtherCompanyName, @Statusid, @CreatedBy, @VendorInvoiceFilePath, @ErrorCode OUT", vendorInvoiceIdParameter, vendorRegIdParameter, monthOfInvoiceParameter, invoicePeriodFromParameter, invoicePeriodToParameter, billReceivedDateParameter, invoiceNumberParameter, invoiceDateParameter, pymentTermDaysParameter, invoiceAmountParameter, otherCompanyNameParameter, statusidParameter, createdByParameter, vendorInvoiceFilePathParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVendorinvoiceAction_LedgerDetails(Nullable<Int64> vendorInvoiceId, Nullable<Int64> vendorInvoiceActionId, Nullable<Int32> statusId, string updatedBy, ObjectParameter errorCode)
        {

            var vendorInvoiceIdParameter = vendorInvoiceId.HasValue ?
                new SqlParameter("VendorInvoiceId", vendorInvoiceId) :
                new SqlParameter("VendorInvoiceId", SqlDbType.BigInt);

            var vendorInvoiceActionIdParameter = vendorInvoiceActionId.HasValue ?
                new SqlParameter("VendorInvoiceActionId", vendorInvoiceActionId) :
                new SqlParameter("VendorInvoiceActionId", SqlDbType.BigInt);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVendorinvoiceAction_LedgerDetails @VendorInvoiceId, @VendorInvoiceActionId, @StatusId, @UpdatedBy, @ErrorCode OUT", vendorInvoiceIdParameter, vendorInvoiceActionIdParameter, statusIdParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVendorInvoiceActionDetails(Nullable<Int64> vendorInvoiceId, string comments, Nullable<Int32> requestStatusId, string paymentInfo, string additionalReferenceFilePath, string actionTakenBy, Nullable<Int64> actionTakenByUserId, Nullable<Int32> previousStatusId, ObjectParameter errorCode, ObjectParameter vendorInvoiceActionId)
        {

            var vendorInvoiceIdParameter = vendorInvoiceId.HasValue ?
                new SqlParameter("VendorInvoiceId", vendorInvoiceId) :
                new SqlParameter("VendorInvoiceId", SqlDbType.BigInt);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

            var requestStatusIdParameter = requestStatusId.HasValue ?
                new SqlParameter("RequestStatusId", requestStatusId) :
                new SqlParameter("RequestStatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var additionalReferenceFilePathParameter = new SqlParameter("AdditionalReferenceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferenceFilePath))
           {
               additionalReferenceFilePathParameter.IsNullable = true;
               additionalReferenceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferenceFilePathParameter.Value = additionalReferenceFilePath;
           }

           var actionTakenByParameter = new SqlParameter("ActionTakenBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(actionTakenBy))
           {
               actionTakenByParameter.IsNullable = true;
               actionTakenByParameter.Value = DBNull.Value;
           }
           else
           {
               actionTakenByParameter.Value = actionTakenBy;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

            var previousStatusIdParameter = previousStatusId.HasValue ?
                new SqlParameter("PreviousStatusId", previousStatusId) :
                new SqlParameter("PreviousStatusId", SqlDbType.Int);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var vendorInvoiceActionIdParameter = new SqlParameter("VendorInvoiceActionId", SqlDbType.BigInt);
               vendorInvoiceActionIdParameter.Direction = System.Data.ParameterDirection.Output;
               vendorInvoiceActionIdParameter.Value = vendorInvoiceActionId != null ? vendorInvoiceActionId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVendorInvoiceActionDetails @VendorInvoiceId, @Comments, @RequestStatusId, @PaymentInfo, @AdditionalReferenceFilePath, @ActionTakenBy, @ActionTakenByUserId, @PreviousStatusId, @ErrorCode OUT, @VendorInvoiceActionId OUT", vendorInvoiceIdParameter, commentsParameter, requestStatusIdParameter, paymentInfoParameter, additionalReferenceFilePathParameter, actionTakenByParameter, actionTakenByUserIdParameter, previousStatusIdParameter, errorCodeParameter, vendorInvoiceActionIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            vendorInvoiceActionId.Value = vendorInvoiceActionIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVendorInvoiceDetails(Nullable<Int64> vendorInvoiceId, Nullable<Int64> vendorRegId, string invoiceNumber, Nullable<DateTime> invoiceDate, Nullable<DateTime> invoiceReceivedDate, Nullable<Decimal> invoiceAmount, Nullable<Int32> workOrderID, string companyInvoiceRefferenceNum, string statusid, string createdBy, string vendorInvoiceFilePath, ObjectParameter errorCode)
        {

            var vendorInvoiceIdParameter = vendorInvoiceId.HasValue ?
                new SqlParameter("VendorInvoiceId", vendorInvoiceId) :
                new SqlParameter("VendorInvoiceId", SqlDbType.BigInt);

            var vendorRegIdParameter = vendorRegId.HasValue ?
                new SqlParameter("VendorRegId", vendorRegId) :
                new SqlParameter("VendorRegId", SqlDbType.BigInt);

           var invoiceNumberParameter = new SqlParameter("InvoiceNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(invoiceNumber))
           {
               invoiceNumberParameter.IsNullable = true;
               invoiceNumberParameter.Value = DBNull.Value;
           }
           else
           {
               invoiceNumberParameter.Value = invoiceNumber;
           }

            var invoiceDateParameter = invoiceDate.HasValue ?
                new SqlParameter("InvoiceDate", invoiceDate) :
                new SqlParameter("InvoiceDate", SqlDbType.DateTime);

            var invoiceReceivedDateParameter = invoiceReceivedDate.HasValue ?
                new SqlParameter("InvoiceReceivedDate", invoiceReceivedDate) :
                new SqlParameter("InvoiceReceivedDate", SqlDbType.DateTime);

            var invoiceAmountParameter = invoiceAmount.HasValue ?
                new SqlParameter("InvoiceAmount", invoiceAmount) :
                new SqlParameter("InvoiceAmount", SqlDbType.Decimal);

            var workOrderIDParameter = workOrderID.HasValue ?
                new SqlParameter("WorkOrderID", workOrderID) :
                new SqlParameter("WorkOrderID", SqlDbType.Int);

           var companyInvoiceRefferenceNumParameter = new SqlParameter("CompanyInvoiceRefferenceNum", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyInvoiceRefferenceNum))
           {
               companyInvoiceRefferenceNumParameter.IsNullable = true;
               companyInvoiceRefferenceNumParameter.Value = DBNull.Value;
           }
           else
           {
               companyInvoiceRefferenceNumParameter.Value = companyInvoiceRefferenceNum;
           }

           var statusidParameter = new SqlParameter("Statusid", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(statusid))
           {
               statusidParameter.IsNullable = true;
               statusidParameter.Value = DBNull.Value;
           }
           else
           {
               statusidParameter.Value = statusid;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var vendorInvoiceFilePathParameter = new SqlParameter("VendorInvoiceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(vendorInvoiceFilePath))
           {
               vendorInvoiceFilePathParameter.IsNullable = true;
               vendorInvoiceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               vendorInvoiceFilePathParameter.Value = vendorInvoiceFilePath;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVendorInvoiceDetails @VendorInvoiceId, @VendorRegId, @InvoiceNumber, @InvoiceDate, @InvoiceReceivedDate, @InvoiceAmount, @WorkOrderID, @CompanyInvoiceRefferenceNum, @Statusid, @CreatedBy, @VendorInvoiceFilePath, @ErrorCode OUT", vendorInvoiceIdParameter, vendorRegIdParameter, invoiceNumberParameter, invoiceDateParameter, invoiceReceivedDateParameter, invoiceAmountParameter, workOrderIDParameter, companyInvoiceRefferenceNumParameter, statusidParameter, createdByParameter, vendorInvoiceFilePathParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVendorInvoiceLineItemDetails(Nullable<Int32> vendorInvoiceLineID, Nullable<Int64> vendorInvoiceId, Nullable<Int32> glAccountItemID, string lineNumber, string lineItemDescription, Nullable<Int32> purchaseQunitity, Nullable<Decimal> pricePerUnit, Nullable<Decimal> taxPercentageperUnit, Nullable<Decimal> taxAmountPerUnit, Nullable<Decimal> discountAmount, Nullable<Decimal> totalAmountPerUnit, Nullable<Decimal> lineTotalAmount, Nullable<Int32> nonstockItemId, Nullable<Int32> lineItemCategoryConfigKey, Nullable<Int32> unitOfMeasureId, string createdBy, ObjectParameter errorCode)
        {

            var vendorInvoiceLineIDParameter = vendorInvoiceLineID.HasValue ?
                new SqlParameter("VendorInvoiceLineID", vendorInvoiceLineID) :
                new SqlParameter("VendorInvoiceLineID", SqlDbType.Int);

            var vendorInvoiceIdParameter = vendorInvoiceId.HasValue ?
                new SqlParameter("VendorInvoiceId", vendorInvoiceId) :
                new SqlParameter("VendorInvoiceId", SqlDbType.BigInt);

            var glAccountItemIDParameter = glAccountItemID.HasValue ?
                new SqlParameter("GlAccountItemID", glAccountItemID) :
                new SqlParameter("GlAccountItemID", SqlDbType.Int);

           var lineNumberParameter = new SqlParameter("LineNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(lineNumber))
           {
               lineNumberParameter.IsNullable = true;
               lineNumberParameter.Value = DBNull.Value;
           }
           else
           {
               lineNumberParameter.Value = lineNumber;
           }

           var lineItemDescriptionParameter = new SqlParameter("LineItemDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(lineItemDescription))
           {
               lineItemDescriptionParameter.IsNullable = true;
               lineItemDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               lineItemDescriptionParameter.Value = lineItemDescription;
           }

            var purchaseQunitityParameter = purchaseQunitity.HasValue ?
                new SqlParameter("PurchaseQunitity", purchaseQunitity) :
                new SqlParameter("PurchaseQunitity", SqlDbType.Int);

            var pricePerUnitParameter = pricePerUnit.HasValue ?
                new SqlParameter("PricePerUnit", pricePerUnit) :
                new SqlParameter("PricePerUnit", SqlDbType.Decimal);

            var taxPercentageperUnitParameter = taxPercentageperUnit.HasValue ?
                new SqlParameter("TaxPercentageperUnit", taxPercentageperUnit) :
                new SqlParameter("TaxPercentageperUnit", SqlDbType.Decimal);

            var taxAmountPerUnitParameter = taxAmountPerUnit.HasValue ?
                new SqlParameter("TaxAmountPerUnit", taxAmountPerUnit) :
                new SqlParameter("TaxAmountPerUnit", SqlDbType.Decimal);

            var discountAmountParameter = discountAmount.HasValue ?
                new SqlParameter("DiscountAmount", discountAmount) :
                new SqlParameter("DiscountAmount", SqlDbType.Decimal);

            var totalAmountPerUnitParameter = totalAmountPerUnit.HasValue ?
                new SqlParameter("TotalAmountPerUnit", totalAmountPerUnit) :
                new SqlParameter("TotalAmountPerUnit", SqlDbType.Decimal);

            var lineTotalAmountParameter = lineTotalAmount.HasValue ?
                new SqlParameter("LineTotalAmount", lineTotalAmount) :
                new SqlParameter("LineTotalAmount", SqlDbType.Decimal);

            var nonstockItemIdParameter = nonstockItemId.HasValue ?
                new SqlParameter("NonstockItemId", nonstockItemId) :
                new SqlParameter("NonstockItemId", SqlDbType.Int);

            var lineItemCategoryConfigKeyParameter = lineItemCategoryConfigKey.HasValue ?
                new SqlParameter("LineItemCategoryConfigKey", lineItemCategoryConfigKey) :
                new SqlParameter("LineItemCategoryConfigKey", SqlDbType.Int);

            var unitOfMeasureIdParameter = unitOfMeasureId.HasValue ?
                new SqlParameter("UnitOfMeasureId", unitOfMeasureId) :
                new SqlParameter("UnitOfMeasureId", SqlDbType.Int);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVendorInvoiceLineItemDetails @VendorInvoiceLineID, @VendorInvoiceId, @GlAccountItemID, @LineNumber, @LineItemDescription, @PurchaseQunitity, @PricePerUnit, @TaxPercentageperUnit, @TaxAmountPerUnit, @DiscountAmount, @TotalAmountPerUnit, @LineTotalAmount, @NonstockItemId, @LineItemCategoryConfigKey, @UnitOfMeasureId, @CreatedBy, @ErrorCode OUT", vendorInvoiceLineIDParameter, vendorInvoiceIdParameter, glAccountItemIDParameter, lineNumberParameter, lineItemDescriptionParameter, purchaseQunitityParameter, pricePerUnitParameter, taxPercentageperUnitParameter, taxAmountPerUnitParameter, discountAmountParameter, totalAmountPerUnitParameter, lineTotalAmountParameter, nonstockItemIdParameter, lineItemCategoryConfigKeyParameter, unitOfMeasureIdParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVendorInvoicePaymentDetails(Nullable<Int64> vendorInvoiceId, Nullable<Int32> statusId, string paymentInfo, string comments, string additionalReferenceFilePath, Nullable<Int64> actionTakenByUserId, string updatedBY, ObjectParameter errorCode)
        {

            var vendorInvoiceIdParameter = vendorInvoiceId.HasValue ?
                new SqlParameter("VendorInvoiceId", vendorInvoiceId) :
                new SqlParameter("VendorInvoiceId", SqlDbType.BigInt);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var additionalReferenceFilePathParameter = new SqlParameter("AdditionalReferenceFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferenceFilePath))
           {
               additionalReferenceFilePathParameter.IsNullable = true;
               additionalReferenceFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferenceFilePathParameter.Value = additionalReferenceFilePath;
           }

            var actionTakenByUserIdParameter = actionTakenByUserId.HasValue ?
                new SqlParameter("ActionTakenByUserId", actionTakenByUserId) :
                new SqlParameter("ActionTakenByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVendorInvoicePaymentDetails @VendorInvoiceId, @StatusId, @PaymentInfo, @Comments, @AdditionalReferenceFilePath, @ActionTakenByUserId, @UpdatedBY, @ErrorCode OUT", vendorInvoiceIdParameter, statusIdParameter, paymentInfoParameter, commentsParameter, additionalReferenceFilePathParameter, actionTakenByUserIdParameter, updatedBYParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVendorMemberetails(Nullable<Int32> vendorMemberId, Nullable<Int32> vendorRegId, Nullable<Int64> memberUserID, Nullable<Int32> vDepartmentId, Nullable<Int64> memberCentralisedUserId, string memberName, string memberEmail, string memberMobileNumber, string isActive, string createdBy, ObjectParameter errorCode, string countryCode)
        {

            var vendorMemberIdParameter = vendorMemberId.HasValue ?
                new SqlParameter("VendorMemberId", vendorMemberId) :
                new SqlParameter("VendorMemberId", SqlDbType.Int);

            var vendorRegIdParameter = vendorRegId.HasValue ?
                new SqlParameter("VendorRegId", vendorRegId) :
                new SqlParameter("VendorRegId", SqlDbType.Int);

            var memberUserIDParameter = memberUserID.HasValue ?
                new SqlParameter("MemberUserID", memberUserID) :
                new SqlParameter("MemberUserID", SqlDbType.BigInt);

            var vDepartmentIdParameter = vDepartmentId.HasValue ?
                new SqlParameter("VDepartmentId", vDepartmentId) :
                new SqlParameter("VDepartmentId", SqlDbType.Int);

            var memberCentralisedUserIdParameter = memberCentralisedUserId.HasValue ?
                new SqlParameter("MemberCentralisedUserId", memberCentralisedUserId) :
                new SqlParameter("MemberCentralisedUserId", SqlDbType.BigInt);

           var memberNameParameter = new SqlParameter("MemberName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(memberName))
           {
               memberNameParameter.IsNullable = true;
               memberNameParameter.Value = DBNull.Value;
           }
           else
           {
               memberNameParameter.Value = memberName;
           }

           var memberEmailParameter = new SqlParameter("MemberEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(memberEmail))
           {
               memberEmailParameter.IsNullable = true;
               memberEmailParameter.Value = DBNull.Value;
           }
           else
           {
               memberEmailParameter.Value = memberEmail;
           }

           var memberMobileNumberParameter = new SqlParameter("MemberMobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(memberMobileNumber))
           {
               memberMobileNumberParameter.IsNullable = true;
               memberMobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               memberMobileNumberParameter.Value = memberMobileNumber;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var countryCodeParameter = new SqlParameter("CountryCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(countryCode))
           {
               countryCodeParameter.IsNullable = true;
               countryCodeParameter.Value = DBNull.Value;
           }
           else
           {
               countryCodeParameter.Value = countryCode;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVendorMemberetails @VendorMemberId, @VendorRegId, @MemberUserID, @VDepartmentId, @MemberCentralisedUserId, @MemberName, @MemberEmail, @MemberMobileNumber, @IsActive, @CreatedBy, @ErrorCode OUT, @CountryCode", vendorMemberIdParameter, vendorRegIdParameter, memberUserIDParameter, vDepartmentIdParameter, memberCentralisedUserIdParameter, memberNameParameter, memberEmailParameter, memberMobileNumberParameter, isActiveParameter, createdByParameter, errorCodeParameter, countryCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVendorPICDetails(Nullable<Int32> vendorPICId, Nullable<Int32> vendorRegId, Nullable<Int64> picUserID, Nullable<Int32> vDepartmentId, Nullable<Int64> picCentralisedUserId, string pICName, string pICEmail, string pICMobileNumber, string isActive, string createdBy, ObjectParameter errorCode, string countryCode)
        {

            var vendorPICIdParameter = vendorPICId.HasValue ?
                new SqlParameter("VendorPICId", vendorPICId) :
                new SqlParameter("VendorPICId", SqlDbType.Int);

            var vendorRegIdParameter = vendorRegId.HasValue ?
                new SqlParameter("VendorRegId", vendorRegId) :
                new SqlParameter("VendorRegId", SqlDbType.Int);

            var picUserIDParameter = picUserID.HasValue ?
                new SqlParameter("PicUserID", picUserID) :
                new SqlParameter("PicUserID", SqlDbType.BigInt);

            var vDepartmentIdParameter = vDepartmentId.HasValue ?
                new SqlParameter("VDepartmentId", vDepartmentId) :
                new SqlParameter("VDepartmentId", SqlDbType.Int);

            var picCentralisedUserIdParameter = picCentralisedUserId.HasValue ?
                new SqlParameter("PicCentralisedUserId", picCentralisedUserId) :
                new SqlParameter("PicCentralisedUserId", SqlDbType.BigInt);

           var pICNameParameter = new SqlParameter("PICName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(pICName))
           {
               pICNameParameter.IsNullable = true;
               pICNameParameter.Value = DBNull.Value;
           }
           else
           {
               pICNameParameter.Value = pICName;
           }

           var pICEmailParameter = new SqlParameter("PICEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(pICEmail))
           {
               pICEmailParameter.IsNullable = true;
               pICEmailParameter.Value = DBNull.Value;
           }
           else
           {
               pICEmailParameter.Value = pICEmail;
           }

           var pICMobileNumberParameter = new SqlParameter("PICMobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(pICMobileNumber))
           {
               pICMobileNumberParameter.IsNullable = true;
               pICMobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               pICMobileNumberParameter.Value = pICMobileNumber;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var countryCodeParameter = new SqlParameter("CountryCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(countryCode))
           {
               countryCodeParameter.IsNullable = true;
               countryCodeParameter.Value = DBNull.Value;
           }
           else
           {
               countryCodeParameter.Value = countryCode;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVendorPICDetails @VendorPICId, @VendorRegId, @PicUserID, @VDepartmentId, @PicCentralisedUserId, @PICName, @PICEmail, @PICMobileNumber, @IsActive, @CreatedBy, @ErrorCode OUT, @CountryCode", vendorPICIdParameter, vendorRegIdParameter, picUserIDParameter, vDepartmentIdParameter, picCentralisedUserIdParameter, pICNameParameter, pICEmailParameter, pICMobileNumberParameter, isActiveParameter, createdByParameter, errorCodeParameter, countryCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVendorRegistrationDetails(Nullable<Int64> vendorRegId, Nullable<Int32> departmentId, string companyName, string companyAddress, string companyPhoneNumber, string companyFaxNumber, string companyEMail, Nullable<Int64> pICUserId, Nullable<DateTime> vendorContractFrom, Nullable<DateTime> vendorContractTo, Nullable<Int32> suppliedNoOfPeople, string vendorAgreementFilePath, string isActive, string companyGstNo, Nullable<Int32> vendorServiceTypeId, Nullable<Int32> utilityTypeId, string otherUtilityName, string addressLine1, string addressLine2, string addressLine3, string city, string addressState, string postalCode, Nullable<Int32> companyAccountNo, string updatedBy, ObjectParameter errorCode, Nullable<Int32> setUpId)
        {

            var vendorRegIdParameter = vendorRegId.HasValue ?
                new SqlParameter("VendorRegId", vendorRegId) :
                new SqlParameter("VendorRegId", SqlDbType.BigInt);

            var departmentIdParameter = departmentId.HasValue ?
                new SqlParameter("DepartmentId", departmentId) :
                new SqlParameter("DepartmentId", SqlDbType.Int);

           var companyNameParameter = new SqlParameter("CompanyName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyName))
           {
               companyNameParameter.IsNullable = true;
               companyNameParameter.Value = DBNull.Value;
           }
           else
           {
               companyNameParameter.Value = companyName;
           }

           var companyAddressParameter = new SqlParameter("CompanyAddress", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyAddress))
           {
               companyAddressParameter.IsNullable = true;
               companyAddressParameter.Value = DBNull.Value;
           }
           else
           {
               companyAddressParameter.Value = companyAddress;
           }

           var companyPhoneNumberParameter = new SqlParameter("CompanyPhoneNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyPhoneNumber))
           {
               companyPhoneNumberParameter.IsNullable = true;
               companyPhoneNumberParameter.Value = DBNull.Value;
           }
           else
           {
               companyPhoneNumberParameter.Value = companyPhoneNumber;
           }

           var companyFaxNumberParameter = new SqlParameter("CompanyFaxNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyFaxNumber))
           {
               companyFaxNumberParameter.IsNullable = true;
               companyFaxNumberParameter.Value = DBNull.Value;
           }
           else
           {
               companyFaxNumberParameter.Value = companyFaxNumber;
           }

           var companyEMailParameter = new SqlParameter("CompanyEMail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyEMail))
           {
               companyEMailParameter.IsNullable = true;
               companyEMailParameter.Value = DBNull.Value;
           }
           else
           {
               companyEMailParameter.Value = companyEMail;
           }

            var pICUserIdParameter = pICUserId.HasValue ?
                new SqlParameter("PICUserId", pICUserId) :
                new SqlParameter("PICUserId", SqlDbType.BigInt);

            var vendorContractFromParameter = vendorContractFrom.HasValue ?
                new SqlParameter("VendorContractFrom", vendorContractFrom) :
                new SqlParameter("VendorContractFrom", SqlDbType.DateTime);

            var vendorContractToParameter = vendorContractTo.HasValue ?
                new SqlParameter("VendorContractTo", vendorContractTo) :
                new SqlParameter("VendorContractTo", SqlDbType.DateTime);

            var suppliedNoOfPeopleParameter = suppliedNoOfPeople.HasValue ?
                new SqlParameter("SuppliedNoOfPeople", suppliedNoOfPeople) :
                new SqlParameter("SuppliedNoOfPeople", SqlDbType.Int);

           var vendorAgreementFilePathParameter = new SqlParameter("VendorAgreementFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(vendorAgreementFilePath))
           {
               vendorAgreementFilePathParameter.IsNullable = true;
               vendorAgreementFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               vendorAgreementFilePathParameter.Value = vendorAgreementFilePath;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var companyGstNoParameter = new SqlParameter("CompanyGstNo", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyGstNo))
           {
               companyGstNoParameter.IsNullable = true;
               companyGstNoParameter.Value = DBNull.Value;
           }
           else
           {
               companyGstNoParameter.Value = companyGstNo;
           }

            var vendorServiceTypeIdParameter = vendorServiceTypeId.HasValue ?
                new SqlParameter("VendorServiceTypeId", vendorServiceTypeId) :
                new SqlParameter("VendorServiceTypeId", SqlDbType.Int);

            var utilityTypeIdParameter = utilityTypeId.HasValue ?
                new SqlParameter("UtilityTypeId", utilityTypeId) :
                new SqlParameter("UtilityTypeId", SqlDbType.Int);

           var otherUtilityNameParameter = new SqlParameter("OtherUtilityName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(otherUtilityName))
           {
               otherUtilityNameParameter.IsNullable = true;
               otherUtilityNameParameter.Value = DBNull.Value;
           }
           else
           {
               otherUtilityNameParameter.Value = otherUtilityName;
           }

           var addressLine1Parameter = new SqlParameter("AddressLine1", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressLine1))
           {
               addressLine1Parameter.IsNullable = true;
               addressLine1Parameter.Value = DBNull.Value;
           }
           else
           {
               addressLine1Parameter.Value = addressLine1;
           }

           var addressLine2Parameter = new SqlParameter("AddressLine2", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressLine2))
           {
               addressLine2Parameter.IsNullable = true;
               addressLine2Parameter.Value = DBNull.Value;
           }
           else
           {
               addressLine2Parameter.Value = addressLine2;
           }

           var addressLine3Parameter = new SqlParameter("AddressLine3", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressLine3))
           {
               addressLine3Parameter.IsNullable = true;
               addressLine3Parameter.Value = DBNull.Value;
           }
           else
           {
               addressLine3Parameter.Value = addressLine3;
           }

           var cityParameter = new SqlParameter("City", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(city))
           {
               cityParameter.IsNullable = true;
               cityParameter.Value = DBNull.Value;
           }
           else
           {
               cityParameter.Value = city;
           }

           var addressStateParameter = new SqlParameter("AddressState", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(addressState))
           {
               addressStateParameter.IsNullable = true;
               addressStateParameter.Value = DBNull.Value;
           }
           else
           {
               addressStateParameter.Value = addressState;
           }

           var postalCodeParameter = new SqlParameter("PostalCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(postalCode))
           {
               postalCodeParameter.IsNullable = true;
               postalCodeParameter.Value = DBNull.Value;
           }
           else
           {
               postalCodeParameter.Value = postalCode;
           }

            var companyAccountNoParameter = companyAccountNo.HasValue ?
                new SqlParameter("CompanyAccountNo", companyAccountNo) :
                new SqlParameter("CompanyAccountNo", SqlDbType.Int);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var setUpIdParameter = setUpId.HasValue ?
                new SqlParameter("SetUpId", setUpId) :
                new SqlParameter("SetUpId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVendorRegistrationDetails @VendorRegId, @DepartmentId, @CompanyName, @CompanyAddress, @CompanyPhoneNumber, @CompanyFaxNumber, @CompanyEMail, @PICUserId, @VendorContractFrom, @VendorContractTo, @SuppliedNoOfPeople, @VendorAgreementFilePath, @IsActive, @CompanyGstNo, @VendorServiceTypeId, @UtilityTypeId, @OtherUtilityName, @AddressLine1, @AddressLine2, @AddressLine3, @City, @AddressState, @PostalCode, @CompanyAccountNo, @UpdatedBy, @ErrorCode OUT, @SetUpId", vendorRegIdParameter, departmentIdParameter, companyNameParameter, companyAddressParameter, companyPhoneNumberParameter, companyFaxNumberParameter, companyEMailParameter, pICUserIdParameter, vendorContractFromParameter, vendorContractToParameter, suppliedNoOfPeopleParameter, vendorAgreementFilePathParameter, isActiveParameter, companyGstNoParameter, vendorServiceTypeIdParameter, utilityTypeIdParameter, otherUtilityNameParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, cityParameter, addressStateParameter, postalCodeParameter, companyAccountNoParameter, updatedByParameter, errorCodeParameter, setUpIdParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVisitorParkingSlatsDetails(Nullable<Int32> slatId, Nullable<Int32> totalSlats, string updatedBy, ObjectParameter errorCode)
        {

            var slatIdParameter = slatId.HasValue ?
                new SqlParameter("SlatId", slatId) :
                new SqlParameter("SlatId", SqlDbType.Int);

            var totalSlatsParameter = totalSlats.HasValue ?
                new SqlParameter("TotalSlats", totalSlats) :
                new SqlParameter("TotalSlats", SqlDbType.Int);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVisitorParkingSlatsDetails @SlatId, @TotalSlats, @UpdatedBy, @ErrorCode OUT", slatIdParameter, totalSlatsParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVisitorRequest(Nullable<Int32> visitorRequestId, Nullable<Int64> livingMemberId, Nullable<Int32> unitId, string visitorName, string visitingPurpose, string visitorMobileNo, string visitorVehicleNo, Nullable<DateTime> visitingDateTime, string updatedBy, ObjectParameter errorCode, ObjectParameter vRequestID, ObjectParameter livingMemberCentralUserId, Nullable<DateTime> todayClientDate, Nullable<DateTime> expectedLeavingDate, string expectedLeavingTime)
        {

            var visitorRequestIdParameter = visitorRequestId.HasValue ?
                new SqlParameter("VisitorRequestId", visitorRequestId) :
                new SqlParameter("VisitorRequestId", SqlDbType.Int);

            var livingMemberIdParameter = livingMemberId.HasValue ?
                new SqlParameter("LivingMemberId", livingMemberId) :
                new SqlParameter("LivingMemberId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

           var visitorNameParameter = new SqlParameter("VisitorName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorName))
           {
               visitorNameParameter.IsNullable = true;
               visitorNameParameter.Value = DBNull.Value;
           }
           else
           {
               visitorNameParameter.Value = visitorName;
           }

           var visitingPurposeParameter = new SqlParameter("VisitingPurpose", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitingPurpose))
           {
               visitingPurposeParameter.IsNullable = true;
               visitingPurposeParameter.Value = DBNull.Value;
           }
           else
           {
               visitingPurposeParameter.Value = visitingPurpose;
           }

           var visitorMobileNoParameter = new SqlParameter("VisitorMobileNo", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorMobileNo))
           {
               visitorMobileNoParameter.IsNullable = true;
               visitorMobileNoParameter.Value = DBNull.Value;
           }
           else
           {
               visitorMobileNoParameter.Value = visitorMobileNo;
           }

           var visitorVehicleNoParameter = new SqlParameter("VisitorVehicleNo", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorVehicleNo))
           {
               visitorVehicleNoParameter.IsNullable = true;
               visitorVehicleNoParameter.Value = DBNull.Value;
           }
           else
           {
               visitorVehicleNoParameter.Value = visitorVehicleNo;
           }

            var visitingDateTimeParameter = visitingDateTime.HasValue ?
                new SqlParameter("VisitingDateTime", visitingDateTime) :
                new SqlParameter("VisitingDateTime", SqlDbType.DateTime);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var vRequestIDParameter = new SqlParameter("VRequestID", SqlDbType.Int);
               vRequestIDParameter.Direction = System.Data.ParameterDirection.Output;
               vRequestIDParameter.Value = vRequestID != null ? vRequestID.Value : null;

           var livingMemberCentralUserIdParameter = new SqlParameter("LivingMemberCentralUserId", SqlDbType.BigInt);
               livingMemberCentralUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               livingMemberCentralUserIdParameter.Value = livingMemberCentralUserId != null ? livingMemberCentralUserId.Value : null;

            var todayClientDateParameter = todayClientDate.HasValue ?
                new SqlParameter("TodayClientDate", todayClientDate) :
                new SqlParameter("TodayClientDate", SqlDbType.DateTime);

            var expectedLeavingDateParameter = expectedLeavingDate.HasValue ?
                new SqlParameter("ExpectedLeavingDate", expectedLeavingDate) :
                new SqlParameter("ExpectedLeavingDate", SqlDbType.DateTime);

           var expectedLeavingTimeParameter = new SqlParameter("ExpectedLeavingTime", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(expectedLeavingTime))
           {
               expectedLeavingTimeParameter.IsNullable = true;
               expectedLeavingTimeParameter.Value = DBNull.Value;
           }
           else
           {
               expectedLeavingTimeParameter.Value = expectedLeavingTime;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVisitorRequest @VisitorRequestId, @LivingMemberId, @UnitId, @VisitorName, @VisitingPurpose, @VisitorMobileNo, @VisitorVehicleNo, @VisitingDateTime, @UpdatedBy, @ErrorCode OUT, @VRequestID OUT, @LivingMemberCentralUserId OUT, @TodayClientDate, @ExpectedLeavingDate, @ExpectedLeavingTime", visitorRequestIdParameter, livingMemberIdParameter, unitIdParameter, visitorNameParameter, visitingPurposeParameter, visitorMobileNoParameter, visitorVehicleNoParameter, visitingDateTimeParameter, updatedByParameter, errorCodeParameter, vRequestIDParameter, livingMemberCentralUserIdParameter, todayClientDateParameter, expectedLeavingDateParameter, expectedLeavingTimeParameter);

            errorCode.Value = errorCodeParameter.Value;
            vRequestID.Value = vRequestIDParameter.Value;
            livingMemberCentralUserId.Value = livingMemberCentralUserIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVisitorRequestActionDetails(Nullable<Int32> visitorRequestId, Nullable<Int32> statusId, Nullable<Int32> previouseStatusid, string actionDetails, string actionComment, string actionTakenBy, Nullable<Int64> actionByUserId, ObjectParameter errorCode, ObjectParameter livingMemberCentraluserid, ObjectParameter actionTakenCentraluserid, Nullable<DateTime> todayClientDate)
        {

            var visitorRequestIdParameter = visitorRequestId.HasValue ?
                new SqlParameter("VisitorRequestId", visitorRequestId) :
                new SqlParameter("VisitorRequestId", SqlDbType.Int);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

            var previouseStatusidParameter = previouseStatusid.HasValue ?
                new SqlParameter("PreviouseStatusid", previouseStatusid) :
                new SqlParameter("PreviouseStatusid", SqlDbType.Int);

            var actionDetailsParameter = actionDetails != null ?
                new SqlParameter("ActionDetails", actionDetails) :
                new SqlParameter("ActionDetails", SqlDbType.Xml);

           var actionCommentParameter = new SqlParameter("ActionComment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(actionComment))
           {
               actionCommentParameter.IsNullable = true;
               actionCommentParameter.Value = DBNull.Value;
           }
           else
           {
               actionCommentParameter.Value = actionComment;
           }

           var actionTakenByParameter = new SqlParameter("ActionTakenBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(actionTakenBy))
           {
               actionTakenByParameter.IsNullable = true;
               actionTakenByParameter.Value = DBNull.Value;
           }
           else
           {
               actionTakenByParameter.Value = actionTakenBy;
           }

            var actionByUserIdParameter = actionByUserId.HasValue ?
                new SqlParameter("ActionByUserId", actionByUserId) :
                new SqlParameter("ActionByUserId", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var livingMemberCentraluseridParameter = new SqlParameter("LivingMemberCentraluserid", SqlDbType.BigInt);
               livingMemberCentraluseridParameter.Direction = System.Data.ParameterDirection.Output;
               livingMemberCentraluseridParameter.Value = livingMemberCentraluserid != null ? livingMemberCentraluserid.Value : null;

           var actionTakenCentraluseridParameter = new SqlParameter("ActionTakenCentraluserid", SqlDbType.BigInt);
               actionTakenCentraluseridParameter.Direction = System.Data.ParameterDirection.Output;
               actionTakenCentraluseridParameter.Value = actionTakenCentraluserid != null ? actionTakenCentraluserid.Value : null;

            var todayClientDateParameter = todayClientDate.HasValue ?
                new SqlParameter("TodayClientDate", todayClientDate) :
                new SqlParameter("TodayClientDate", SqlDbType.DateTime);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVisitorRequestActionDetails @VisitorRequestId, @StatusId, @PreviouseStatusid, @ActionDetails, @ActionComment, @ActionTakenBy, @ActionByUserId, @ErrorCode OUT, @LivingMemberCentraluserid OUT, @ActionTakenCentraluserid OUT, @TodayClientDate", visitorRequestIdParameter, statusIdParameter, previouseStatusidParameter, actionDetailsParameter, actionCommentParameter, actionTakenByParameter, actionByUserIdParameter, errorCodeParameter, livingMemberCentraluseridParameter, actionTakenCentraluseridParameter, todayClientDateParameter);

            errorCode.Value = errorCodeParameter.Value;
            livingMemberCentraluserid.Value = livingMemberCentraluseridParameter.Value;
            actionTakenCentraluserid.Value = actionTakenCentraluseridParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVisitorRequestDetails(Nullable<Int32> visitorRequestId, Nullable<Int64> livingMemberId, Nullable<Int32> unitId, string visitorName, string visitingPurpose, string visitorMobileNo, string visitorVehicleNo, Nullable<DateTime> visitingDateTime, string updatedBy, ObjectParameter errorCode)
        {

            var visitorRequestIdParameter = visitorRequestId.HasValue ?
                new SqlParameter("VisitorRequestId", visitorRequestId) :
                new SqlParameter("VisitorRequestId", SqlDbType.Int);

            var livingMemberIdParameter = livingMemberId.HasValue ?
                new SqlParameter("LivingMemberId", livingMemberId) :
                new SqlParameter("LivingMemberId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

           var visitorNameParameter = new SqlParameter("VisitorName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorName))
           {
               visitorNameParameter.IsNullable = true;
               visitorNameParameter.Value = DBNull.Value;
           }
           else
           {
               visitorNameParameter.Value = visitorName;
           }

           var visitingPurposeParameter = new SqlParameter("VisitingPurpose", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitingPurpose))
           {
               visitingPurposeParameter.IsNullable = true;
               visitingPurposeParameter.Value = DBNull.Value;
           }
           else
           {
               visitingPurposeParameter.Value = visitingPurpose;
           }

           var visitorMobileNoParameter = new SqlParameter("VisitorMobileNo", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorMobileNo))
           {
               visitorMobileNoParameter.IsNullable = true;
               visitorMobileNoParameter.Value = DBNull.Value;
           }
           else
           {
               visitorMobileNoParameter.Value = visitorMobileNo;
           }

           var visitorVehicleNoParameter = new SqlParameter("VisitorVehicleNo", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorVehicleNo))
           {
               visitorVehicleNoParameter.IsNullable = true;
               visitorVehicleNoParameter.Value = DBNull.Value;
           }
           else
           {
               visitorVehicleNoParameter.Value = visitorVehicleNo;
           }

            var visitingDateTimeParameter = visitingDateTime.HasValue ?
                new SqlParameter("VisitingDateTime", visitingDateTime) :
                new SqlParameter("VisitingDateTime", SqlDbType.DateTime);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVisitorRequestDetails @VisitorRequestId, @LivingMemberId, @UnitId, @VisitorName, @VisitingPurpose, @VisitorMobileNo, @VisitorVehicleNo, @VisitingDateTime, @UpdatedBy, @ErrorCode OUT", visitorRequestIdParameter, livingMemberIdParameter, unitIdParameter, visitorNameParameter, visitingPurposeParameter, visitorMobileNoParameter, visitorVehicleNoParameter, visitingDateTimeParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVisitorRequestQrCodeFilePath(Nullable<Int32> visitorRequestId, string visitorQrCodeFilePath, ObjectParameter errorCode)
        {

            var visitorRequestIdParameter = visitorRequestId.HasValue ?
                new SqlParameter("VisitorRequestId", visitorRequestId) :
                new SqlParameter("VisitorRequestId", SqlDbType.Int);

           var visitorQrCodeFilePathParameter = new SqlParameter("VisitorQrCodeFilePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorQrCodeFilePath))
           {
               visitorQrCodeFilePathParameter.IsNullable = true;
               visitorQrCodeFilePathParameter.Value = DBNull.Value;
           }
           else
           {
               visitorQrCodeFilePathParameter.Value = visitorQrCodeFilePath;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVisitorRequestQrCodeFilePath @VisitorRequestId, @VisitorQrCodeFilePath, @ErrorCode OUT", visitorRequestIdParameter, visitorQrCodeFilePathParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVistorParkingEntry(Nullable<Int32> visitorRequestId, string visitorVehicleNumber, string visitorPhotPath, string visitorIdentityProofPath, string isSlatAvailable, string updatedBy, ObjectParameter errorCode, Nullable<Int32> previousStatusID, string visiotrInComment, string visitorInTime, string visitorCardNumber)
        {

            var visitorRequestIdParameter = visitorRequestId.HasValue ?
                new SqlParameter("VisitorRequestId", visitorRequestId) :
                new SqlParameter("VisitorRequestId", SqlDbType.Int);

           var visitorVehicleNumberParameter = new SqlParameter("VisitorVehicleNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorVehicleNumber))
           {
               visitorVehicleNumberParameter.IsNullable = true;
               visitorVehicleNumberParameter.Value = DBNull.Value;
           }
           else
           {
               visitorVehicleNumberParameter.Value = visitorVehicleNumber;
           }

           var visitorPhotPathParameter = new SqlParameter("VisitorPhotPath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorPhotPath))
           {
               visitorPhotPathParameter.IsNullable = true;
               visitorPhotPathParameter.Value = DBNull.Value;
           }
           else
           {
               visitorPhotPathParameter.Value = visitorPhotPath;
           }

           var visitorIdentityProofPathParameter = new SqlParameter("VisitorIdentityProofPath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorIdentityProofPath))
           {
               visitorIdentityProofPathParameter.IsNullable = true;
               visitorIdentityProofPathParameter.Value = DBNull.Value;
           }
           else
           {
               visitorIdentityProofPathParameter.Value = visitorIdentityProofPath;
           }

           var isSlatAvailableParameter = new SqlParameter("IsSlatAvailable", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isSlatAvailable))
           {
               isSlatAvailableParameter.IsNullable = true;
               isSlatAvailableParameter.Value = DBNull.Value;
           }
           else
           {
               isSlatAvailableParameter.Value = isSlatAvailable;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);

           var visiotrInCommentParameter = new SqlParameter("VisiotrInComment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visiotrInComment))
           {
               visiotrInCommentParameter.IsNullable = true;
               visiotrInCommentParameter.Value = DBNull.Value;
           }
           else
           {
               visiotrInCommentParameter.Value = visiotrInComment;
           }

           var visitorInTimeParameter = new SqlParameter("VisitorInTime", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorInTime))
           {
               visitorInTimeParameter.IsNullable = true;
               visitorInTimeParameter.Value = DBNull.Value;
           }
           else
           {
               visitorInTimeParameter.Value = visitorInTime;
           }

           var visitorCardNumberParameter = new SqlParameter("VisitorCardNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorCardNumber))
           {
               visitorCardNumberParameter.IsNullable = true;
               visitorCardNumberParameter.Value = DBNull.Value;
           }
           else
           {
               visitorCardNumberParameter.Value = visitorCardNumber;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVistorParkingEntry @VisitorRequestId, @VisitorVehicleNumber, @VisitorPhotPath, @VisitorIdentityProofPath, @IsSlatAvailable, @UpdatedBy, @ErrorCode OUT, @PreviousStatusID, @VisiotrInComment, @VisitorInTime, @VisitorCardNumber", visitorRequestIdParameter, visitorVehicleNumberParameter, visitorPhotPathParameter, visitorIdentityProofPathParameter, isSlatAvailableParameter, updatedByParameter, errorCodeParameter, previousStatusIDParameter, visiotrInCommentParameter, visitorInTimeParameter, visitorCardNumberParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVistorParkingOutTime(Nullable<Int32> visitorRequestId, string outComment, string updatedBy, ObjectParameter errorCode, Nullable<Int32> previousStatusID, string visitorOutTime)
        {

            var visitorRequestIdParameter = visitorRequestId.HasValue ?
                new SqlParameter("VisitorRequestId", visitorRequestId) :
                new SqlParameter("VisitorRequestId", SqlDbType.Int);

           var outCommentParameter = new SqlParameter("OutComment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(outComment))
           {
               outCommentParameter.IsNullable = true;
               outCommentParameter.Value = DBNull.Value;
           }
           else
           {
               outCommentParameter.Value = outComment;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);

           var visitorOutTimeParameter = new SqlParameter("VisitorOutTime", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorOutTime))
           {
               visitorOutTimeParameter.IsNullable = true;
               visitorOutTimeParameter.Value = DBNull.Value;
           }
           else
           {
               visitorOutTimeParameter.Value = visitorOutTime;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVistorParkingOutTime @VisitorRequestId, @OutComment, @UpdatedBy, @ErrorCode OUT, @PreviousStatusID, @VisitorOutTime", visitorRequestIdParameter, outCommentParameter, updatedByParameter, errorCodeParameter, previousStatusIDParameter, visitorOutTimeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVoucherPayment_LedgerDetails(Nullable<Int64> voucherPaymentId, string paidByUser, ObjectParameter errorCode)
        {

            var voucherPaymentIdParameter = voucherPaymentId.HasValue ?
                new SqlParameter("VoucherPaymentId", voucherPaymentId) :
                new SqlParameter("VoucherPaymentId", SqlDbType.BigInt);

           var paidByUserParameter = new SqlParameter("PaidByUser", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(paidByUser))
           {
               paidByUserParameter.IsNullable = true;
               paidByUserParameter.Value = DBNull.Value;
           }
           else
           {
               paidByUserParameter.Value = paidByUser;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVoucherPayment_LedgerDetails @VoucherPaymentId, @PaidByUser, @ErrorCode OUT", voucherPaymentIdParameter, paidByUserParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveVoucherPaymentDetails(string voucherNumber, Nullable<DateTime> voucherPaymentDate, Nullable<Decimal> voucherPaidAmount, string voucherIssueToCatagory, Nullable<Int64> voucherIssueToRequestId, string voucherIssueToOtherName, string paymentInfo, string voucherComments, Nullable<Int64> voucherPaidByUserId, string updatedBY, ObjectParameter errorCode, ObjectParameter voucherPaymentId)
        {

           var voucherNumberParameter = new SqlParameter("VoucherNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(voucherNumber))
           {
               voucherNumberParameter.IsNullable = true;
               voucherNumberParameter.Value = DBNull.Value;
           }
           else
           {
               voucherNumberParameter.Value = voucherNumber;
           }

            var voucherPaymentDateParameter = voucherPaymentDate.HasValue ?
                new SqlParameter("VoucherPaymentDate", voucherPaymentDate) :
                new SqlParameter("VoucherPaymentDate", SqlDbType.DateTime);

            var voucherPaidAmountParameter = voucherPaidAmount.HasValue ?
                new SqlParameter("VoucherPaidAmount", voucherPaidAmount) :
                new SqlParameter("VoucherPaidAmount", SqlDbType.Decimal);

           var voucherIssueToCatagoryParameter = new SqlParameter("VoucherIssueToCatagory", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(voucherIssueToCatagory))
           {
               voucherIssueToCatagoryParameter.IsNullable = true;
               voucherIssueToCatagoryParameter.Value = DBNull.Value;
           }
           else
           {
               voucherIssueToCatagoryParameter.Value = voucherIssueToCatagory;
           }

            var voucherIssueToRequestIdParameter = voucherIssueToRequestId.HasValue ?
                new SqlParameter("VoucherIssueToRequestId", voucherIssueToRequestId) :
                new SqlParameter("VoucherIssueToRequestId", SqlDbType.BigInt);

           var voucherIssueToOtherNameParameter = new SqlParameter("VoucherIssueToOtherName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(voucherIssueToOtherName))
           {
               voucherIssueToOtherNameParameter.IsNullable = true;
               voucherIssueToOtherNameParameter.Value = DBNull.Value;
           }
           else
           {
               voucherIssueToOtherNameParameter.Value = voucherIssueToOtherName;
           }

            var paymentInfoParameter = paymentInfo != null ?
                new SqlParameter("PaymentInfo", paymentInfo) :
                new SqlParameter("PaymentInfo", SqlDbType.Xml);

           var voucherCommentsParameter = new SqlParameter("VoucherComments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(voucherComments))
           {
               voucherCommentsParameter.IsNullable = true;
               voucherCommentsParameter.Value = DBNull.Value;
           }
           else
           {
               voucherCommentsParameter.Value = voucherComments;
           }

            var voucherPaidByUserIdParameter = voucherPaidByUserId.HasValue ?
                new SqlParameter("VoucherPaidByUserId", voucherPaidByUserId) :
                new SqlParameter("VoucherPaidByUserId", SqlDbType.BigInt);

           var updatedBYParameter = new SqlParameter("UpdatedBY", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBY))
           {
               updatedBYParameter.IsNullable = true;
               updatedBYParameter.Value = DBNull.Value;
           }
           else
           {
               updatedBYParameter.Value = updatedBY;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var voucherPaymentIdParameter = new SqlParameter("VoucherPaymentId", SqlDbType.BigInt);
               voucherPaymentIdParameter.Direction = System.Data.ParameterDirection.Output;
               voucherPaymentIdParameter.Value = voucherPaymentId != null ? voucherPaymentId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveVoucherPaymentDetails @VoucherNumber, @VoucherPaymentDate, @VoucherPaidAmount, @VoucherIssueToCatagory, @VoucherIssueToRequestId, @VoucherIssueToOtherName, @PaymentInfo, @VoucherComments, @VoucherPaidByUserId, @UpdatedBY, @ErrorCode OUT, @VoucherPaymentId OUT", voucherNumberParameter, voucherPaymentDateParameter, voucherPaidAmountParameter, voucherIssueToCatagoryParameter, voucherIssueToRequestIdParameter, voucherIssueToOtherNameParameter, paymentInfoParameter, voucherCommentsParameter, voucherPaidByUserIdParameter, updatedBYParameter, errorCodeParameter, voucherPaymentIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            voucherPaymentId.Value = voucherPaymentIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveWaterConsumeDetails(Nullable<Int64> meterReadingId, Nullable<Int32> unitId, Nullable<DateTime> periodFrom, Nullable<DateTime> periodTo, string readingTime, string monthOfReading, Nullable<Int64> previousReading, Nullable<Int64> currentReading, Nullable<Int64> consumedUnits, Nullable<Int32> statusId, Nullable<Int64> readingTakenByUserId, string updatedBy, string uploadDocument, ObjectParameter errorCode)
        {

            var meterReadingIdParameter = meterReadingId.HasValue ?
                new SqlParameter("MeterReadingId", meterReadingId) :
                new SqlParameter("MeterReadingId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var periodFromParameter = periodFrom.HasValue ?
                new SqlParameter("PeriodFrom", periodFrom) :
                new SqlParameter("PeriodFrom", SqlDbType.DateTime);

            var periodToParameter = periodTo.HasValue ?
                new SqlParameter("PeriodTo", periodTo) :
                new SqlParameter("PeriodTo", SqlDbType.DateTime);

           var readingTimeParameter = new SqlParameter("ReadingTime", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(readingTime))
           {
               readingTimeParameter.IsNullable = true;
               readingTimeParameter.Value = DBNull.Value;
           }
           else
           {
               readingTimeParameter.Value = readingTime;
           }

           var monthOfReadingParameter = new SqlParameter("MonthOfReading", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(monthOfReading))
           {
               monthOfReadingParameter.IsNullable = true;
               monthOfReadingParameter.Value = DBNull.Value;
           }
           else
           {
               monthOfReadingParameter.Value = monthOfReading;
           }

            var previousReadingParameter = previousReading.HasValue ?
                new SqlParameter("PreviousReading", previousReading) :
                new SqlParameter("PreviousReading", SqlDbType.BigInt);

            var currentReadingParameter = currentReading.HasValue ?
                new SqlParameter("CurrentReading", currentReading) :
                new SqlParameter("CurrentReading", SqlDbType.BigInt);

            var consumedUnitsParameter = consumedUnits.HasValue ?
                new SqlParameter("ConsumedUnits", consumedUnits) :
                new SqlParameter("ConsumedUnits", SqlDbType.BigInt);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

            var readingTakenByUserIdParameter = readingTakenByUserId.HasValue ?
                new SqlParameter("ReadingTakenByUserId", readingTakenByUserId) :
                new SqlParameter("ReadingTakenByUserId", SqlDbType.BigInt);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var uploadDocumentParameter = new SqlParameter("UploadDocument", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(uploadDocument))
           {
               uploadDocumentParameter.IsNullable = true;
               uploadDocumentParameter.Value = DBNull.Value;
           }
           else
           {
               uploadDocumentParameter.Value = uploadDocument;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveWaterConsumeDetails @MeterReadingId, @UnitId, @PeriodFrom, @PeriodTo, @ReadingTime, @MonthOfReading, @PreviousReading, @CurrentReading, @ConsumedUnits, @StatusId, @ReadingTakenByUserId, @UpdatedBy, @UploadDocument, @ErrorCode OUT", meterReadingIdParameter, unitIdParameter, periodFromParameter, periodToParameter, readingTimeParameter, monthOfReadingParameter, previousReadingParameter, currentReadingParameter, consumedUnitsParameter, statusIdParameter, readingTakenByUserIdParameter, updatedByParameter, uploadDocumentParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveWorkOrdersDetails(Nullable<Int32> workOrderID, Nullable<Int64> rFQApprovedQuotesId, Nullable<Int32> rFQID, Nullable<Int32> workOrderCategory, string wPONumber, string workOrderReference, string workOrderSubject, string orderDescription, Nullable<Decimal> workOrderAmount, Nullable<Int32> statusID, Nullable<DateTime> workOrderEntryDate, Nullable<DateTime> workOrderReleaseDate, string createdBy, ObjectParameter errorCode)
        {

            var workOrderIDParameter = workOrderID.HasValue ?
                new SqlParameter("WorkOrderID", workOrderID) :
                new SqlParameter("WorkOrderID", SqlDbType.Int);

            var rFQApprovedQuotesIdParameter = rFQApprovedQuotesId.HasValue ?
                new SqlParameter("RFQApprovedQuotesId", rFQApprovedQuotesId) :
                new SqlParameter("RFQApprovedQuotesId", SqlDbType.BigInt);

            var rFQIDParameter = rFQID.HasValue ?
                new SqlParameter("RFQID", rFQID) :
                new SqlParameter("RFQID", SqlDbType.Int);

            var workOrderCategoryParameter = workOrderCategory.HasValue ?
                new SqlParameter("WorkOrderCategory", workOrderCategory) :
                new SqlParameter("WorkOrderCategory", SqlDbType.Int);

           var wPONumberParameter = new SqlParameter("WPONumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(wPONumber))
           {
               wPONumberParameter.IsNullable = true;
               wPONumberParameter.Value = DBNull.Value;
           }
           else
           {
               wPONumberParameter.Value = wPONumber;
           }

           var workOrderReferenceParameter = new SqlParameter("WorkOrderReference", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(workOrderReference))
           {
               workOrderReferenceParameter.IsNullable = true;
               workOrderReferenceParameter.Value = DBNull.Value;
           }
           else
           {
               workOrderReferenceParameter.Value = workOrderReference;
           }

           var workOrderSubjectParameter = new SqlParameter("WorkOrderSubject", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(workOrderSubject))
           {
               workOrderSubjectParameter.IsNullable = true;
               workOrderSubjectParameter.Value = DBNull.Value;
           }
           else
           {
               workOrderSubjectParameter.Value = workOrderSubject;
           }

           var orderDescriptionParameter = new SqlParameter("OrderDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(orderDescription))
           {
               orderDescriptionParameter.IsNullable = true;
               orderDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               orderDescriptionParameter.Value = orderDescription;
           }

            var workOrderAmountParameter = workOrderAmount.HasValue ?
                new SqlParameter("WorkOrderAmount", workOrderAmount) :
                new SqlParameter("WorkOrderAmount", SqlDbType.Decimal);

            var statusIDParameter = statusID.HasValue ?
                new SqlParameter("StatusID", statusID) :
                new SqlParameter("StatusID", SqlDbType.Int);

            var workOrderEntryDateParameter = workOrderEntryDate.HasValue ?
                new SqlParameter("WorkOrderEntryDate", workOrderEntryDate) :
                new SqlParameter("WorkOrderEntryDate", SqlDbType.DateTime);

            var workOrderReleaseDateParameter = workOrderReleaseDate.HasValue ?
                new SqlParameter("WorkOrderReleaseDate", workOrderReleaseDate) :
                new SqlParameter("WorkOrderReleaseDate", SqlDbType.DateTime);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveWorkOrdersDetails @WorkOrderID, @RFQApprovedQuotesId, @RFQID, @WorkOrderCategory, @WPONumber, @WorkOrderReference, @WorkOrderSubject, @OrderDescription, @WorkOrderAmount, @StatusID, @WorkOrderEntryDate, @WorkOrderReleaseDate, @CreatedBy, @ErrorCode OUT", workOrderIDParameter, rFQApprovedQuotesIdParameter, rFQIDParameter, workOrderCategoryParameter, wPONumberParameter, workOrderReferenceParameter, workOrderSubjectParameter, orderDescriptionParameter, workOrderAmountParameter, statusIDParameter, workOrderEntryDateParameter, workOrderReleaseDateParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveWorkOrdersItemDetails(Nullable<Int64> workOrderItemID, Nullable<Int32> workOrderID, string lineDescription, Nullable<Decimal> lineAmount, string createdBy, ObjectParameter errorCode)
        {

            var workOrderItemIDParameter = workOrderItemID.HasValue ?
                new SqlParameter("WorkOrderItemID", workOrderItemID) :
                new SqlParameter("WorkOrderItemID", SqlDbType.BigInt);

            var workOrderIDParameter = workOrderID.HasValue ?
                new SqlParameter("WorkOrderID", workOrderID) :
                new SqlParameter("WorkOrderID", SqlDbType.Int);

           var lineDescriptionParameter = new SqlParameter("LineDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(lineDescription))
           {
               lineDescriptionParameter.IsNullable = true;
               lineDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               lineDescriptionParameter.Value = lineDescription;
           }

            var lineAmountParameter = lineAmount.HasValue ?
                new SqlParameter("LineAmount", lineAmount) :
                new SqlParameter("LineAmount", SqlDbType.Decimal);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveWorkOrdersItemDetails @WorkOrderItemID, @WorkOrderID, @LineDescription, @LineAmount, @CreatedBy, @ErrorCode OUT", workOrderItemIDParameter, workOrderIDParameter, lineDescriptionParameter, lineAmountParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SecuritySavingVisitorRequest(Nullable<Int32> visitorRequestId, Nullable<Int64> livingMemberId, Nullable<Int32> unitId, string visitorName, string visitingPurpose, string visitorMobileNo, string visitorVehicleNo, Nullable<DateTime> visitingDateTime, string visitorPhotPath, string visitorIdentityProofPath, string isSlatAvailable, string updatedBy, ObjectParameter errorCode, ObjectParameter currentVRequestID, ObjectParameter livingMemberCentralUserId, string visitorInComment, string visitorCardNumber, Nullable<Int64> actionTakenByUserid, Nullable<DateTime> todayClientDate, Nullable<DateTime> expectedLeavingDate, string expectedLeavingTime)
        {

            var visitorRequestIdParameter = visitorRequestId.HasValue ?
                new SqlParameter("VisitorRequestId", visitorRequestId) :
                new SqlParameter("VisitorRequestId", SqlDbType.Int);

            var livingMemberIdParameter = livingMemberId.HasValue ?
                new SqlParameter("LivingMemberId", livingMemberId) :
                new SqlParameter("LivingMemberId", SqlDbType.BigInt);

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

           var visitorNameParameter = new SqlParameter("VisitorName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorName))
           {
               visitorNameParameter.IsNullable = true;
               visitorNameParameter.Value = DBNull.Value;
           }
           else
           {
               visitorNameParameter.Value = visitorName;
           }

           var visitingPurposeParameter = new SqlParameter("VisitingPurpose", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitingPurpose))
           {
               visitingPurposeParameter.IsNullable = true;
               visitingPurposeParameter.Value = DBNull.Value;
           }
           else
           {
               visitingPurposeParameter.Value = visitingPurpose;
           }

           var visitorMobileNoParameter = new SqlParameter("VisitorMobileNo", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorMobileNo))
           {
               visitorMobileNoParameter.IsNullable = true;
               visitorMobileNoParameter.Value = DBNull.Value;
           }
           else
           {
               visitorMobileNoParameter.Value = visitorMobileNo;
           }

           var visitorVehicleNoParameter = new SqlParameter("VisitorVehicleNo", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorVehicleNo))
           {
               visitorVehicleNoParameter.IsNullable = true;
               visitorVehicleNoParameter.Value = DBNull.Value;
           }
           else
           {
               visitorVehicleNoParameter.Value = visitorVehicleNo;
           }

            var visitingDateTimeParameter = visitingDateTime.HasValue ?
                new SqlParameter("VisitingDateTime", visitingDateTime) :
                new SqlParameter("VisitingDateTime", SqlDbType.DateTime);

           var visitorPhotPathParameter = new SqlParameter("VisitorPhotPath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorPhotPath))
           {
               visitorPhotPathParameter.IsNullable = true;
               visitorPhotPathParameter.Value = DBNull.Value;
           }
           else
           {
               visitorPhotPathParameter.Value = visitorPhotPath;
           }

           var visitorIdentityProofPathParameter = new SqlParameter("VisitorIdentityProofPath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorIdentityProofPath))
           {
               visitorIdentityProofPathParameter.IsNullable = true;
               visitorIdentityProofPathParameter.Value = DBNull.Value;
           }
           else
           {
               visitorIdentityProofPathParameter.Value = visitorIdentityProofPath;
           }

           var isSlatAvailableParameter = new SqlParameter("IsSlatAvailable", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isSlatAvailable))
           {
               isSlatAvailableParameter.IsNullable = true;
               isSlatAvailableParameter.Value = DBNull.Value;
           }
           else
           {
               isSlatAvailableParameter.Value = isSlatAvailable;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var currentVRequestIDParameter = new SqlParameter("CurrentVRequestID", SqlDbType.Int);
               currentVRequestIDParameter.Direction = System.Data.ParameterDirection.Output;
               currentVRequestIDParameter.Value = currentVRequestID != null ? currentVRequestID.Value : null;

           var livingMemberCentralUserIdParameter = new SqlParameter("LivingMemberCentralUserId", SqlDbType.BigInt);
               livingMemberCentralUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               livingMemberCentralUserIdParameter.Value = livingMemberCentralUserId != null ? livingMemberCentralUserId.Value : null;

           var visitorInCommentParameter = new SqlParameter("VisitorInComment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorInComment))
           {
               visitorInCommentParameter.IsNullable = true;
               visitorInCommentParameter.Value = DBNull.Value;
           }
           else
           {
               visitorInCommentParameter.Value = visitorInComment;
           }

           var visitorCardNumberParameter = new SqlParameter("VisitorCardNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(visitorCardNumber))
           {
               visitorCardNumberParameter.IsNullable = true;
               visitorCardNumberParameter.Value = DBNull.Value;
           }
           else
           {
               visitorCardNumberParameter.Value = visitorCardNumber;
           }

            var actionTakenByUseridParameter = actionTakenByUserid.HasValue ?
                new SqlParameter("ActionTakenByUserid", actionTakenByUserid) :
                new SqlParameter("ActionTakenByUserid", SqlDbType.BigInt);

            var todayClientDateParameter = todayClientDate.HasValue ?
                new SqlParameter("TodayClientDate", todayClientDate) :
                new SqlParameter("TodayClientDate", SqlDbType.DateTime);

            var expectedLeavingDateParameter = expectedLeavingDate.HasValue ?
                new SqlParameter("ExpectedLeavingDate", expectedLeavingDate) :
                new SqlParameter("ExpectedLeavingDate", SqlDbType.DateTime);

           var expectedLeavingTimeParameter = new SqlParameter("ExpectedLeavingTime", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(expectedLeavingTime))
           {
               expectedLeavingTimeParameter.IsNullable = true;
               expectedLeavingTimeParameter.Value = DBNull.Value;
           }
           else
           {
               expectedLeavingTimeParameter.Value = expectedLeavingTime;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SecuritySavingVisitorRequest @VisitorRequestId, @LivingMemberId, @UnitId, @VisitorName, @VisitingPurpose, @VisitorMobileNo, @VisitorVehicleNo, @VisitingDateTime, @VisitorPhotPath, @VisitorIdentityProofPath, @IsSlatAvailable, @UpdatedBy, @ErrorCode OUT, @CurrentVRequestID OUT, @LivingMemberCentralUserId OUT, @VisitorInComment, @VisitorCardNumber, @ActionTakenByUserid, @TodayClientDate, @ExpectedLeavingDate, @ExpectedLeavingTime", visitorRequestIdParameter, livingMemberIdParameter, unitIdParameter, visitorNameParameter, visitingPurposeParameter, visitorMobileNoParameter, visitorVehicleNoParameter, visitingDateTimeParameter, visitorPhotPathParameter, visitorIdentityProofPathParameter, isSlatAvailableParameter, updatedByParameter, errorCodeParameter, currentVRequestIDParameter, livingMemberCentralUserIdParameter, visitorInCommentParameter, visitorCardNumberParameter, actionTakenByUseridParameter, todayClientDateParameter, expectedLeavingDateParameter, expectedLeavingTimeParameter);

            errorCode.Value = errorCodeParameter.Value;
            currentVRequestID.Value = currentVRequestIDParameter.Value;
            livingMemberCentralUserId.Value = livingMemberCentralUserIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_Setup_SaveAccessCardProcessDetails(string accessCardsDetails, string createdBy, ObjectParameter errorCode)
        {

            var accessCardsDetailsParameter = accessCardsDetails != null ?
                new SqlParameter("AccessCardsDetails", accessCardsDetails) :
                new SqlParameter("AccessCardsDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_Setup_SaveAccessCardProcessDetails @AccessCardsDetails, @CreatedBy, @ErrorCode OUT", accessCardsDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_Setup_SaveAccessCardsDetails(string accessCardDetails, string createdBy, ObjectParameter errorCode)
        {

            var accessCardDetailsParameter = accessCardDetails != null ?
                new SqlParameter("AccessCardDetails", accessCardDetails) :
                new SqlParameter("AccessCardDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_Setup_SaveAccessCardsDetails @AccessCardDetails, @CreatedBy, @ErrorCode OUT", accessCardDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_Setup_SaveHallBookingDetails(string hallBookingDetails, string createdBy, ObjectParameter errorCode)
        {

            var hallBookingDetailsParameter = hallBookingDetails != null ?
                new SqlParameter("HallBookingDetails", hallBookingDetails) :
                new SqlParameter("HallBookingDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_Setup_SaveHallBookingDetails @HallBookingDetails, @CreatedBy, @ErrorCode OUT", hallBookingDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_Setup_SaveHallBookingProcessDetails(string hallBookingDetails, string createdBy, ObjectParameter errorCode)
        {

            var hallBookingDetailsParameter = hallBookingDetails != null ?
                new SqlParameter("HallBookingDetails", hallBookingDetails) :
                new SqlParameter("HallBookingDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_Setup_SaveHallBookingProcessDetails @HallBookingDetails, @CreatedBy, @ErrorCode OUT", hallBookingDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_Setup_SaveMaintenanceBillDetails(string maintenanceBillDetails, string createdBy, ObjectParameter errorCode)
        {

            var maintenanceBillDetailsParameter = maintenanceBillDetails != null ?
                new SqlParameter("MaintenanceBillDetails", maintenanceBillDetails) :
                new SqlParameter("MaintenanceBillDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_Setup_SaveMaintenanceBillDetails @MaintenanceBillDetails, @CreatedBy, @ErrorCode OUT", maintenanceBillDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_Setup_SaveMaintenanceBillProcessDetails(string maintenanceBillDetails, string createdBy, ObjectParameter errorCode)
        {

            var maintenanceBillDetailsParameter = maintenanceBillDetails != null ?
                new SqlParameter("MaintenanceBillDetails", maintenanceBillDetails) :
                new SqlParameter("MaintenanceBillDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_Setup_SaveMaintenanceBillProcessDetails @MaintenanceBillDetails, @CreatedBy, @ErrorCode OUT", maintenanceBillDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_Setup_SaveRennovationReqDetails(string renovationRequestDetails, string createdBy, ObjectParameter errorCode)
        {

            var renovationRequestDetailsParameter = renovationRequestDetails != null ?
                new SqlParameter("RenovationRequestDetails", renovationRequestDetails) :
                new SqlParameter("RenovationRequestDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_Setup_SaveRennovationReqDetails @RenovationRequestDetails, @CreatedBy, @ErrorCode OUT", renovationRequestDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_Setup_SaveRenovationRequestProcessDetails(string renovationDetails, string createdBy, ObjectParameter errorCode)
        {

            var renovationDetailsParameter = renovationDetails != null ?
                new SqlParameter("RenovationDetails", renovationDetails) :
                new SqlParameter("RenovationDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_Setup_SaveRenovationRequestProcessDetails @RenovationDetails, @CreatedBy, @ErrorCode OUT", renovationDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_Setup_SaveWaterBillDetails(string waterBillDetails, string createdBy, ObjectParameter errorCode)
        {

            var waterBillDetailsParameter = waterBillDetails != null ?
                new SqlParameter("WaterBillDetails", waterBillDetails) :
                new SqlParameter("WaterBillDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_Setup_SaveWaterBillDetails @WaterBillDetails, @CreatedBy, @ErrorCode OUT", waterBillDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_Setup_SaveWaterBillProcessDetails(string waterBillDetails, string createdBy, ObjectParameter errorCode)
        {

            var waterBillDetailsParameter = waterBillDetails != null ?
                new SqlParameter("WaterBillDetails", waterBillDetails) :
                new SqlParameter("WaterBillDetails", SqlDbType.Xml);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_Setup_SaveWaterBillProcessDetails @WaterBillDetails, @CreatedBy, @ErrorCode OUT", waterBillDetailsParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_TransferDebitNoteBalanceToInvoice(Nullable<Int64> debitNoteId, Nullable<Int64> transferToVendorInvoiceId, Nullable<Decimal> transferAmount, string transferBy, Nullable<Int64> transferByUserId, string transferComments, ObjectParameter errorCode)
        {

            var debitNoteIdParameter = debitNoteId.HasValue ?
                new SqlParameter("DebitNoteId", debitNoteId) :
                new SqlParameter("DebitNoteId", SqlDbType.BigInt);

            var transferToVendorInvoiceIdParameter = transferToVendorInvoiceId.HasValue ?
                new SqlParameter("TransferToVendorInvoiceId", transferToVendorInvoiceId) :
                new SqlParameter("TransferToVendorInvoiceId", SqlDbType.BigInt);

            var transferAmountParameter = transferAmount.HasValue ?
                new SqlParameter("TransferAmount", transferAmount) :
                new SqlParameter("TransferAmount", SqlDbType.Decimal);

           var transferByParameter = new SqlParameter("TransferBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(transferBy))
           {
               transferByParameter.IsNullable = true;
               transferByParameter.Value = DBNull.Value;
           }
           else
           {
               transferByParameter.Value = transferBy;
           }

            var transferByUserIdParameter = transferByUserId.HasValue ?
                new SqlParameter("TransferByUserId", transferByUserId) :
                new SqlParameter("TransferByUserId", SqlDbType.BigInt);

           var transferCommentsParameter = new SqlParameter("TransferComments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(transferComments))
           {
               transferCommentsParameter.IsNullable = true;
               transferCommentsParameter.Value = DBNull.Value;
           }
           else
           {
               transferCommentsParameter.Value = transferComments;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_TransferDebitNoteBalanceToInvoice @DebitNoteId, @TransferToVendorInvoiceId, @TransferAmount, @TransferBy, @TransferByUserId, @TransferComments, @ErrorCode OUT", debitNoteIdParameter, transferToVendorInvoiceIdParameter, transferAmountParameter, transferByParameter, transferByUserIdParameter, transferCommentsParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_TransposeAssetsPurchasePaymentbyAPActionId(Nullable<Int64> transposedAssetsPurchaseActionId, Nullable<Int64> assetsPurchaseId, string transposedBy, Nullable<Int64> transposedByUserId, string comments, ObjectParameter errorCode)
        {

            var transposedAssetsPurchaseActionIdParameter = transposedAssetsPurchaseActionId.HasValue ?
                new SqlParameter("TransposedAssetsPurchaseActionId", transposedAssetsPurchaseActionId) :
                new SqlParameter("TransposedAssetsPurchaseActionId", SqlDbType.BigInt);

            var assetsPurchaseIdParameter = assetsPurchaseId.HasValue ?
                new SqlParameter("AssetsPurchaseId", assetsPurchaseId) :
                new SqlParameter("AssetsPurchaseId", SqlDbType.BigInt);

           var transposedByParameter = new SqlParameter("TransposedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(transposedBy))
           {
               transposedByParameter.IsNullable = true;
               transposedByParameter.Value = DBNull.Value;
           }
           else
           {
               transposedByParameter.Value = transposedBy;
           }

            var transposedByUserIdParameter = transposedByUserId.HasValue ?
                new SqlParameter("TransposedByUserId", transposedByUserId) :
                new SqlParameter("TransposedByUserId", SqlDbType.BigInt);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_TransposeAssetsPurchasePaymentbyAPActionId @TransposedAssetsPurchaseActionId, @AssetsPurchaseId, @TransposedBy, @TransposedByUserId, @Comments, @ErrorCode OUT", transposedAssetsPurchaseActionIdParameter, assetsPurchaseIdParameter, transposedByParameter, transposedByUserIdParameter, commentsParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_TransposeVendorInvoicePaymentbyVIActionId(Nullable<Int64> transposedVendorInvoiceActionId, Nullable<Int64> vendorInvoiceId, string transposedBy, Nullable<Int64> transposedByUserId, string comments, ObjectParameter errorCode)
        {

            var transposedVendorInvoiceActionIdParameter = transposedVendorInvoiceActionId.HasValue ?
                new SqlParameter("TransposedVendorInvoiceActionId", transposedVendorInvoiceActionId) :
                new SqlParameter("TransposedVendorInvoiceActionId", SqlDbType.BigInt);

            var vendorInvoiceIdParameter = vendorInvoiceId.HasValue ?
                new SqlParameter("VendorInvoiceId", vendorInvoiceId) :
                new SqlParameter("VendorInvoiceId", SqlDbType.BigInt);

           var transposedByParameter = new SqlParameter("TransposedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(transposedBy))
           {
               transposedByParameter.IsNullable = true;
               transposedByParameter.Value = DBNull.Value;
           }
           else
           {
               transposedByParameter.Value = transposedBy;
           }

            var transposedByUserIdParameter = transposedByUserId.HasValue ?
                new SqlParameter("TransposedByUserId", transposedByUserId) :
                new SqlParameter("TransposedByUserId", SqlDbType.BigInt);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_TransposeVendorInvoicePaymentbyVIActionId @TransposedVendorInvoiceActionId, @VendorInvoiceId, @TransposedBy, @TransposedByUserId, @Comments, @ErrorCode OUT", transposedVendorInvoiceActionIdParameter, vendorInvoiceIdParameter, transposedByParameter, transposedByUserIdParameter, commentsParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_TransposeVoucherPayment(Nullable<Int64> voucherPaymentId, string transposedBy, Nullable<Int64> transposedByUserId, string comments, ObjectParameter errorCode)
        {

            var voucherPaymentIdParameter = voucherPaymentId.HasValue ?
                new SqlParameter("VoucherPaymentId", voucherPaymentId) :
                new SqlParameter("VoucherPaymentId", SqlDbType.BigInt);

           var transposedByParameter = new SqlParameter("TransposedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(transposedBy))
           {
               transposedByParameter.IsNullable = true;
               transposedByParameter.Value = DBNull.Value;
           }
           else
           {
               transposedByParameter.Value = transposedBy;
           }

            var transposedByUserIdParameter = transposedByUserId.HasValue ?
                new SqlParameter("TransposedByUserId", transposedByUserId) :
                new SqlParameter("TransposedByUserId", SqlDbType.BigInt);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_TransposeVoucherPayment @VoucherPaymentId, @TransposedBy, @TransposedByUserId, @Comments, @ErrorCode OUT", voucherPaymentIdParameter, transposedByParameter, transposedByUserIdParameter, commentsParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_UnitCumilativeInvoice_PaymentByBalance(Nullable<Int32> unitId, string isFullPaid, Nullable<Decimal> paidAmount, string comments, string paymentMode, string bankName, string chequeNumber, string additionalReferencePath, string paymentReciptPath, Nullable<Int64> paidByUserId, string paidBy, Nullable<Int64> recievedByUserId, Nullable<DateTime> chequeDate, Nullable<DateTime> actualPaymentDate, string recievedBy, Nullable<Int32> managementAccountId, ObjectParameter errorCode)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

           var isFullPaidParameter = new SqlParameter("IsFullPaid", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isFullPaid))
           {
               isFullPaidParameter.IsNullable = true;
               isFullPaidParameter.Value = DBNull.Value;
           }
           else
           {
               isFullPaidParameter.Value = isFullPaid;
           }

            var paidAmountParameter = paidAmount.HasValue ?
                new SqlParameter("PaidAmount", paidAmount) :
                new SqlParameter("PaidAmount", SqlDbType.Decimal);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var paymentModeParameter = new SqlParameter("PaymentMode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(paymentMode))
           {
               paymentModeParameter.IsNullable = true;
               paymentModeParameter.Value = DBNull.Value;
           }
           else
           {
               paymentModeParameter.Value = paymentMode;
           }

           var bankNameParameter = new SqlParameter("BankName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(bankName))
           {
               bankNameParameter.IsNullable = true;
               bankNameParameter.Value = DBNull.Value;
           }
           else
           {
               bankNameParameter.Value = bankName;
           }

           var chequeNumberParameter = new SqlParameter("ChequeNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(chequeNumber))
           {
               chequeNumberParameter.IsNullable = true;
               chequeNumberParameter.Value = DBNull.Value;
           }
           else
           {
               chequeNumberParameter.Value = chequeNumber;
           }

           var additionalReferencePathParameter = new SqlParameter("AdditionalReferencePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferencePath))
           {
               additionalReferencePathParameter.IsNullable = true;
               additionalReferencePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferencePathParameter.Value = additionalReferencePath;
           }

           var paymentReciptPathParameter = new SqlParameter("PaymentReciptPath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(paymentReciptPath))
           {
               paymentReciptPathParameter.IsNullable = true;
               paymentReciptPathParameter.Value = DBNull.Value;
           }
           else
           {
               paymentReciptPathParameter.Value = paymentReciptPath;
           }

            var paidByUserIdParameter = paidByUserId.HasValue ?
                new SqlParameter("PaidByUserId", paidByUserId) :
                new SqlParameter("PaidByUserId", SqlDbType.BigInt);

           var paidByParameter = new SqlParameter("PaidBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(paidBy))
           {
               paidByParameter.IsNullable = true;
               paidByParameter.Value = DBNull.Value;
           }
           else
           {
               paidByParameter.Value = paidBy;
           }

            var recievedByUserIdParameter = recievedByUserId.HasValue ?
                new SqlParameter("RecievedByUserId", recievedByUserId) :
                new SqlParameter("RecievedByUserId", SqlDbType.BigInt);

            var chequeDateParameter = chequeDate.HasValue ?
                new SqlParameter("ChequeDate", chequeDate) :
                new SqlParameter("ChequeDate", SqlDbType.DateTime);

            var actualPaymentDateParameter = actualPaymentDate.HasValue ?
                new SqlParameter("ActualPaymentDate", actualPaymentDate) :
                new SqlParameter("ActualPaymentDate", SqlDbType.DateTime);

           var recievedByParameter = new SqlParameter("RecievedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(recievedBy))
           {
               recievedByParameter.IsNullable = true;
               recievedByParameter.Value = DBNull.Value;
           }
           else
           {
               recievedByParameter.Value = recievedBy;
           }

            var managementAccountIdParameter = managementAccountId.HasValue ?
                new SqlParameter("ManagementAccountId", managementAccountId) :
                new SqlParameter("ManagementAccountId", SqlDbType.Int);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_UnitCumilativeInvoice_PaymentByBalance @UnitId, @IsFullPaid, @PaidAmount, @Comments, @PaymentMode, @BankName, @ChequeNumber, @AdditionalReferencePath, @PaymentReciptPath, @PaidByUserId, @PaidBy, @RecievedByUserId, @ChequeDate, @ActualPaymentDate, @RecievedBy, @ManagementAccountId, @ErrorCode OUT", unitIdParameter, isFullPaidParameter, paidAmountParameter, commentsParameter, paymentModeParameter, bankNameParameter, chequeNumberParameter, additionalReferencePathParameter, paymentReciptPathParameter, paidByUserIdParameter, paidByParameter, recievedByUserIdParameter, chequeDateParameter, actualPaymentDateParameter, recievedByParameter, managementAccountIdParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_UnitCumilativeInvoice_PaymentByBill(Nullable<Int32> unitId, string billPaymentInfo, string isFullPaid, Nullable<Decimal> paidAmount, string comments, string paymentMode, string bankName, string chequeNumber, string additionalReferencePath, string paymentReciptPath, Nullable<Int64> paidByUserId, string paidBy, Nullable<Int64> recievedByUserId, Nullable<DateTime> chequeDate, Nullable<DateTime> actualPaymentDate, string recievedBy, Nullable<Int32> managementAccountId, ObjectParameter errorCode)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

            var billPaymentInfoParameter = billPaymentInfo != null ?
                new SqlParameter("BillPaymentInfo", billPaymentInfo) :
                new SqlParameter("BillPaymentInfo", SqlDbType.Xml);

           var isFullPaidParameter = new SqlParameter("IsFullPaid", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isFullPaid))
           {
               isFullPaidParameter.IsNullable = true;
               isFullPaidParameter.Value = DBNull.Value;
           }
           else
           {
               isFullPaidParameter.Value = isFullPaid;
           }

            var paidAmountParameter = paidAmount.HasValue ?
                new SqlParameter("PaidAmount", paidAmount) :
                new SqlParameter("PaidAmount", SqlDbType.Decimal);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var paymentModeParameter = new SqlParameter("PaymentMode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(paymentMode))
           {
               paymentModeParameter.IsNullable = true;
               paymentModeParameter.Value = DBNull.Value;
           }
           else
           {
               paymentModeParameter.Value = paymentMode;
           }

           var bankNameParameter = new SqlParameter("BankName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(bankName))
           {
               bankNameParameter.IsNullable = true;
               bankNameParameter.Value = DBNull.Value;
           }
           else
           {
               bankNameParameter.Value = bankName;
           }

           var chequeNumberParameter = new SqlParameter("ChequeNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(chequeNumber))
           {
               chequeNumberParameter.IsNullable = true;
               chequeNumberParameter.Value = DBNull.Value;
           }
           else
           {
               chequeNumberParameter.Value = chequeNumber;
           }

           var additionalReferencePathParameter = new SqlParameter("AdditionalReferencePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferencePath))
           {
               additionalReferencePathParameter.IsNullable = true;
               additionalReferencePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferencePathParameter.Value = additionalReferencePath;
           }

           var paymentReciptPathParameter = new SqlParameter("PaymentReciptPath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(paymentReciptPath))
           {
               paymentReciptPathParameter.IsNullable = true;
               paymentReciptPathParameter.Value = DBNull.Value;
           }
           else
           {
               paymentReciptPathParameter.Value = paymentReciptPath;
           }

            var paidByUserIdParameter = paidByUserId.HasValue ?
                new SqlParameter("PaidByUserId", paidByUserId) :
                new SqlParameter("PaidByUserId", SqlDbType.BigInt);

           var paidByParameter = new SqlParameter("PaidBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(paidBy))
           {
               paidByParameter.IsNullable = true;
               paidByParameter.Value = DBNull.Value;
           }
           else
           {
               paidByParameter.Value = paidBy;
           }

            var recievedByUserIdParameter = recievedByUserId.HasValue ?
                new SqlParameter("RecievedByUserId", recievedByUserId) :
                new SqlParameter("RecievedByUserId", SqlDbType.BigInt);

            var chequeDateParameter = chequeDate.HasValue ?
                new SqlParameter("ChequeDate", chequeDate) :
                new SqlParameter("ChequeDate", SqlDbType.DateTime);

            var actualPaymentDateParameter = actualPaymentDate.HasValue ?
                new SqlParameter("ActualPaymentDate", actualPaymentDate) :
                new SqlParameter("ActualPaymentDate", SqlDbType.DateTime);

           var recievedByParameter = new SqlParameter("RecievedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(recievedBy))
           {
               recievedByParameter.IsNullable = true;
               recievedByParameter.Value = DBNull.Value;
           }
           else
           {
               recievedByParameter.Value = recievedBy;
           }

            var managementAccountIdParameter = managementAccountId.HasValue ?
                new SqlParameter("ManagementAccountId", managementAccountId) :
                new SqlParameter("ManagementAccountId", SqlDbType.Int);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_UnitCumilativeInvoice_PaymentByBill @UnitId, @BillPaymentInfo, @IsFullPaid, @PaidAmount, @Comments, @PaymentMode, @BankName, @ChequeNumber, @AdditionalReferencePath, @PaymentReciptPath, @PaidByUserId, @PaidBy, @RecievedByUserId, @ChequeDate, @ActualPaymentDate, @RecievedBy, @ManagementAccountId, @ErrorCode OUT", unitIdParameter, billPaymentInfoParameter, isFullPaidParameter, paidAmountParameter, commentsParameter, paymentModeParameter, bankNameParameter, chequeNumberParameter, additionalReferencePathParameter, paymentReciptPathParameter, paidByUserIdParameter, paidByParameter, recievedByUserIdParameter, chequeDateParameter, actualPaymentDateParameter, recievedByParameter, managementAccountIdParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_UnitDueReminder_Result> SP_DGC_UnitDueReminder(Nullable<Decimal> dueRangeFrom, Nullable<Decimal> dueRangeTo)
        {

            var dueRangeFromParameter = dueRangeFrom.HasValue ?
                new SqlParameter("DueRangeFrom", dueRangeFrom) :
                new SqlParameter("DueRangeFrom", SqlDbType.Decimal);

            var dueRangeToParameter = dueRangeTo.HasValue ?
                new SqlParameter("DueRangeTo", dueRangeTo) :
                new SqlParameter("DueRangeTo", SqlDbType.Decimal);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_UnitDueReminder_Result>("SP_DGC_UnitDueReminder @DueRangeFrom, @DueRangeTo", dueRangeFromParameter, dueRangeToParameter);


            return retVal;

        }
        public virtual int SP_DGC_UnitInvoice_SavePaymentDetails(Nullable<Int64> unitInvoiceId, string isFullPaid, Nullable<Decimal> paidAmount, Nullable<Decimal> interestAmount, string comments, string paymentMode, string bankName, string chequeNumber, string additionalReferencePath, string paymentReciptPath, Nullable<Int64> paidByUserId, string paidBy, Nullable<Int64> recievedByUserId, Nullable<DateTime> chequeDate, Nullable<DateTime> actualPaymentDate, string recievedBy, Nullable<Int32> managementAccountId, ObjectParameter errorCode)
        {

            var unitInvoiceIdParameter = unitInvoiceId.HasValue ?
                new SqlParameter("UnitInvoiceId", unitInvoiceId) :
                new SqlParameter("UnitInvoiceId", SqlDbType.BigInt);

           var isFullPaidParameter = new SqlParameter("IsFullPaid", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isFullPaid))
           {
               isFullPaidParameter.IsNullable = true;
               isFullPaidParameter.Value = DBNull.Value;
           }
           else
           {
               isFullPaidParameter.Value = isFullPaid;
           }

            var paidAmountParameter = paidAmount.HasValue ?
                new SqlParameter("PaidAmount", paidAmount) :
                new SqlParameter("PaidAmount", SqlDbType.Decimal);

            var interestAmountParameter = interestAmount.HasValue ?
                new SqlParameter("InterestAmount", interestAmount) :
                new SqlParameter("InterestAmount", SqlDbType.Decimal);

           var commentsParameter = new SqlParameter("Comments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comments))
           {
               commentsParameter.IsNullable = true;
               commentsParameter.Value = DBNull.Value;
           }
           else
           {
               commentsParameter.Value = comments;
           }

           var paymentModeParameter = new SqlParameter("PaymentMode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(paymentMode))
           {
               paymentModeParameter.IsNullable = true;
               paymentModeParameter.Value = DBNull.Value;
           }
           else
           {
               paymentModeParameter.Value = paymentMode;
           }

           var bankNameParameter = new SqlParameter("BankName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(bankName))
           {
               bankNameParameter.IsNullable = true;
               bankNameParameter.Value = DBNull.Value;
           }
           else
           {
               bankNameParameter.Value = bankName;
           }

           var chequeNumberParameter = new SqlParameter("ChequeNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(chequeNumber))
           {
               chequeNumberParameter.IsNullable = true;
               chequeNumberParameter.Value = DBNull.Value;
           }
           else
           {
               chequeNumberParameter.Value = chequeNumber;
           }

           var additionalReferencePathParameter = new SqlParameter("AdditionalReferencePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferencePath))
           {
               additionalReferencePathParameter.IsNullable = true;
               additionalReferencePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferencePathParameter.Value = additionalReferencePath;
           }

           var paymentReciptPathParameter = new SqlParameter("PaymentReciptPath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(paymentReciptPath))
           {
               paymentReciptPathParameter.IsNullable = true;
               paymentReciptPathParameter.Value = DBNull.Value;
           }
           else
           {
               paymentReciptPathParameter.Value = paymentReciptPath;
           }

            var paidByUserIdParameter = paidByUserId.HasValue ?
                new SqlParameter("PaidByUserId", paidByUserId) :
                new SqlParameter("PaidByUserId", SqlDbType.BigInt);

           var paidByParameter = new SqlParameter("PaidBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(paidBy))
           {
               paidByParameter.IsNullable = true;
               paidByParameter.Value = DBNull.Value;
           }
           else
           {
               paidByParameter.Value = paidBy;
           }

            var recievedByUserIdParameter = recievedByUserId.HasValue ?
                new SqlParameter("RecievedByUserId", recievedByUserId) :
                new SqlParameter("RecievedByUserId", SqlDbType.BigInt);

            var chequeDateParameter = chequeDate.HasValue ?
                new SqlParameter("ChequeDate", chequeDate) :
                new SqlParameter("ChequeDate", SqlDbType.DateTime);

            var actualPaymentDateParameter = actualPaymentDate.HasValue ?
                new SqlParameter("ActualPaymentDate", actualPaymentDate) :
                new SqlParameter("ActualPaymentDate", SqlDbType.DateTime);

           var recievedByParameter = new SqlParameter("RecievedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(recievedBy))
           {
               recievedByParameter.IsNullable = true;
               recievedByParameter.Value = DBNull.Value;
           }
           else
           {
               recievedByParameter.Value = recievedBy;
           }

            var managementAccountIdParameter = managementAccountId.HasValue ?
                new SqlParameter("ManagementAccountId", managementAccountId) :
                new SqlParameter("ManagementAccountId", SqlDbType.Int);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_UnitInvoice_SavePaymentDetails @UnitInvoiceId, @IsFullPaid, @PaidAmount, @InterestAmount, @Comments, @PaymentMode, @BankName, @ChequeNumber, @AdditionalReferencePath, @PaymentReciptPath, @PaidByUserId, @PaidBy, @RecievedByUserId, @ChequeDate, @ActualPaymentDate, @RecievedBy, @ManagementAccountId, @ErrorCode OUT", unitInvoiceIdParameter, isFullPaidParameter, paidAmountParameter, interestAmountParameter, commentsParameter, paymentModeParameter, bankNameParameter, chequeNumberParameter, additionalReferencePathParameter, paymentReciptPathParameter, paidByUserIdParameter, paidByParameter, recievedByUserIdParameter, chequeDateParameter, actualPaymentDateParameter, recievedByParameter, managementAccountIdParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_UnitInvoice_SaveSettlementDetails(Nullable<Int64> unitInvoiceId, Nullable<Decimal> settlementAmount, string settlementComments, string additionalReferencePath, Nullable<Int64> settledByUserId, string settledBy, ObjectParameter errorCode)
        {

            var unitInvoiceIdParameter = unitInvoiceId.HasValue ?
                new SqlParameter("UnitInvoiceId", unitInvoiceId) :
                new SqlParameter("UnitInvoiceId", SqlDbType.BigInt);

            var settlementAmountParameter = settlementAmount.HasValue ?
                new SqlParameter("SettlementAmount", settlementAmount) :
                new SqlParameter("SettlementAmount", SqlDbType.Decimal);

           var settlementCommentsParameter = new SqlParameter("SettlementComments", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(settlementComments))
           {
               settlementCommentsParameter.IsNullable = true;
               settlementCommentsParameter.Value = DBNull.Value;
           }
           else
           {
               settlementCommentsParameter.Value = settlementComments;
           }

           var additionalReferencePathParameter = new SqlParameter("AdditionalReferencePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(additionalReferencePath))
           {
               additionalReferencePathParameter.IsNullable = true;
               additionalReferencePathParameter.Value = DBNull.Value;
           }
           else
           {
               additionalReferencePathParameter.Value = additionalReferencePath;
           }

            var settledByUserIdParameter = settledByUserId.HasValue ?
                new SqlParameter("SettledByUserId", settledByUserId) :
                new SqlParameter("SettledByUserId", SqlDbType.BigInt);

           var settledByParameter = new SqlParameter("SettledBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(settledBy))
           {
               settledByParameter.IsNullable = true;
               settledByParameter.Value = DBNull.Value;
           }
           else
           {
               settledByParameter.Value = settledBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_UnitInvoice_SaveSettlementDetails @UnitInvoiceId, @SettlementAmount, @SettlementComments, @AdditionalReferencePath, @SettledByUserId, @SettledBy, @ErrorCode OUT", unitInvoiceIdParameter, settlementAmountParameter, settlementCommentsParameter, additionalReferencePathParameter, settledByUserIdParameter, settledByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_UnitInvoiceDuesummerybyBillcode_Result> SP_DGC_UnitInvoiceDuesummerybyBillcode(Nullable<Int32> unitId, string billCode)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

           var billCodeParameter = new SqlParameter("BillCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(billCode))
           {
               billCodeParameter.IsNullable = true;
               billCodeParameter.Value = DBNull.Value;
           }
           else
           {
               billCodeParameter.Value = billCode;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_UnitInvoiceDuesummerybyBillcode_Result>("SP_DGC_UnitInvoiceDuesummerybyBillcode @UnitId, @BillCode", unitIdParameter, billCodeParameter);


            return retVal;

        }
        public virtual int SP_DGC_UpdateQrCodePath(Nullable<Int32> unitId, string qrCodePath, string updatedBy, ObjectParameter errorCode)
        {

            var unitIdParameter = unitId.HasValue ?
                new SqlParameter("UnitId", unitId) :
                new SqlParameter("UnitId", SqlDbType.Int);

           var qrCodePathParameter = new SqlParameter("QrCodePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(qrCodePath))
           {
               qrCodePathParameter.IsNullable = true;
               qrCodePathParameter.Value = DBNull.Value;
           }
           else
           {
               qrCodePathParameter.Value = qrCodePath;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_UpdateQrCodePath @UnitId, @QrCodePath, @UpdatedBy, @ErrorCode OUT", unitIdParameter, qrCodePathParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
    }
}
