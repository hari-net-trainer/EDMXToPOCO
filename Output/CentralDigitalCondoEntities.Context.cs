//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a Reverse POCO Gen tool.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace CentralDigitalCondoModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data;
    using System.Data.SqlClient;

    public partial class CentralDigitalCondoEntities : DbContext
    {
        public CentralDigitalCondoEntities()
            : base("name=CentralDigitalCondoEntities")
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            //throw new UnintentionalCodeFirstException();
        }

        public virtual int SP_DGC_ActivateCentralMobileUser(string mobileNumber, string mobileIMEA, string tempPassword, ObjectParameter errorCode)
        {

           var mobileNumberParameter = new SqlParameter("MobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(mobileNumber))
           {
               mobileNumberParameter.IsNullable = true;
               mobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               mobileNumberParameter.Value = mobileNumber;
           }

           var mobileIMEAParameter = new SqlParameter("MobileIMEA", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(mobileIMEA))
           {
               mobileIMEAParameter.IsNullable = true;
               mobileIMEAParameter.Value = DBNull.Value;
           }
           else
           {
               mobileIMEAParameter.Value = mobileIMEA;
           }

           var tempPasswordParameter = new SqlParameter("TempPassword", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(tempPassword))
           {
               tempPasswordParameter.IsNullable = true;
               tempPasswordParameter.Value = DBNull.Value;
           }
           else
           {
               tempPasswordParameter.Value = tempPassword;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_ActivateCentralMobileUser @MobileNumber, @MobileIMEA, @TempPassword, @ErrorCode OUT", mobileNumberParameter, mobileIMEAParameter, tempPasswordParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_ActivateCentralWebUser(Nullable<Int64> centralUserId, string tempPassword, string curretPassword, Nullable<Int64> subscriptionId, string updatedBy, ObjectParameter errorCode)
        {

            var centralUserIdParameter = centralUserId.HasValue ?
                new SqlParameter("CentralUserId", centralUserId) :
                new SqlParameter("CentralUserId", SqlDbType.BigInt);

           var tempPasswordParameter = new SqlParameter("TempPassword", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(tempPassword))
           {
               tempPasswordParameter.IsNullable = true;
               tempPasswordParameter.Value = DBNull.Value;
           }
           else
           {
               tempPasswordParameter.Value = tempPassword;
           }

           var curretPasswordParameter = new SqlParameter("CurretPassword", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(curretPassword))
           {
               curretPasswordParameter.IsNullable = true;
               curretPasswordParameter.Value = DBNull.Value;
           }
           else
           {
               curretPasswordParameter.Value = curretPassword;
           }

            var subscriptionIdParameter = subscriptionId.HasValue ?
                new SqlParameter("SubscriptionId", subscriptionId) :
                new SqlParameter("SubscriptionId", SqlDbType.BigInt);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_ActivateCentralWebUser @CentralUserId, @TempPassword, @CurretPassword, @SubscriptionId, @UpdatedBy, @ErrorCode OUT", centralUserIdParameter, tempPasswordParameter, curretPasswordParameter, subscriptionIdParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_Central_SaveOTPDeliveryDetails(string recieverMobileNumber, string aPIReferenceId, string sentBy)
        {

           var recieverMobileNumberParameter = new SqlParameter("RecieverMobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(recieverMobileNumber))
           {
               recieverMobileNumberParameter.IsNullable = true;
               recieverMobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               recieverMobileNumberParameter.Value = recieverMobileNumber;
           }

           var aPIReferenceIdParameter = new SqlParameter("APIReferenceId", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(aPIReferenceId))
           {
               aPIReferenceIdParameter.IsNullable = true;
               aPIReferenceIdParameter.Value = DBNull.Value;
           }
           else
           {
               aPIReferenceIdParameter.Value = aPIReferenceId;
           }

           var sentByParameter = new SqlParameter("SentBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sentBy))
           {
               sentByParameter.IsNullable = true;
               sentByParameter.Value = DBNull.Value;
           }
           else
           {
               sentByParameter.Value = sentBy;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_Central_SaveOTPDeliveryDetails @RecieverMobileNumber, @APIReferenceId, @SentBy", recieverMobileNumberParameter, aPIReferenceIdParameter, sentByParameter);


            return retVal;

        }
        public virtual int SP_DGC_ChangeUserPassword(Nullable<Int64> centralUserId, string oldPassword, string curretPassword, string updatedBy, ObjectParameter errorCode)
        {

            var centralUserIdParameter = centralUserId.HasValue ?
                new SqlParameter("CentralUserId", centralUserId) :
                new SqlParameter("CentralUserId", SqlDbType.BigInt);

           var oldPasswordParameter = new SqlParameter("OldPassword", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(oldPassword))
           {
               oldPasswordParameter.IsNullable = true;
               oldPasswordParameter.Value = DBNull.Value;
           }
           else
           {
               oldPasswordParameter.Value = oldPassword;
           }

           var curretPasswordParameter = new SqlParameter("CurretPassword", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(curretPassword))
           {
               curretPasswordParameter.IsNullable = true;
               curretPasswordParameter.Value = DBNull.Value;
           }
           else
           {
               curretPasswordParameter.Value = curretPassword;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_ChangeUserPassword @CentralUserId, @OldPassword, @CurretPassword, @UpdatedBy, @ErrorCode OUT", centralUserIdParameter, oldPasswordParameter, curretPasswordParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeactivateCentralUserById(Nullable<Int64> centralUserId, Nullable<Int64> subscriptionId, string deActivatedBy, ObjectParameter errorCode)
        {

            var centralUserIdParameter = centralUserId.HasValue ?
                new SqlParameter("CentralUserId", centralUserId) :
                new SqlParameter("CentralUserId", SqlDbType.BigInt);

            var subscriptionIdParameter = subscriptionId.HasValue ?
                new SqlParameter("SubscriptionId", subscriptionId) :
                new SqlParameter("SubscriptionId", SqlDbType.BigInt);

           var deActivatedByParameter = new SqlParameter("DeActivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deActivatedBy))
           {
               deActivatedByParameter.IsNullable = true;
               deActivatedByParameter.Value = DBNull.Value;
           }
           else
           {
               deActivatedByParameter.Value = deActivatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeactivateCentralUserById @CentralUserId, @SubscriptionId, @DeActivatedBy, @ErrorCode OUT", centralUserIdParameter, subscriptionIdParameter, deActivatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeactivateSmsProvider(Nullable<Int32> smsProviderID, string comment, string deactivatedBy, ObjectParameter errorCode)
        {

            var smsProviderIDParameter = smsProviderID.HasValue ?
                new SqlParameter("SmsProviderID", smsProviderID) :
                new SqlParameter("SmsProviderID", SqlDbType.Int);

           var commentParameter = new SqlParameter("Comment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comment))
           {
               commentParameter.IsNullable = true;
               commentParameter.Value = DBNull.Value;
           }
           else
           {
               commentParameter.Value = comment;
           }

           var deactivatedByParameter = new SqlParameter("DeactivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deactivatedBy))
           {
               deactivatedByParameter.IsNullable = true;
               deactivatedByParameter.Value = DBNull.Value;
           }
           else
           {
               deactivatedByParameter.Value = deactivatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeactivateSmsProvider @SmsProviderID, @Comment, @DeactivatedBy, @ErrorCode OUT", smsProviderIDParameter, commentParameter, deactivatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteAppDeviceDetails(Nullable<Int32> appAuthTokenId, string comment, string deactivatedBy, ObjectParameter errorCode)
        {

            var appAuthTokenIdParameter = appAuthTokenId.HasValue ?
                new SqlParameter("AppAuthTokenId", appAuthTokenId) :
                new SqlParameter("AppAuthTokenId", SqlDbType.Int);

           var commentParameter = new SqlParameter("Comment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comment))
           {
               commentParameter.IsNullable = true;
               commentParameter.Value = DBNull.Value;
           }
           else
           {
               commentParameter.Value = comment;
           }

           var deactivatedByParameter = new SqlParameter("DeactivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deactivatedBy))
           {
               deactivatedByParameter.IsNullable = true;
               deactivatedByParameter.Value = DBNull.Value;
           }
           else
           {
               deactivatedByParameter.Value = deactivatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteAppDeviceDetails @AppAuthTokenId, @Comment, @DeactivatedBy, @ErrorCode OUT", appAuthTokenIdParameter, commentParameter, deactivatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteFcmConfigDetails(Nullable<Int32> fcmConfigId, string comment, string deactivatedBy, ObjectParameter errorCode)
        {

            var fcmConfigIdParameter = fcmConfigId.HasValue ?
                new SqlParameter("FcmConfigId", fcmConfigId) :
                new SqlParameter("FcmConfigId", SqlDbType.Int);

           var commentParameter = new SqlParameter("Comment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comment))
           {
               commentParameter.IsNullable = true;
               commentParameter.Value = DBNull.Value;
           }
           else
           {
               commentParameter.Value = comment;
           }

           var deactivatedByParameter = new SqlParameter("DeactivatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deactivatedBy))
           {
               deactivatedByParameter.IsNullable = true;
               deactivatedByParameter.Value = DBNull.Value;
           }
           else
           {
               deactivatedByParameter.Value = deactivatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteFcmConfigDetails @FcmConfigId, @Comment, @DeactivatedBy, @ErrorCode OUT", fcmConfigIdParameter, commentParameter, deactivatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_DeleteRefreshToken(string clientId, string subject, string refreshTokenId, ObjectParameter errorCode)
        {

           var clientIdParameter = new SqlParameter("ClientId", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(clientId))
           {
               clientIdParameter.IsNullable = true;
               clientIdParameter.Value = DBNull.Value;
           }
           else
           {
               clientIdParameter.Value = clientId;
           }

           var subjectParameter = new SqlParameter("Subject", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(subject))
           {
               subjectParameter.IsNullable = true;
               subjectParameter.Value = DBNull.Value;
           }
           else
           {
               subjectParameter.Value = subject;
           }

           var refreshTokenIdParameter = new SqlParameter("RefreshTokenId", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(refreshTokenId))
           {
               refreshTokenIdParameter.IsNullable = true;
               refreshTokenIdParameter.Value = DBNull.Value;
           }
           else
           {
               refreshTokenIdParameter.Value = refreshTokenId;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_DeleteRefreshToken @ClientId, @Subject, @RefreshTokenId, @ErrorCode OUT", clientIdParameter, subjectParameter, refreshTokenIdParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_GenerateOTPForMobileNumber(string mobileNumber, ObjectParameter oTPCode, ObjectParameter subscriptionCode)
        {

           var mobileNumberParameter = new SqlParameter("MobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(mobileNumber))
           {
               mobileNumberParameter.IsNullable = true;
               mobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               mobileNumberParameter.Value = mobileNumber;
           }

           var oTPCodeParameter = new SqlParameter("OTPCode", SqlDbType.BigInt);
               oTPCodeParameter.Direction = System.Data.ParameterDirection.Output;
               oTPCodeParameter.Value = oTPCode != null ? oTPCode.Value : null;

           var subscriptionCodeParameter = new SqlParameter("SubscriptionCode", SqlDbType.VarChar, 500);
               subscriptionCodeParameter.Direction = System.Data.ParameterDirection.Output;
               subscriptionCodeParameter.Value = subscriptionCode != null ? subscriptionCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_GenerateOTPForMobileNumber @MobileNumber, @OTPCode OUT, @SubscriptionCode OUT", mobileNumberParameter, oTPCodeParameter, subscriptionCodeParameter);

            oTPCode.Value = oTPCodeParameter.Value;
            subscriptionCode.Value = subscriptionCodeParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveAPIConsumeClients_Result> SP_DGC_GetActiveAPIConsumeClients()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveAPIConsumeClients_Result>("SP_DGC_GetActiveAPIConsumeClients");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveApplicationDevices_Result> SP_DGC_GetActiveApplicationDevices()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveApplicationDevices_Result>("SP_DGC_GetActiveApplicationDevices");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveComapnies_Result> SP_DGC_GetActiveComapnies()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveComapnies_Result>("SP_DGC_GetActiveComapnies");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetActiveIsoCurrencyCodes_Result> SP_DGC_GetActiveIsoCurrencyCodes()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetActiveIsoCurrencyCodes_Result>("SP_DGC_GetActiveIsoCurrencyCodes");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllActiveSubscriptions_Result> SP_DGC_GetAllActiveSubscriptions()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllActiveSubscriptions_Result>("SP_DGC_GetAllActiveSubscriptions");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllAppDeviceDetails_Result> SP_DGC_GetAllAppDeviceDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllAppDeviceDetails_Result>("SP_DGC_GetAllAppDeviceDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllComapanySubscriptionDetails_Result> SP_DGC_GetAllComapanySubscriptionDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllComapanySubscriptionDetails_Result>("SP_DGC_GetAllComapanySubscriptionDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllCondoDataBaseDetails_Result> SP_DGC_GetAllCondoDataBaseDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllCondoDataBaseDetails_Result>("SP_DGC_GetAllCondoDataBaseDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllFcmConfigDetails_Result> SP_DGC_GetAllFcmConfigDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllFcmConfigDetails_Result>("SP_DGC_GetAllFcmConfigDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllSmsProviderDetails_Result> SP_DGC_GetAllSmsProviderDetails(Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, ObjectParameter actualTotalRecords)
        {

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllSmsProviderDetails_Result>("SP_DGC_GetAllSmsProviderDetails @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @ActualTotalRecords OUT", pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAllTicketSystemDetails_Result> SP_DGC_GetAllTicketSystemDetails(Nullable<DateTime> ticketFromDate, Nullable<DateTime> ticketToDate, Nullable<Int32> statusId, Nullable<Int32> pageNumber, Nullable<Int32> pageSize, Nullable<Int32> sortingColumn, string sortingDirection, string searchingValue, string subscriptionCode, Nullable<Int64> subscriptionID, ObjectParameter actualTotalRecords)
        {

            var ticketFromDateParameter = ticketFromDate.HasValue ?
                new SqlParameter("TicketFromDate", ticketFromDate) :
                new SqlParameter("TicketFromDate", SqlDbType.DateTime);

            var ticketToDateParameter = ticketToDate.HasValue ?
                new SqlParameter("TicketToDate", ticketToDate) :
                new SqlParameter("TicketToDate", SqlDbType.DateTime);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

            var pageNumberParameter = pageNumber.HasValue ?
                new SqlParameter("PageNumber", pageNumber) :
                new SqlParameter("PageNumber", SqlDbType.Int);

            var pageSizeParameter = pageSize.HasValue ?
                new SqlParameter("PageSize", pageSize) :
                new SqlParameter("PageSize", SqlDbType.Int);

            var sortingColumnParameter = sortingColumn.HasValue ?
                new SqlParameter("SortingColumn", sortingColumn) :
                new SqlParameter("SortingColumn", SqlDbType.Int);

           var sortingDirectionParameter = new SqlParameter("sortingDirection", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(sortingDirection))
           {
               sortingDirectionParameter.IsNullable = true;
               sortingDirectionParameter.Value = DBNull.Value;
           }
           else
           {
               sortingDirectionParameter.Value = sortingDirection;
           }

           var searchingValueParameter = new SqlParameter("SearchingValue", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(searchingValue))
           {
               searchingValueParameter.IsNullable = true;
               searchingValueParameter.Value = DBNull.Value;
           }
           else
           {
               searchingValueParameter.Value = searchingValue;
           }

           var subscriptionCodeParameter = new SqlParameter("SubscriptionCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(subscriptionCode))
           {
               subscriptionCodeParameter.IsNullable = true;
               subscriptionCodeParameter.Value = DBNull.Value;
           }
           else
           {
               subscriptionCodeParameter.Value = subscriptionCode;
           }

            var subscriptionIDParameter = subscriptionID.HasValue ?
                new SqlParameter("SubscriptionID", subscriptionID) :
                new SqlParameter("SubscriptionID", SqlDbType.BigInt);

           var actualTotalRecordsParameter = new SqlParameter("ActualTotalRecords", SqlDbType.Int);
               actualTotalRecordsParameter.Direction = System.Data.ParameterDirection.Output;
               actualTotalRecordsParameter.Value = actualTotalRecords != null ? actualTotalRecords.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAllTicketSystemDetails_Result>("SP_DGC_GetAllTicketSystemDetails @TicketFromDate, @TicketToDate, @StatusId, @PageNumber, @PageSize, @SortingColumn, @sortingDirection, @SearchingValue, @SubscriptionCode, @SubscriptionID, @ActualTotalRecords OUT", ticketFromDateParameter, ticketToDateParameter, statusIdParameter, pageNumberParameter, pageSizeParameter, sortingColumnParameter, sortingDirectionParameter, searchingValueParameter, subscriptionCodeParameter, subscriptionIDParameter, actualTotalRecordsParameter);

            actualTotalRecords.Value = actualTotalRecordsParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAPIRefreshTokenById_Result> SP_DGC_GetAPIRefreshTokenById(string refreshTokenId)
        {

           var refreshTokenIdParameter = new SqlParameter("RefreshTokenId", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(refreshTokenId))
           {
               refreshTokenIdParameter.IsNullable = true;
               refreshTokenIdParameter.Value = DBNull.Value;
           }
           else
           {
               refreshTokenIdParameter.Value = refreshTokenId;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAPIRefreshTokenById_Result>("SP_DGC_GetAPIRefreshTokenById @RefreshTokenId", refreshTokenIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetAppDeviceDetailsById_Result> SP_DGC_GetAppDeviceDetailsById(Nullable<Int32> appAuthTokenId)
        {

            var appAuthTokenIdParameter = appAuthTokenId.HasValue ?
                new SqlParameter("AppAuthTokenId", appAuthTokenId) :
                new SqlParameter("AppAuthTokenId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetAppDeviceDetailsById_Result>("SP_DGC_GetAppDeviceDetailsById @AppAuthTokenId", appAuthTokenIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCentralConfigValuesByName_Result> SP_DGC_GetCentralConfigValuesByName(string configName)
        {

           var configNameParameter = new SqlParameter("ConfigName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(configName))
           {
               configNameParameter.IsNullable = true;
               configNameParameter.Value = DBNull.Value;
           }
           else
           {
               configNameParameter.Value = configName;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCentralConfigValuesByName_Result>("SP_DGC_GetCentralConfigValuesByName @ConfigName", configNameParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCondoSubscriptionInvoiceConfigDetails_Result> SP_DGC_GetCondoSubscriptionInvoiceConfigDetails(Nullable<Int64> subscriptionId)
        {

            var subscriptionIdParameter = subscriptionId.HasValue ?
                new SqlParameter("SubscriptionId", subscriptionId) :
                new SqlParameter("SubscriptionId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCondoSubscriptionInvoiceConfigDetails_Result>("SP_DGC_GetCondoSubscriptionInvoiceConfigDetails @SubscriptionId", subscriptionIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetConStringBySubscriptionCode_Result> SP_DGC_GetConStringBySubscriptionCode(string subscriptionCode)
        {

           var subscriptionCodeParameter = new SqlParameter("SubscriptionCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(subscriptionCode))
           {
               subscriptionCodeParameter.IsNullable = true;
               subscriptionCodeParameter.Value = DBNull.Value;
           }
           else
           {
               subscriptionCodeParameter.Value = subscriptionCode;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetConStringBySubscriptionCode_Result>("SP_DGC_GetConStringBySubscriptionCode @SubscriptionCode", subscriptionCodeParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetCurrencyDescByCurrencyId_Result> SP_DGC_GetCurrencyDescByCurrencyId(Nullable<Int64> currencyId)
        {

            var currencyIdParameter = currencyId.HasValue ?
                new SqlParameter("CurrencyId", currencyId) :
                new SqlParameter("CurrencyId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetCurrencyDescByCurrencyId_Result>("SP_DGC_GetCurrencyDescByCurrencyId @CurrencyId", currencyIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetEmailTemplate_Result> SP_DGC_GetEmailTemplate(string templateName)
        {

           var templateNameParameter = new SqlParameter("TemplateName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(templateName))
           {
               templateNameParameter.IsNullable = true;
               templateNameParameter.Value = DBNull.Value;
           }
           else
           {
               templateNameParameter.Value = templateName;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetEmailTemplate_Result>("SP_DGC_GetEmailTemplate @TemplateName", templateNameParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetFcmConfigDetailsById_Result> SP_DGC_GetFcmConfigDetailsById(Nullable<Int32> fcmConfigId)
        {

            var fcmConfigIdParameter = fcmConfigId.HasValue ?
                new SqlParameter("FcmConfigId", fcmConfigId) :
                new SqlParameter("FcmConfigId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetFcmConfigDetailsById_Result>("SP_DGC_GetFcmConfigDetailsById @FcmConfigId", fcmConfigIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetInvoiceSchedulebySubscriptionid_Result> SP_DGC_GetInvoiceSchedulebySubscriptionid(Nullable<Int64> subScriptionId)
        {

            var subScriptionIdParameter = subScriptionId.HasValue ?
                new SqlParameter("SubScriptionId", subScriptionId) :
                new SqlParameter("SubScriptionId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetInvoiceSchedulebySubscriptionid_Result>("SP_DGC_GetInvoiceSchedulebySubscriptionid @SubScriptionId", subScriptionIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetPicDetailsBySubscriptionId_Result> SP_DGC_GetPicDetailsBySubscriptionId(Nullable<Int64> subscriptionId)
        {

            var subscriptionIdParameter = subscriptionId.HasValue ?
                new SqlParameter("SubscriptionId", subscriptionId) :
                new SqlParameter("SubscriptionId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetPicDetailsBySubscriptionId_Result>("SP_DGC_GetPicDetailsBySubscriptionId @SubscriptionId", subscriptionIdParameter);


            return retVal;

        }
        public virtual int SP_DGC_GetPropertyManagerDetailsBySubscriptionId(Nullable<Int64> subscriptionId, ObjectParameter centraUserId)
        {

            var subscriptionIdParameter = subscriptionId.HasValue ?
                new SqlParameter("SubscriptionId", subscriptionId) :
                new SqlParameter("SubscriptionId", SqlDbType.BigInt);

           var centraUserIdParameter = new SqlParameter("centraUserId", SqlDbType.BigInt);
               centraUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               centraUserIdParameter.Value = centraUserId != null ? centraUserId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_GetPropertyManagerDetailsBySubscriptionId @SubscriptionId, @centraUserId OUT", subscriptionIdParameter, centraUserIdParameter);

            centraUserId.Value = centraUserIdParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetRemsIntigrationDetailsBySubscriptionId_Result> SP_DGC_GetRemsIntigrationDetailsBySubscriptionId(Nullable<Int64> subscriptionId)
        {

            var subscriptionIdParameter = subscriptionId.HasValue ?
                new SqlParameter("SubscriptionId", subscriptionId) :
                new SqlParameter("SubscriptionId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetRemsIntigrationDetailsBySubscriptionId_Result>("SP_DGC_GetRemsIntigrationDetailsBySubscriptionId @SubscriptionId", subscriptionIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetSmsProviderDetailsById_Result> SP_DGC_GetSmsProviderDetailsById(Nullable<Int32> smsProviderId)
        {

            var smsProviderIdParameter = smsProviderId.HasValue ?
                new SqlParameter("SmsProviderId", smsProviderId) :
                new SqlParameter("SmsProviderId", SqlDbType.Int);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetSmsProviderDetailsById_Result>("SP_DGC_GetSmsProviderDetailsById @SmsProviderId", smsProviderIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetSmsProviderDetailsBySubScriptionCode_Result> SP_DGC_GetSmsProviderDetailsBySubScriptionCode(string subScriptionCode)
        {

           var subScriptionCodeParameter = new SqlParameter("SubScriptionCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(subScriptionCode))
           {
               subScriptionCodeParameter.IsNullable = true;
               subScriptionCodeParameter.Value = DBNull.Value;
           }
           else
           {
               subScriptionCodeParameter.Value = subScriptionCode;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetSmsProviderDetailsBySubScriptionCode_Result>("SP_DGC_GetSmsProviderDetailsBySubScriptionCode @SubScriptionCode", subScriptionCodeParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetStatusChangeValuesByStatusFor_Result> SP_DGC_GetStatusChangeValuesByStatusFor(string statusFor)
        {

           var statusForParameter = new SqlParameter("StatusFor", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(statusFor))
           {
               statusForParameter.IsNullable = true;
               statusForParameter.Value = DBNull.Value;
           }
           else
           {
               statusForParameter.Value = statusFor;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetStatusChangeValuesByStatusFor_Result>("SP_DGC_GetStatusChangeValuesByStatusFor @StatusFor", statusForParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetSubscriptionBillConfigRates_Result> SP_DGC_GetSubscriptionBillConfigRates(Nullable<Int64> subscriptionId)
        {

            var subscriptionIdParameter = subscriptionId.HasValue ?
                new SqlParameter("SubscriptionId", subscriptionId) :
                new SqlParameter("SubscriptionId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetSubscriptionBillConfigRates_Result>("SP_DGC_GetSubscriptionBillConfigRates @SubscriptionId", subscriptionIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetSubscriptionBillingConfigBySubId_Result> SP_DGC_GetSubscriptionBillingConfigBySubId(Nullable<Int64> subscriptionId)
        {

            var subscriptionIdParameter = subscriptionId.HasValue ?
                new SqlParameter("SubscriptionId", subscriptionId) :
                new SqlParameter("SubscriptionId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetSubscriptionBillingConfigBySubId_Result>("SP_DGC_GetSubscriptionBillingConfigBySubId @SubscriptionId", subscriptionIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetSubscriptionCurrentStatus_Result> SP_DGC_GetSubscriptionCurrentStatus(Nullable<Int64> subscriptionId)
        {

            var subscriptionIdParameter = subscriptionId.HasValue ?
                new SqlParameter("SubscriptionId", subscriptionId) :
                new SqlParameter("SubscriptionId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetSubscriptionCurrentStatus_Result>("SP_DGC_GetSubscriptionCurrentStatus @SubscriptionId", subscriptionIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetSubscriptionStatusChangeValues_Result> SP_DGC_GetSubscriptionStatusChangeValues()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetSubscriptionStatusChangeValues_Result>("SP_DGC_GetSubscriptionStatusChangeValues");


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUnMappedCondoDataBase_Result> SP_DGC_GetUnMappedCondoDataBase()
        {


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUnMappedCondoDataBase_Result>("SP_DGC_GetUnMappedCondoDataBase");


            return retVal;

        }
        public virtual int SP_DGC_GetUserFireBaseDetailsById(Nullable<Int64> centralUserId, ObjectParameter toFireBaseKey, ObjectParameter deviceId)
        {

            var centralUserIdParameter = centralUserId.HasValue ?
                new SqlParameter("CentralUserId", centralUserId) :
                new SqlParameter("CentralUserId", SqlDbType.BigInt);

           var toFireBaseKeyParameter = new SqlParameter("ToFireBaseKey", SqlDbType.VarChar, 500);
               toFireBaseKeyParameter.Direction = System.Data.ParameterDirection.Output;
               toFireBaseKeyParameter.Value = toFireBaseKey != null ? toFireBaseKey.Value : null;

           var deviceIdParameter = new SqlParameter("DeviceId", SqlDbType.VarChar, 500);
               deviceIdParameter.Direction = System.Data.ParameterDirection.Output;
               deviceIdParameter.Value = deviceId != null ? deviceId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_GetUserFireBaseDetailsById @CentralUserId, @ToFireBaseKey OUT, @DeviceId OUT", centralUserIdParameter, toFireBaseKeyParameter, deviceIdParameter);

            toFireBaseKey.Value = toFireBaseKeyParameter.Value;
            deviceId.Value = deviceIdParameter.Value;

            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUserPasswordDetailsByCentralUserId_Result> SP_DGC_GetUserPasswordDetailsByCentralUserId(Nullable<Int64> centralUserId)
        {

            var centralUserIdParameter = centralUserId.HasValue ?
                new SqlParameter("CentralUserId", centralUserId) :
                new SqlParameter("CentralUserId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUserPasswordDetailsByCentralUserId_Result>("SP_DGC_GetUserPasswordDetailsByCentralUserId @CentralUserId", centralUserIdParameter);


            return retVal;

        }
        public virtual ObjectResult<SP_DGC_GetUserSubscriptionDetails_Result> SP_DGC_GetUserSubscriptionDetails(Nullable<Int64> centralUserId)
        {

            var centralUserIdParameter = centralUserId.HasValue ?
                new SqlParameter("CentralUserId", centralUserId) :
                new SqlParameter("CentralUserId", SqlDbType.BigInt);


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<SP_DGC_GetUserSubscriptionDetails_Result>("SP_DGC_GetUserSubscriptionDetails @CentralUserId", centralUserIdParameter);


            return retVal;

        }
        public virtual int SP_DGC_SaveAppDeviceDetails(Nullable<Int32> appAuthTokenId, string applicationName, string applicationCode, string appToken, string comment, string createdBy, ObjectParameter errorCode)
        {

            var appAuthTokenIdParameter = appAuthTokenId.HasValue ?
                new SqlParameter("AppAuthTokenId", appAuthTokenId) :
                new SqlParameter("AppAuthTokenId", SqlDbType.Int);

           var applicationNameParameter = new SqlParameter("ApplicationName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(applicationName))
           {
               applicationNameParameter.IsNullable = true;
               applicationNameParameter.Value = DBNull.Value;
           }
           else
           {
               applicationNameParameter.Value = applicationName;
           }

           var applicationCodeParameter = new SqlParameter("ApplicationCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(applicationCode))
           {
               applicationCodeParameter.IsNullable = true;
               applicationCodeParameter.Value = DBNull.Value;
           }
           else
           {
               applicationCodeParameter.Value = applicationCode;
           }

           var appTokenParameter = new SqlParameter("AppToken", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(appToken))
           {
               appTokenParameter.IsNullable = true;
               appTokenParameter.Value = DBNull.Value;
           }
           else
           {
               appTokenParameter.Value = appToken;
           }

           var commentParameter = new SqlParameter("Comment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comment))
           {
               commentParameter.IsNullable = true;
               commentParameter.Value = DBNull.Value;
           }
           else
           {
               commentParameter.Value = comment;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveAppDeviceDetails @AppAuthTokenId, @ApplicationName, @ApplicationCode, @AppToken, @Comment, @CreatedBy, @ErrorCode OUT", appAuthTokenIdParameter, applicationNameParameter, applicationCodeParameter, appTokenParameter, commentParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCentralUserDetails(Nullable<Int64> subScriptionId, string userMobileNumber, string userPassword, string userMobileIMEA, string isActive, string updatedBy, ObjectParameter centralUserId, ObjectParameter errorCode, ObjectParameter isNewUser, string countryCode)
        {

            var subScriptionIdParameter = subScriptionId.HasValue ?
                new SqlParameter("SubScriptionId", subScriptionId) :
                new SqlParameter("SubScriptionId", SqlDbType.BigInt);

           var userMobileNumberParameter = new SqlParameter("UserMobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userMobileNumber))
           {
               userMobileNumberParameter.IsNullable = true;
               userMobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               userMobileNumberParameter.Value = userMobileNumber;
           }

           var userPasswordParameter = new SqlParameter("UserPassword", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userPassword))
           {
               userPasswordParameter.IsNullable = true;
               userPasswordParameter.Value = DBNull.Value;
           }
           else
           {
               userPasswordParameter.Value = userPassword;
           }

           var userMobileIMEAParameter = new SqlParameter("UserMobileIMEA", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userMobileIMEA))
           {
               userMobileIMEAParameter.IsNullable = true;
               userMobileIMEAParameter.Value = DBNull.Value;
           }
           else
           {
               userMobileIMEAParameter.Value = userMobileIMEA;
           }

           var isActiveParameter = new SqlParameter("IsActive", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isActive))
           {
               isActiveParameter.IsNullable = true;
               isActiveParameter.Value = DBNull.Value;
           }
           else
           {
               isActiveParameter.Value = isActive;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var centralUserIdParameter = new SqlParameter("CentralUserId", SqlDbType.BigInt);
               centralUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               centralUserIdParameter.Value = centralUserId != null ? centralUserId.Value : null;

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var isNewUserParameter = new SqlParameter("IsNewUser", SqlDbType.VarChar, 500);
               isNewUserParameter.Direction = System.Data.ParameterDirection.Output;
               isNewUserParameter.Value = isNewUser != null ? isNewUser.Value : null;

           var countryCodeParameter = new SqlParameter("CountryCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(countryCode))
           {
               countryCodeParameter.IsNullable = true;
               countryCodeParameter.Value = DBNull.Value;
           }
           else
           {
               countryCodeParameter.Value = countryCode;
           }


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCentralUserDetails @SubScriptionId, @UserMobileNumber, @UserPassword, @UserMobileIMEA, @IsActive, @UpdatedBy, @CentralUserId OUT, @ErrorCode OUT, @IsNewUser OUT, @CountryCode", subScriptionIdParameter, userMobileNumberParameter, userPasswordParameter, userMobileIMEAParameter, isActiveParameter, updatedByParameter, centralUserIdParameter, errorCodeParameter, isNewUserParameter, countryCodeParameter);

            centralUserId.Value = centralUserIdParameter.Value;
            errorCode.Value = errorCodeParameter.Value;
            isNewUser.Value = isNewUserParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveComapnyDetails(Nullable<Int64> subScriptionId, string companyName, string companyRegistrationNo, string companyAddress, string companyPhoneNumber, string companyFaxNumber, string updatedBy, ObjectParameter errorcode)
        {

            var subScriptionIdParameter = subScriptionId.HasValue ?
                new SqlParameter("SubScriptionId", subScriptionId) :
                new SqlParameter("SubScriptionId", SqlDbType.BigInt);

           var companyNameParameter = new SqlParameter("CompanyName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyName))
           {
               companyNameParameter.IsNullable = true;
               companyNameParameter.Value = DBNull.Value;
           }
           else
           {
               companyNameParameter.Value = companyName;
           }

           var companyRegistrationNoParameter = new SqlParameter("CompanyRegistrationNo", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyRegistrationNo))
           {
               companyRegistrationNoParameter.IsNullable = true;
               companyRegistrationNoParameter.Value = DBNull.Value;
           }
           else
           {
               companyRegistrationNoParameter.Value = companyRegistrationNo;
           }

           var companyAddressParameter = new SqlParameter("CompanyAddress", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyAddress))
           {
               companyAddressParameter.IsNullable = true;
               companyAddressParameter.Value = DBNull.Value;
           }
           else
           {
               companyAddressParameter.Value = companyAddress;
           }

           var companyPhoneNumberParameter = new SqlParameter("CompanyPhoneNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyPhoneNumber))
           {
               companyPhoneNumberParameter.IsNullable = true;
               companyPhoneNumberParameter.Value = DBNull.Value;
           }
           else
           {
               companyPhoneNumberParameter.Value = companyPhoneNumber;
           }

           var companyFaxNumberParameter = new SqlParameter("CompanyFaxNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyFaxNumber))
           {
               companyFaxNumberParameter.IsNullable = true;
               companyFaxNumberParameter.Value = DBNull.Value;
           }
           else
           {
               companyFaxNumberParameter.Value = companyFaxNumber;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorcodeParameter = new SqlParameter("Errorcode", SqlDbType.Int);
               errorcodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorcodeParameter.Value = errorcode != null ? errorcode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveComapnyDetails @SubScriptionId, @CompanyName, @CompanyRegistrationNo, @CompanyAddress, @CompanyPhoneNumber, @CompanyFaxNumber, @UpdatedBy, @Errorcode OUT", subScriptionIdParameter, companyNameParameter, companyRegistrationNoParameter, companyAddressParameter, companyPhoneNumberParameter, companyFaxNumberParameter, updatedByParameter, errorcodeParameter);

            errorcode.Value = errorcodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveComapnySubscriptionDetails(Nullable<Int64> companyId, string companyName, string companyRegistrationNo, string companyPhoneNumber, string companyEmail, string companyFaxNumber, string companyAddress, string isComapny, Nullable<Int64> parentComapnyID, string isIndividual, string picPersonName, string picMobilenumber, string picEmail, string createdBy, Nullable<Int64> theManagerSubscriptionID, Nullable<Int32> theManagerUserId, string subscriptionCreatedBy, string theMangerSubscriptionCode, ObjectParameter errorcode, ObjectParameter currentSubscriptionID, ObjectParameter currentSubscriptionCode)
        {

            var companyIdParameter = companyId.HasValue ?
                new SqlParameter("CompanyId", companyId) :
                new SqlParameter("CompanyId", SqlDbType.BigInt);

           var companyNameParameter = new SqlParameter("CompanyName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyName))
           {
               companyNameParameter.IsNullable = true;
               companyNameParameter.Value = DBNull.Value;
           }
           else
           {
               companyNameParameter.Value = companyName;
           }

           var companyRegistrationNoParameter = new SqlParameter("CompanyRegistrationNo", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyRegistrationNo))
           {
               companyRegistrationNoParameter.IsNullable = true;
               companyRegistrationNoParameter.Value = DBNull.Value;
           }
           else
           {
               companyRegistrationNoParameter.Value = companyRegistrationNo;
           }

           var companyPhoneNumberParameter = new SqlParameter("CompanyPhoneNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyPhoneNumber))
           {
               companyPhoneNumberParameter.IsNullable = true;
               companyPhoneNumberParameter.Value = DBNull.Value;
           }
           else
           {
               companyPhoneNumberParameter.Value = companyPhoneNumber;
           }

           var companyEmailParameter = new SqlParameter("CompanyEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyEmail))
           {
               companyEmailParameter.IsNullable = true;
               companyEmailParameter.Value = DBNull.Value;
           }
           else
           {
               companyEmailParameter.Value = companyEmail;
           }

           var companyFaxNumberParameter = new SqlParameter("CompanyFaxNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyFaxNumber))
           {
               companyFaxNumberParameter.IsNullable = true;
               companyFaxNumberParameter.Value = DBNull.Value;
           }
           else
           {
               companyFaxNumberParameter.Value = companyFaxNumber;
           }

           var companyAddressParameter = new SqlParameter("CompanyAddress", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(companyAddress))
           {
               companyAddressParameter.IsNullable = true;
               companyAddressParameter.Value = DBNull.Value;
           }
           else
           {
               companyAddressParameter.Value = companyAddress;
           }

           var isComapnyParameter = new SqlParameter("IsComapny", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isComapny))
           {
               isComapnyParameter.IsNullable = true;
               isComapnyParameter.Value = DBNull.Value;
           }
           else
           {
               isComapnyParameter.Value = isComapny;
           }

            var parentComapnyIDParameter = parentComapnyID.HasValue ?
                new SqlParameter("ParentComapnyID", parentComapnyID) :
                new SqlParameter("ParentComapnyID", SqlDbType.BigInt);

           var isIndividualParameter = new SqlParameter("IsIndividual", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isIndividual))
           {
               isIndividualParameter.IsNullable = true;
               isIndividualParameter.Value = DBNull.Value;
           }
           else
           {
               isIndividualParameter.Value = isIndividual;
           }

           var picPersonNameParameter = new SqlParameter("PicPersonName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(picPersonName))
           {
               picPersonNameParameter.IsNullable = true;
               picPersonNameParameter.Value = DBNull.Value;
           }
           else
           {
               picPersonNameParameter.Value = picPersonName;
           }

           var picMobilenumberParameter = new SqlParameter("PicMobilenumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(picMobilenumber))
           {
               picMobilenumberParameter.IsNullable = true;
               picMobilenumberParameter.Value = DBNull.Value;
           }
           else
           {
               picMobilenumberParameter.Value = picMobilenumber;
           }

           var picEmailParameter = new SqlParameter("PicEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(picEmail))
           {
               picEmailParameter.IsNullable = true;
               picEmailParameter.Value = DBNull.Value;
           }
           else
           {
               picEmailParameter.Value = picEmail;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

            var theManagerSubscriptionIDParameter = theManagerSubscriptionID.HasValue ?
                new SqlParameter("TheManagerSubscriptionID", theManagerSubscriptionID) :
                new SqlParameter("TheManagerSubscriptionID", SqlDbType.BigInt);

            var theManagerUserIdParameter = theManagerUserId.HasValue ?
                new SqlParameter("TheManagerUserId", theManagerUserId) :
                new SqlParameter("TheManagerUserId", SqlDbType.Int);

           var subscriptionCreatedByParameter = new SqlParameter("SubscriptionCreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(subscriptionCreatedBy))
           {
               subscriptionCreatedByParameter.IsNullable = true;
               subscriptionCreatedByParameter.Value = DBNull.Value;
           }
           else
           {
               subscriptionCreatedByParameter.Value = subscriptionCreatedBy;
           }

           var theMangerSubscriptionCodeParameter = new SqlParameter("TheMangerSubscriptionCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(theMangerSubscriptionCode))
           {
               theMangerSubscriptionCodeParameter.IsNullable = true;
               theMangerSubscriptionCodeParameter.Value = DBNull.Value;
           }
           else
           {
               theMangerSubscriptionCodeParameter.Value = theMangerSubscriptionCode;
           }

           var errorcodeParameter = new SqlParameter("Errorcode", SqlDbType.Int);
               errorcodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorcodeParameter.Value = errorcode != null ? errorcode.Value : null;

           var currentSubscriptionIDParameter = new SqlParameter("CurrentSubscriptionID", SqlDbType.BigInt);
               currentSubscriptionIDParameter.Direction = System.Data.ParameterDirection.Output;
               currentSubscriptionIDParameter.Value = currentSubscriptionID != null ? currentSubscriptionID.Value : null;

           var currentSubscriptionCodeParameter = new SqlParameter("CurrentSubscriptionCode", SqlDbType.VarChar, 500);
               currentSubscriptionCodeParameter.Direction = System.Data.ParameterDirection.Output;
               currentSubscriptionCodeParameter.Value = currentSubscriptionCode != null ? currentSubscriptionCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveComapnySubscriptionDetails @CompanyId, @CompanyName, @CompanyRegistrationNo, @CompanyPhoneNumber, @CompanyEmail, @CompanyFaxNumber, @CompanyAddress, @IsComapny, @ParentComapnyID, @IsIndividual, @PicPersonName, @PicMobilenumber, @PicEmail, @CreatedBy, @TheManagerSubscriptionID, @TheManagerUserId, @SubscriptionCreatedBy, @TheMangerSubscriptionCode, @Errorcode OUT, @CurrentSubscriptionID OUT, @CurrentSubscriptionCode OUT", companyIdParameter, companyNameParameter, companyRegistrationNoParameter, companyPhoneNumberParameter, companyEmailParameter, companyFaxNumberParameter, companyAddressParameter, isComapnyParameter, parentComapnyIDParameter, isIndividualParameter, picPersonNameParameter, picMobilenumberParameter, picEmailParameter, createdByParameter, theManagerSubscriptionIDParameter, theManagerUserIdParameter, subscriptionCreatedByParameter, theMangerSubscriptionCodeParameter, errorcodeParameter, currentSubscriptionIDParameter, currentSubscriptionCodeParameter);

            errorcode.Value = errorcodeParameter.Value;
            currentSubscriptionID.Value = currentSubscriptionIDParameter.Value;
            currentSubscriptionCode.Value = currentSubscriptionCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCondoDataBaseDetails(Nullable<Int32> dataBaseId, string serverName, string userName, string dbPassword, string initialcatalog, Nullable<DateTime> effectiveFrom, string createdBy, ObjectParameter errorCode)
        {

            var dataBaseIdParameter = dataBaseId.HasValue ?
                new SqlParameter("DataBaseId", dataBaseId) :
                new SqlParameter("DataBaseId", SqlDbType.Int);

           var serverNameParameter = new SqlParameter("ServerName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(serverName))
           {
               serverNameParameter.IsNullable = true;
               serverNameParameter.Value = DBNull.Value;
           }
           else
           {
               serverNameParameter.Value = serverName;
           }

           var userNameParameter = new SqlParameter("UserName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userName))
           {
               userNameParameter.IsNullable = true;
               userNameParameter.Value = DBNull.Value;
           }
           else
           {
               userNameParameter.Value = userName;
           }

           var dbPasswordParameter = new SqlParameter("DbPassword", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(dbPassword))
           {
               dbPasswordParameter.IsNullable = true;
               dbPasswordParameter.Value = DBNull.Value;
           }
           else
           {
               dbPasswordParameter.Value = dbPassword;
           }

           var initialcatalogParameter = new SqlParameter("Initialcatalog", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(initialcatalog))
           {
               initialcatalogParameter.IsNullable = true;
               initialcatalogParameter.Value = DBNull.Value;
           }
           else
           {
               initialcatalogParameter.Value = initialcatalog;
           }

            var effectiveFromParameter = effectiveFrom.HasValue ?
                new SqlParameter("EffectiveFrom", effectiveFrom) :
                new SqlParameter("EffectiveFrom", SqlDbType.DateTime);

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCondoDataBaseDetails @DataBaseId, @ServerName, @UserName, @DbPassword, @Initialcatalog, @EffectiveFrom, @CreatedBy, @ErrorCode OUT", dataBaseIdParameter, serverNameParameter, userNameParameter, dbPasswordParameter, initialcatalogParameter, effectiveFromParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCondoSubscriptionBillRates(Nullable<Int32> subscriptionBillId, Nullable<Int64> subscriptionId, Nullable<Int32> rateCalculationId, string slabRateXml, Nullable<DateTime> effectiveFrom, string updatedBy, ObjectParameter errorCode)
        {

            var subscriptionBillIdParameter = subscriptionBillId.HasValue ?
                new SqlParameter("SubscriptionBillId", subscriptionBillId) :
                new SqlParameter("SubscriptionBillId", SqlDbType.Int);

            var subscriptionIdParameter = subscriptionId.HasValue ?
                new SqlParameter("SubscriptionId", subscriptionId) :
                new SqlParameter("SubscriptionId", SqlDbType.BigInt);

            var rateCalculationIdParameter = rateCalculationId.HasValue ?
                new SqlParameter("RateCalculationId", rateCalculationId) :
                new SqlParameter("RateCalculationId", SqlDbType.Int);

            var slabRateXmlParameter = slabRateXml != null ?
                new SqlParameter("SlabRateXml", slabRateXml) :
                new SqlParameter("SlabRateXml", SqlDbType.Xml);

            var effectiveFromParameter = effectiveFrom.HasValue ?
                new SqlParameter("EffectiveFrom", effectiveFrom) :
                new SqlParameter("EffectiveFrom", SqlDbType.DateTime);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCondoSubscriptionBillRates @SubscriptionBillId, @SubscriptionId, @RateCalculationId, @SlabRateXml, @EffectiveFrom, @UpdatedBy, @ErrorCode OUT", subscriptionBillIdParameter, subscriptionIdParameter, rateCalculationIdParameter, slabRateXmlParameter, effectiveFromParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCondoSubscriptionInvoiceConfiguration(Nullable<Int32> invoiceConfigId, Nullable<Int64> subscriptionId, Nullable<Single> lateFee, Nullable<Int32> intrestFreeDays, Nullable<Single> rateOfIntrestPerMonth, Nullable<DateTime> effectiveFrom, string updatedBy, ObjectParameter errorCode)
        {

            var invoiceConfigIdParameter = invoiceConfigId.HasValue ?
                new SqlParameter("InvoiceConfigId", invoiceConfigId) :
                new SqlParameter("InvoiceConfigId", SqlDbType.Int);

            var subscriptionIdParameter = subscriptionId.HasValue ?
                new SqlParameter("SubscriptionId", subscriptionId) :
                new SqlParameter("SubscriptionId", SqlDbType.BigInt);

            var lateFeeParameter = lateFee.HasValue ?
                new SqlParameter("LateFee", lateFee) :
                new SqlParameter("LateFee", SqlDbType.Real);

            var intrestFreeDaysParameter = intrestFreeDays.HasValue ?
                new SqlParameter("IntrestFreeDays", intrestFreeDays) :
                new SqlParameter("IntrestFreeDays", SqlDbType.Int);

            var rateOfIntrestPerMonthParameter = rateOfIntrestPerMonth.HasValue ?
                new SqlParameter("RateOfIntrestPerMonth", rateOfIntrestPerMonth) :
                new SqlParameter("RateOfIntrestPerMonth", SqlDbType.Real);

            var effectiveFromParameter = effectiveFrom.HasValue ?
                new SqlParameter("EffectiveFrom", effectiveFrom) :
                new SqlParameter("EffectiveFrom", SqlDbType.DateTime);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCondoSubscriptionInvoiceConfiguration @InvoiceConfigId, @SubscriptionId, @LateFee, @IntrestFreeDays, @RateOfIntrestPerMonth, @EffectiveFrom, @UpdatedBy, @ErrorCode OUT", invoiceConfigIdParameter, subscriptionIdParameter, lateFeeParameter, intrestFreeDaysParameter, rateOfIntrestPerMonthParameter, effectiveFromParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveCondoSubscriptionRemsIntigrationDetails(Nullable<Int32> remsIntigrationId, Nullable<Int64> subscriptionId, Nullable<Int64> remsSubscriptionId, string remsFrontEndUrl, string remsBackEndUrl, string androidApplicationName, string iosApplicationName, string isIntigrationEnable, string appLogoPath, string updatedBy, ObjectParameter errorCode)
        {

            var remsIntigrationIdParameter = remsIntigrationId.HasValue ?
                new SqlParameter("RemsIntigrationId", remsIntigrationId) :
                new SqlParameter("RemsIntigrationId", SqlDbType.Int);

            var subscriptionIdParameter = subscriptionId.HasValue ?
                new SqlParameter("SubscriptionId", subscriptionId) :
                new SqlParameter("SubscriptionId", SqlDbType.BigInt);

            var remsSubscriptionIdParameter = remsSubscriptionId.HasValue ?
                new SqlParameter("RemsSubscriptionId", remsSubscriptionId) :
                new SqlParameter("RemsSubscriptionId", SqlDbType.BigInt);

           var remsFrontEndUrlParameter = new SqlParameter("RemsFrontEndUrl", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(remsFrontEndUrl))
           {
               remsFrontEndUrlParameter.IsNullable = true;
               remsFrontEndUrlParameter.Value = DBNull.Value;
           }
           else
           {
               remsFrontEndUrlParameter.Value = remsFrontEndUrl;
           }

           var remsBackEndUrlParameter = new SqlParameter("RemsBackEndUrl", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(remsBackEndUrl))
           {
               remsBackEndUrlParameter.IsNullable = true;
               remsBackEndUrlParameter.Value = DBNull.Value;
           }
           else
           {
               remsBackEndUrlParameter.Value = remsBackEndUrl;
           }

           var androidApplicationNameParameter = new SqlParameter("AndroidApplicationName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(androidApplicationName))
           {
               androidApplicationNameParameter.IsNullable = true;
               androidApplicationNameParameter.Value = DBNull.Value;
           }
           else
           {
               androidApplicationNameParameter.Value = androidApplicationName;
           }

           var iosApplicationNameParameter = new SqlParameter("IosApplicationName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(iosApplicationName))
           {
               iosApplicationNameParameter.IsNullable = true;
               iosApplicationNameParameter.Value = DBNull.Value;
           }
           else
           {
               iosApplicationNameParameter.Value = iosApplicationName;
           }

           var isIntigrationEnableParameter = new SqlParameter("IsIntigrationEnable", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isIntigrationEnable))
           {
               isIntigrationEnableParameter.IsNullable = true;
               isIntigrationEnableParameter.Value = DBNull.Value;
           }
           else
           {
               isIntigrationEnableParameter.Value = isIntigrationEnable;
           }

           var appLogoPathParameter = new SqlParameter("AppLogoPath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(appLogoPath))
           {
               appLogoPathParameter.IsNullable = true;
               appLogoPathParameter.Value = DBNull.Value;
           }
           else
           {
               appLogoPathParameter.Value = appLogoPath;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveCondoSubscriptionRemsIntigrationDetails @RemsIntigrationId, @SubscriptionId, @RemsSubscriptionId, @RemsFrontEndUrl, @RemsBackEndUrl, @AndroidApplicationName, @IosApplicationName, @IsIntigrationEnable, @AppLogoPath, @UpdatedBy, @ErrorCode OUT", remsIntigrationIdParameter, subscriptionIdParameter, remsSubscriptionIdParameter, remsFrontEndUrlParameter, remsBackEndUrlParameter, androidApplicationNameParameter, iosApplicationNameParameter, isIntigrationEnableParameter, appLogoPathParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveFCMConfigDetails(Nullable<Int32> fcmConfigId, string fCMApiUrl, string fCMLegacyKey, Nullable<Int32> appDeviceId, string comment, string createdBy, ObjectParameter errorCode)
        {

            var fcmConfigIdParameter = fcmConfigId.HasValue ?
                new SqlParameter("FcmConfigId", fcmConfigId) :
                new SqlParameter("FcmConfigId", SqlDbType.Int);

           var fCMApiUrlParameter = new SqlParameter("FCMApiUrl", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(fCMApiUrl))
           {
               fCMApiUrlParameter.IsNullable = true;
               fCMApiUrlParameter.Value = DBNull.Value;
           }
           else
           {
               fCMApiUrlParameter.Value = fCMApiUrl;
           }

           var fCMLegacyKeyParameter = new SqlParameter("FCMLegacyKey", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(fCMLegacyKey))
           {
               fCMLegacyKeyParameter.IsNullable = true;
               fCMLegacyKeyParameter.Value = DBNull.Value;
           }
           else
           {
               fCMLegacyKeyParameter.Value = fCMLegacyKey;
           }

            var appDeviceIdParameter = appDeviceId.HasValue ?
                new SqlParameter("AppDeviceId", appDeviceId) :
                new SqlParameter("AppDeviceId", SqlDbType.Int);

           var commentParameter = new SqlParameter("Comment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comment))
           {
               commentParameter.IsNullable = true;
               commentParameter.Value = DBNull.Value;
           }
           else
           {
               commentParameter.Value = comment;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveFCMConfigDetails @FcmConfigId, @FCMApiUrl, @FCMLegacyKey, @AppDeviceId, @Comment, @CreatedBy, @ErrorCode OUT", fcmConfigIdParameter, fCMApiUrlParameter, fCMLegacyKeyParameter, appDeviceIdParameter, commentParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveForgetPasswordRequest(string userMobileNumber, Nullable<DateTime> requestSubmittedOn, string requestParam, ObjectParameter errorCode, ObjectParameter centralUserId, ObjectParameter subscriptionCode, ObjectParameter requestOTP)
        {

           var userMobileNumberParameter = new SqlParameter("UserMobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userMobileNumber))
           {
               userMobileNumberParameter.IsNullable = true;
               userMobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               userMobileNumberParameter.Value = userMobileNumber;
           }

            var requestSubmittedOnParameter = requestSubmittedOn.HasValue ?
                new SqlParameter("RequestSubmittedOn", requestSubmittedOn) :
                new SqlParameter("RequestSubmittedOn", SqlDbType.DateTime);

           var requestParamParameter = new SqlParameter("RequestParam", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(requestParam))
           {
               requestParamParameter.IsNullable = true;
               requestParamParameter.Value = DBNull.Value;
           }
           else
           {
               requestParamParameter.Value = requestParam;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var centralUserIdParameter = new SqlParameter("CentralUserId", SqlDbType.BigInt);
               centralUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               centralUserIdParameter.Value = centralUserId != null ? centralUserId.Value : null;

           var subscriptionCodeParameter = new SqlParameter("SubscriptionCode", SqlDbType.VarChar, 500);
               subscriptionCodeParameter.Direction = System.Data.ParameterDirection.Output;
               subscriptionCodeParameter.Value = subscriptionCode != null ? subscriptionCode.Value : null;

           var requestOTPParameter = new SqlParameter("RequestOTP", SqlDbType.VarChar, 500);
               requestOTPParameter.Direction = System.Data.ParameterDirection.Output;
               requestOTPParameter.Value = requestOTP != null ? requestOTP.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveForgetPasswordRequest @UserMobileNumber, @RequestSubmittedOn, @RequestParam, @ErrorCode OUT, @CentralUserId OUT, @SubscriptionCode OUT, @RequestOTP OUT", userMobileNumberParameter, requestSubmittedOnParameter, requestParamParameter, errorCodeParameter, centralUserIdParameter, subscriptionCodeParameter, requestOTPParameter);

            errorCode.Value = errorCodeParameter.Value;
            centralUserId.Value = centralUserIdParameter.Value;
            subscriptionCode.Value = subscriptionCodeParameter.Value;
            requestOTP.Value = requestOTPParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveInitailaManagerSubscriptionUserDetails(Nullable<Int64> subScriptionId, Nullable<Int64> centralUserId, string updatedBy, ObjectParameter errorCode)
        {

            var subScriptionIdParameter = subScriptionId.HasValue ?
                new SqlParameter("SubScriptionId", subScriptionId) :
                new SqlParameter("SubScriptionId", SqlDbType.BigInt);

            var centralUserIdParameter = centralUserId.HasValue ?
                new SqlParameter("CentralUserId", centralUserId) :
                new SqlParameter("CentralUserId", SqlDbType.BigInt);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveInitailaManagerSubscriptionUserDetails @SubScriptionId, @CentralUserId, @UpdatedBy, @ErrorCode OUT", subScriptionIdParameter, centralUserIdParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveInvoiceSchedule(Nullable<Int32> invoiceScheduleID, Nullable<Int64> subScriptionId, Nullable<Int32> typeOfBill, Nullable<Int32> recurringPeriod, Nullable<Int32> scheduleDayOfMonth, string scheduleTime, string createdBy, ObjectParameter errorCode)
        {

            var invoiceScheduleIDParameter = invoiceScheduleID.HasValue ?
                new SqlParameter("InvoiceScheduleID", invoiceScheduleID) :
                new SqlParameter("InvoiceScheduleID", SqlDbType.Int);

            var subScriptionIdParameter = subScriptionId.HasValue ?
                new SqlParameter("SubScriptionId", subScriptionId) :
                new SqlParameter("SubScriptionId", SqlDbType.BigInt);

            var typeOfBillParameter = typeOfBill.HasValue ?
                new SqlParameter("TypeOfBill", typeOfBill) :
                new SqlParameter("TypeOfBill", SqlDbType.Int);

            var recurringPeriodParameter = recurringPeriod.HasValue ?
                new SqlParameter("RecurringPeriod", recurringPeriod) :
                new SqlParameter("RecurringPeriod", SqlDbType.Int);

            var scheduleDayOfMonthParameter = scheduleDayOfMonth.HasValue ?
                new SqlParameter("ScheduleDayOfMonth", scheduleDayOfMonth) :
                new SqlParameter("ScheduleDayOfMonth", SqlDbType.Int);

           var scheduleTimeParameter = new SqlParameter("ScheduleTime", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(scheduleTime))
           {
               scheduleTimeParameter.IsNullable = true;
               scheduleTimeParameter.Value = DBNull.Value;
           }
           else
           {
               scheduleTimeParameter.Value = scheduleTime;
           }

           var createdByParameter = new SqlParameter("createdBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveInvoiceSchedule @InvoiceScheduleID, @SubScriptionId, @TypeOfBill, @RecurringPeriod, @ScheduleDayOfMonth, @ScheduleTime, @createdBy, @ErrorCode OUT", invoiceScheduleIDParameter, subScriptionIdParameter, typeOfBillParameter, recurringPeriodParameter, scheduleDayOfMonthParameter, scheduleTimeParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SavePasswordDetails(Nullable<Int64> centralUserId, string newPassword, string newMobileIMEA, string updatedBy, ObjectParameter errorcode)
        {

            var centralUserIdParameter = centralUserId.HasValue ?
                new SqlParameter("CentralUserId", centralUserId) :
                new SqlParameter("CentralUserId", SqlDbType.BigInt);

           var newPasswordParameter = new SqlParameter("NewPassword", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(newPassword))
           {
               newPasswordParameter.IsNullable = true;
               newPasswordParameter.Value = DBNull.Value;
           }
           else
           {
               newPasswordParameter.Value = newPassword;
           }

           var newMobileIMEAParameter = new SqlParameter("NewMobileIMEA", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(newMobileIMEA))
           {
               newMobileIMEAParameter.IsNullable = true;
               newMobileIMEAParameter.Value = DBNull.Value;
           }
           else
           {
               newMobileIMEAParameter.Value = newMobileIMEA;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorcodeParameter = new SqlParameter("Errorcode", SqlDbType.Int);
               errorcodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorcodeParameter.Value = errorcode != null ? errorcode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SavePasswordDetails @CentralUserId, @NewPassword, @NewMobileIMEA, @UpdatedBy, @Errorcode OUT", centralUserIdParameter, newPasswordParameter, newMobileIMEAParameter, updatedByParameter, errorcodeParameter);

            errorcode.Value = errorcodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveRefreshTokenDetails(string clientId, string refreshTokenId, string subject, Nullable<DateTime> issuedUtc, Nullable<DateTime> expiresUtc, string protectedTicket, string updatedBy, ObjectParameter errorCode)
        {

           var clientIdParameter = new SqlParameter("ClientId", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(clientId))
           {
               clientIdParameter.IsNullable = true;
               clientIdParameter.Value = DBNull.Value;
           }
           else
           {
               clientIdParameter.Value = clientId;
           }

           var refreshTokenIdParameter = new SqlParameter("RefreshTokenId", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(refreshTokenId))
           {
               refreshTokenIdParameter.IsNullable = true;
               refreshTokenIdParameter.Value = DBNull.Value;
           }
           else
           {
               refreshTokenIdParameter.Value = refreshTokenId;
           }

           var subjectParameter = new SqlParameter("Subject", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(subject))
           {
               subjectParameter.IsNullable = true;
               subjectParameter.Value = DBNull.Value;
           }
           else
           {
               subjectParameter.Value = subject;
           }

            var issuedUtcParameter = issuedUtc.HasValue ?
                new SqlParameter("IssuedUtc", issuedUtc) :
                new SqlParameter("IssuedUtc", SqlDbType.DateTime);

            var expiresUtcParameter = expiresUtc.HasValue ?
                new SqlParameter("ExpiresUtc", expiresUtc) :
                new SqlParameter("ExpiresUtc", SqlDbType.DateTime);

           var protectedTicketParameter = new SqlParameter("ProtectedTicket", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(protectedTicket))
           {
               protectedTicketParameter.IsNullable = true;
               protectedTicketParameter.Value = DBNull.Value;
           }
           else
           {
               protectedTicketParameter.Value = protectedTicket;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveRefreshTokenDetails @ClientId, @RefreshTokenId, @Subject, @IssuedUtc, @ExpiresUtc, @ProtectedTicket, @UpdatedBy, @ErrorCode OUT", clientIdParameter, refreshTokenIdParameter, subjectParameter, issuedUtcParameter, expiresUtcParameter, protectedTicketParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveResetpasswordRequest(string changePassword, string requestParam, string requestOTP, Nullable<DateTime> updatedOn, ObjectParameter errorCode, ObjectParameter centralUserId)
        {

           var changePasswordParameter = new SqlParameter("ChangePassword", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(changePassword))
           {
               changePasswordParameter.IsNullable = true;
               changePasswordParameter.Value = DBNull.Value;
           }
           else
           {
               changePasswordParameter.Value = changePassword;
           }

           var requestParamParameter = new SqlParameter("RequestParam", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(requestParam))
           {
               requestParamParameter.IsNullable = true;
               requestParamParameter.Value = DBNull.Value;
           }
           else
           {
               requestParamParameter.Value = requestParam;
           }

           var requestOTPParameter = new SqlParameter("RequestOTP", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(requestOTP))
           {
               requestOTPParameter.IsNullable = true;
               requestOTPParameter.Value = DBNull.Value;
           }
           else
           {
               requestOTPParameter.Value = requestOTP;
           }

            var updatedOnParameter = updatedOn.HasValue ?
                new SqlParameter("UpdatedOn", updatedOn) :
                new SqlParameter("UpdatedOn", SqlDbType.DateTime);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;

           var centralUserIdParameter = new SqlParameter("CentralUserId", SqlDbType.BigInt);
               centralUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               centralUserIdParameter.Value = centralUserId != null ? centralUserId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveResetpasswordRequest @ChangePassword, @RequestParam, @RequestOTP, @UpdatedOn, @ErrorCode OUT, @CentralUserId OUT", changePasswordParameter, requestParamParameter, requestOTPParameter, updatedOnParameter, errorCodeParameter, centralUserIdParameter);

            errorCode.Value = errorCodeParameter.Value;
            centralUserId.Value = centralUserIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveSmsProviderDetails(Nullable<Int32> smsProviderID, Nullable<Int64> subScriptionId, string smsProviderName, string providerContactNumber, string providerEmailID, Nullable<Decimal> getwayCharges, string paramsXml, string baseUrl, string createdBy, ObjectParameter errorCode)
        {

            var smsProviderIDParameter = smsProviderID.HasValue ?
                new SqlParameter("SmsProviderID", smsProviderID) :
                new SqlParameter("SmsProviderID", SqlDbType.Int);

            var subScriptionIdParameter = subScriptionId.HasValue ?
                new SqlParameter("SubScriptionId", subScriptionId) :
                new SqlParameter("SubScriptionId", SqlDbType.BigInt);

           var smsProviderNameParameter = new SqlParameter("SmsProviderName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(smsProviderName))
           {
               smsProviderNameParameter.IsNullable = true;
               smsProviderNameParameter.Value = DBNull.Value;
           }
           else
           {
               smsProviderNameParameter.Value = smsProviderName;
           }

           var providerContactNumberParameter = new SqlParameter("ProviderContactNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(providerContactNumber))
           {
               providerContactNumberParameter.IsNullable = true;
               providerContactNumberParameter.Value = DBNull.Value;
           }
           else
           {
               providerContactNumberParameter.Value = providerContactNumber;
           }

           var providerEmailIDParameter = new SqlParameter("ProviderEmailID", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(providerEmailID))
           {
               providerEmailIDParameter.IsNullable = true;
               providerEmailIDParameter.Value = DBNull.Value;
           }
           else
           {
               providerEmailIDParameter.Value = providerEmailID;
           }

            var getwayChargesParameter = getwayCharges.HasValue ?
                new SqlParameter("GetwayCharges", getwayCharges) :
                new SqlParameter("GetwayCharges", SqlDbType.Decimal);

            var paramsXmlParameter = paramsXml != null ?
                new SqlParameter("ParamsXml", paramsXml) :
                new SqlParameter("ParamsXml", SqlDbType.Xml);

           var baseUrlParameter = new SqlParameter("BaseUrl", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(baseUrl))
           {
               baseUrlParameter.IsNullable = true;
               baseUrlParameter.Value = DBNull.Value;
           }
           else
           {
               baseUrlParameter.Value = baseUrl;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveSmsProviderDetails @SmsProviderID, @SubScriptionId, @SmsProviderName, @ProviderContactNumber, @ProviderEmailID, @GetwayCharges, @ParamsXml, @BaseUrl, @CreatedBy, @ErrorCode OUT", smsProviderIDParameter, subScriptionIdParameter, smsProviderNameParameter, providerContactNumberParameter, providerEmailIDParameter, getwayChargesParameter, paramsXmlParameter, baseUrlParameter, createdByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveStatusChangeHistoryDetails(Nullable<Int64> subscriptionId, Nullable<Int32> statusId, string statusComment, string actionTakenBy, Nullable<Decimal> paidAmount, string paymentReceivedBy, string modeofPayment, string bankName, string chequeNumber, string onlineReferenceNumber, Nullable<Int32> dataBaseId, string createdby, ObjectParameter errorCode)
        {

            var subscriptionIdParameter = subscriptionId.HasValue ?
                new SqlParameter("SubscriptionId", subscriptionId) :
                new SqlParameter("SubscriptionId", SqlDbType.BigInt);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

           var statusCommentParameter = new SqlParameter("StatusComment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(statusComment))
           {
               statusCommentParameter.IsNullable = true;
               statusCommentParameter.Value = DBNull.Value;
           }
           else
           {
               statusCommentParameter.Value = statusComment;
           }

           var actionTakenByParameter = new SqlParameter("ActionTakenBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(actionTakenBy))
           {
               actionTakenByParameter.IsNullable = true;
               actionTakenByParameter.Value = DBNull.Value;
           }
           else
           {
               actionTakenByParameter.Value = actionTakenBy;
           }

            var paidAmountParameter = paidAmount.HasValue ?
                new SqlParameter("PaidAmount", paidAmount) :
                new SqlParameter("PaidAmount", SqlDbType.Decimal);

           var paymentReceivedByParameter = new SqlParameter("PaymentReceivedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(paymentReceivedBy))
           {
               paymentReceivedByParameter.IsNullable = true;
               paymentReceivedByParameter.Value = DBNull.Value;
           }
           else
           {
               paymentReceivedByParameter.Value = paymentReceivedBy;
           }

           var modeofPaymentParameter = new SqlParameter("ModeofPayment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(modeofPayment))
           {
               modeofPaymentParameter.IsNullable = true;
               modeofPaymentParameter.Value = DBNull.Value;
           }
           else
           {
               modeofPaymentParameter.Value = modeofPayment;
           }

           var bankNameParameter = new SqlParameter("BankName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(bankName))
           {
               bankNameParameter.IsNullable = true;
               bankNameParameter.Value = DBNull.Value;
           }
           else
           {
               bankNameParameter.Value = bankName;
           }

           var chequeNumberParameter = new SqlParameter("ChequeNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(chequeNumber))
           {
               chequeNumberParameter.IsNullable = true;
               chequeNumberParameter.Value = DBNull.Value;
           }
           else
           {
               chequeNumberParameter.Value = chequeNumber;
           }

           var onlineReferenceNumberParameter = new SqlParameter("OnlineReferenceNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(onlineReferenceNumber))
           {
               onlineReferenceNumberParameter.IsNullable = true;
               onlineReferenceNumberParameter.Value = DBNull.Value;
           }
           else
           {
               onlineReferenceNumberParameter.Value = onlineReferenceNumber;
           }

            var dataBaseIdParameter = dataBaseId.HasValue ?
                new SqlParameter("DataBaseId", dataBaseId) :
                new SqlParameter("DataBaseId", SqlDbType.Int);

           var createdbyParameter = new SqlParameter("Createdby", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdby))
           {
               createdbyParameter.IsNullable = true;
               createdbyParameter.Value = DBNull.Value;
           }
           else
           {
               createdbyParameter.Value = createdby;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveStatusChangeHistoryDetails @SubscriptionId, @StatusId, @StatusComment, @ActionTakenBy, @PaidAmount, @PaymentReceivedBy, @ModeofPayment, @BankName, @ChequeNumber, @OnlineReferenceNumber, @DataBaseId, @Createdby, @ErrorCode OUT", subscriptionIdParameter, statusIdParameter, statusCommentParameter, actionTakenByParameter, paidAmountParameter, paymentReceivedByParameter, modeofPaymentParameter, bankNameParameter, chequeNumberParameter, onlineReferenceNumberParameter, dataBaseIdParameter, createdbyParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveSubscriptionBillDetails(Nullable<Int32> subscriptionBillId, Nullable<Int32> billLevelType, Nullable<Decimal> slabRateAmount, Nullable<DateTime> effectiveFrom, string updatedBy, ObjectParameter errorCode)
        {

            var subscriptionBillIdParameter = subscriptionBillId.HasValue ?
                new SqlParameter("SubscriptionBillId", subscriptionBillId) :
                new SqlParameter("SubscriptionBillId", SqlDbType.Int);

            var billLevelTypeParameter = billLevelType.HasValue ?
                new SqlParameter("BillLevelType", billLevelType) :
                new SqlParameter("BillLevelType", SqlDbType.Int);

            var slabRateAmountParameter = slabRateAmount.HasValue ?
                new SqlParameter("SlabRateAmount", slabRateAmount) :
                new SqlParameter("SlabRateAmount", SqlDbType.Decimal);

            var effectiveFromParameter = effectiveFrom.HasValue ?
                new SqlParameter("EffectiveFrom", effectiveFrom) :
                new SqlParameter("EffectiveFrom", SqlDbType.DateTime);

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveSubscriptionBillDetails @SubscriptionBillId, @BillLevelType, @SlabRateAmount, @EffectiveFrom, @UpdatedBy, @ErrorCode OUT", subscriptionBillIdParameter, billLevelTypeParameter, slabRateAmountParameter, effectiveFromParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveSubscriptionBillingConfig(Nullable<Int64> subBillingID, Nullable<Int64> subscriptionId, string contactPersonName, string mobileNumber, string email, string billingAddress, Nullable<Int32> billingCurrencyId, string currencyDesc, string billingPeriodFrom, string createdBy, ObjectParameter errorcode)
        {

            var subBillingIDParameter = subBillingID.HasValue ?
                new SqlParameter("SubBillingID", subBillingID) :
                new SqlParameter("SubBillingID", SqlDbType.BigInt);

            var subscriptionIdParameter = subscriptionId.HasValue ?
                new SqlParameter("SubscriptionId", subscriptionId) :
                new SqlParameter("SubscriptionId", SqlDbType.BigInt);

           var contactPersonNameParameter = new SqlParameter("ContactPersonName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(contactPersonName))
           {
               contactPersonNameParameter.IsNullable = true;
               contactPersonNameParameter.Value = DBNull.Value;
           }
           else
           {
               contactPersonNameParameter.Value = contactPersonName;
           }

           var mobileNumberParameter = new SqlParameter("MobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(mobileNumber))
           {
               mobileNumberParameter.IsNullable = true;
               mobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               mobileNumberParameter.Value = mobileNumber;
           }

           var emailParameter = new SqlParameter("Email", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(email))
           {
               emailParameter.IsNullable = true;
               emailParameter.Value = DBNull.Value;
           }
           else
           {
               emailParameter.Value = email;
           }

           var billingAddressParameter = new SqlParameter("BillingAddress", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(billingAddress))
           {
               billingAddressParameter.IsNullable = true;
               billingAddressParameter.Value = DBNull.Value;
           }
           else
           {
               billingAddressParameter.Value = billingAddress;
           }

            var billingCurrencyIdParameter = billingCurrencyId.HasValue ?
                new SqlParameter("BillingCurrencyId", billingCurrencyId) :
                new SqlParameter("BillingCurrencyId", SqlDbType.Int);

           var currencyDescParameter = new SqlParameter("CurrencyDesc", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(currencyDesc))
           {
               currencyDescParameter.IsNullable = true;
               currencyDescParameter.Value = DBNull.Value;
           }
           else
           {
               currencyDescParameter.Value = currencyDesc;
           }

           var billingPeriodFromParameter = new SqlParameter("BillingPeriodFrom", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(billingPeriodFrom))
           {
               billingPeriodFromParameter.IsNullable = true;
               billingPeriodFromParameter.Value = DBNull.Value;
           }
           else
           {
               billingPeriodFromParameter.Value = billingPeriodFrom;
           }

           var createdByParameter = new SqlParameter("CreatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(createdBy))
           {
               createdByParameter.IsNullable = true;
               createdByParameter.Value = DBNull.Value;
           }
           else
           {
               createdByParameter.Value = createdBy;
           }

           var errorcodeParameter = new SqlParameter("Errorcode", SqlDbType.Int);
               errorcodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorcodeParameter.Value = errorcode != null ? errorcode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveSubscriptionBillingConfig @SubBillingID, @SubscriptionId, @ContactPersonName, @MobileNumber, @Email, @BillingAddress, @BillingCurrencyId, @CurrencyDesc, @BillingPeriodFrom, @CreatedBy, @Errorcode OUT", subBillingIDParameter, subscriptionIdParameter, contactPersonNameParameter, mobileNumberParameter, emailParameter, billingAddressParameter, billingCurrencyIdParameter, currencyDescParameter, billingPeriodFromParameter, createdByParameter, errorcodeParameter);

            errorcode.Value = errorcodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveSubscriptionPicDetails(Nullable<Int64> companyId, string picName, string picMobilenumber, string picEmail, string updatedBy, ObjectParameter errorCode)
        {

            var companyIdParameter = companyId.HasValue ?
                new SqlParameter("CompanyId", companyId) :
                new SqlParameter("CompanyId", SqlDbType.BigInt);

           var picNameParameter = new SqlParameter("PicName", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(picName))
           {
               picNameParameter.IsNullable = true;
               picNameParameter.Value = DBNull.Value;
           }
           else
           {
               picNameParameter.Value = picName;
           }

           var picMobilenumberParameter = new SqlParameter("PicMobilenumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(picMobilenumber))
           {
               picMobilenumberParameter.IsNullable = true;
               picMobilenumberParameter.Value = DBNull.Value;
           }
           else
           {
               picMobilenumberParameter.Value = picMobilenumber;
           }

           var picEmailParameter = new SqlParameter("PicEmail", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(picEmail))
           {
               picEmailParameter.IsNullable = true;
               picEmailParameter.Value = DBNull.Value;
           }
           else
           {
               picEmailParameter.Value = picEmail;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveSubscriptionPicDetails @CompanyId, @PicName, @PicMobilenumber, @PicEmail, @UpdatedBy, @ErrorCode OUT", companyIdParameter, picNameParameter, picMobilenumberParameter, picEmailParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveTheManagerResposeDetails(Nullable<Int64> subscriptionID, Nullable<Int64> theManagerSubscriptionID, string theMangerSubscriptionCode, string responseStatus, ObjectParameter errorcode)
        {

            var subscriptionIDParameter = subscriptionID.HasValue ?
                new SqlParameter("SubscriptionID", subscriptionID) :
                new SqlParameter("SubscriptionID", SqlDbType.BigInt);

            var theManagerSubscriptionIDParameter = theManagerSubscriptionID.HasValue ?
                new SqlParameter("TheManagerSubscriptionID", theManagerSubscriptionID) :
                new SqlParameter("TheManagerSubscriptionID", SqlDbType.BigInt);

           var theMangerSubscriptionCodeParameter = new SqlParameter("TheMangerSubscriptionCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(theMangerSubscriptionCode))
           {
               theMangerSubscriptionCodeParameter.IsNullable = true;
               theMangerSubscriptionCodeParameter.Value = DBNull.Value;
           }
           else
           {
               theMangerSubscriptionCodeParameter.Value = theMangerSubscriptionCode;
           }

           var responseStatusParameter = new SqlParameter("ResponseStatus", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(responseStatus))
           {
               responseStatusParameter.IsNullable = true;
               responseStatusParameter.Value = DBNull.Value;
           }
           else
           {
               responseStatusParameter.Value = responseStatus;
           }

           var errorcodeParameter = new SqlParameter("Errorcode", SqlDbType.Int);
               errorcodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorcodeParameter.Value = errorcode != null ? errorcode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveTheManagerResposeDetails @SubscriptionID, @TheManagerSubscriptionID, @TheMangerSubscriptionCode, @ResponseStatus, @Errorcode OUT", subscriptionIDParameter, theManagerSubscriptionIDParameter, theMangerSubscriptionCodeParameter, responseStatusParameter, errorcodeParameter);

            errorcode.Value = errorcodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveTicketSystemActionDetails(Nullable<Int32> ticketId, Nullable<Int32> statusId, string comment, string actionTakenBy, Nullable<Int64> actionTakenByUserid, string assignToUserEMails, Nullable<Int32> previousStatusID, ObjectParameter errorCode)
        {

            var ticketIdParameter = ticketId.HasValue ?
                new SqlParameter("TicketId", ticketId) :
                new SqlParameter("TicketId", SqlDbType.Int);

            var statusIdParameter = statusId.HasValue ?
                new SqlParameter("StatusId", statusId) :
                new SqlParameter("StatusId", SqlDbType.Int);

           var commentParameter = new SqlParameter("Comment", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(comment))
           {
               commentParameter.IsNullable = true;
               commentParameter.Value = DBNull.Value;
           }
           else
           {
               commentParameter.Value = comment;
           }

           var actionTakenByParameter = new SqlParameter("ActionTakenBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(actionTakenBy))
           {
               actionTakenByParameter.IsNullable = true;
               actionTakenByParameter.Value = DBNull.Value;
           }
           else
           {
               actionTakenByParameter.Value = actionTakenBy;
           }

            var actionTakenByUseridParameter = actionTakenByUserid.HasValue ?
                new SqlParameter("ActionTakenByUserid", actionTakenByUserid) :
                new SqlParameter("ActionTakenByUserid", SqlDbType.BigInt);

           var assignToUserEMailsParameter = new SqlParameter("AssignToUserEMails", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(assignToUserEMails))
           {
               assignToUserEMailsParameter.IsNullable = true;
               assignToUserEMailsParameter.Value = DBNull.Value;
           }
           else
           {
               assignToUserEMailsParameter.Value = assignToUserEMails;
           }

            var previousStatusIDParameter = previousStatusID.HasValue ?
                new SqlParameter("PreviousStatusID", previousStatusID) :
                new SqlParameter("PreviousStatusID", SqlDbType.Int);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveTicketSystemActionDetails @TicketId, @StatusId, @Comment, @ActionTakenBy, @ActionTakenByUserid, @AssignToUserEMails, @PreviousStatusID, @ErrorCode OUT", ticketIdParameter, statusIdParameter, commentParameter, actionTakenByParameter, actionTakenByUseridParameter, assignToUserEMailsParameter, previousStatusIDParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveTicketSystemDetails(Nullable<Int32> ticketId, Nullable<Int64> subscriptionId, string subscriptionCode, string ticketSubject, string ticketDescription, string ticketImagePath, string raisedBy, Nullable<Int64> raisedByUserid, ObjectParameter errorCode)
        {

            var ticketIdParameter = ticketId.HasValue ?
                new SqlParameter("TicketId", ticketId) :
                new SqlParameter("TicketId", SqlDbType.Int);

            var subscriptionIdParameter = subscriptionId.HasValue ?
                new SqlParameter("SubscriptionId", subscriptionId) :
                new SqlParameter("SubscriptionId", SqlDbType.BigInt);

           var subscriptionCodeParameter = new SqlParameter("SubscriptionCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(subscriptionCode))
           {
               subscriptionCodeParameter.IsNullable = true;
               subscriptionCodeParameter.Value = DBNull.Value;
           }
           else
           {
               subscriptionCodeParameter.Value = subscriptionCode;
           }

           var ticketSubjectParameter = new SqlParameter("TicketSubject", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ticketSubject))
           {
               ticketSubjectParameter.IsNullable = true;
               ticketSubjectParameter.Value = DBNull.Value;
           }
           else
           {
               ticketSubjectParameter.Value = ticketSubject;
           }

           var ticketDescriptionParameter = new SqlParameter("TicketDescription", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ticketDescription))
           {
               ticketDescriptionParameter.IsNullable = true;
               ticketDescriptionParameter.Value = DBNull.Value;
           }
           else
           {
               ticketDescriptionParameter.Value = ticketDescription;
           }

           var ticketImagePathParameter = new SqlParameter("TicketImagePath", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(ticketImagePath))
           {
               ticketImagePathParameter.IsNullable = true;
               ticketImagePathParameter.Value = DBNull.Value;
           }
           else
           {
               ticketImagePathParameter.Value = ticketImagePath;
           }

           var raisedByParameter = new SqlParameter("RaisedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(raisedBy))
           {
               raisedByParameter.IsNullable = true;
               raisedByParameter.Value = DBNull.Value;
           }
           else
           {
               raisedByParameter.Value = raisedBy;
           }

            var raisedByUseridParameter = raisedByUserid.HasValue ?
                new SqlParameter("RaisedByUserid", raisedByUserid) :
                new SqlParameter("RaisedByUserid", SqlDbType.BigInt);

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveTicketSystemDetails @TicketId, @SubscriptionId, @SubscriptionCode, @TicketSubject, @TicketDescription, @TicketImagePath, @RaisedBy, @RaisedByUserid, @ErrorCode OUT", ticketIdParameter, subscriptionIdParameter, subscriptionCodeParameter, ticketSubjectParameter, ticketDescriptionParameter, ticketImagePathParameter, raisedByParameter, raisedByUseridParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUserFireBaseDetails(Nullable<Int64> centralUserId, string toFireBaseKey, string deviceId, string updatedBy, ObjectParameter errorCode)
        {

            var centralUserIdParameter = centralUserId.HasValue ?
                new SqlParameter("CentralUserId", centralUserId) :
                new SqlParameter("CentralUserId", SqlDbType.BigInt);

           var toFireBaseKeyParameter = new SqlParameter("ToFireBaseKey", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(toFireBaseKey))
           {
               toFireBaseKeyParameter.IsNullable = true;
               toFireBaseKeyParameter.Value = DBNull.Value;
           }
           else
           {
               toFireBaseKeyParameter.Value = toFireBaseKey;
           }

           var deviceIdParameter = new SqlParameter("DeviceId", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(deviceId))
           {
               deviceIdParameter.IsNullable = true;
               deviceIdParameter.Value = DBNull.Value;
           }
           else
           {
               deviceIdParameter.Value = deviceId;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUserFireBaseDetails @CentralUserId, @ToFireBaseKey, @DeviceId, @UpdatedBy, @ErrorCode OUT", centralUserIdParameter, toFireBaseKeyParameter, deviceIdParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_SaveUserFireBaseToken(Nullable<Int64> centralUserId, string userFireBaseKey, string updatedBy, ObjectParameter errorCode)
        {

            var centralUserIdParameter = centralUserId.HasValue ?
                new SqlParameter("CentralUserId", centralUserId) :
                new SqlParameter("CentralUserId", SqlDbType.BigInt);

           var userFireBaseKeyParameter = new SqlParameter("UserFireBaseKey", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userFireBaseKey))
           {
               userFireBaseKeyParameter.IsNullable = true;
               userFireBaseKeyParameter.Value = DBNull.Value;
           }
           else
           {
               userFireBaseKeyParameter.Value = userFireBaseKey;
           }

           var updatedByParameter = new SqlParameter("UpdatedBy", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(updatedBy))
           {
               updatedByParameter.IsNullable = true;
               updatedByParameter.Value = DBNull.Value;
           }
           else
           {
               updatedByParameter.Value = updatedBy;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_SaveUserFireBaseToken @CentralUserId, @UserFireBaseKey, @UpdatedBy, @ErrorCode OUT", centralUserIdParameter, userFireBaseKeyParameter, updatedByParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_ValidateCentralUserAuthToken(string userAuthToken, string appCode, string centralUserId, ObjectParameter errorCode)
        {

           var userAuthTokenParameter = new SqlParameter("UserAuthToken", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userAuthToken))
           {
               userAuthTokenParameter.IsNullable = true;
               userAuthTokenParameter.Value = DBNull.Value;
           }
           else
           {
               userAuthTokenParameter.Value = userAuthToken;
           }

           var appCodeParameter = new SqlParameter("AppCode", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(appCode))
           {
               appCodeParameter.IsNullable = true;
               appCodeParameter.Value = DBNull.Value;
           }
           else
           {
               appCodeParameter.Value = appCode;
           }

           var centralUserIdParameter = new SqlParameter("CentralUserId", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(centralUserId))
           {
               centralUserIdParameter.IsNullable = true;
               centralUserIdParameter.Value = DBNull.Value;
           }
           else
           {
               centralUserIdParameter.Value = centralUserId;
           }

           var errorCodeParameter = new SqlParameter("ErrorCode", SqlDbType.Int);
               errorCodeParameter.Direction = System.Data.ParameterDirection.Output;
               errorCodeParameter.Value = errorCode != null ? errorCode.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_ValidateCentralUserAuthToken @UserAuthToken, @AppCode, @CentralUserId, @ErrorCode OUT", userAuthTokenParameter, appCodeParameter, centralUserIdParameter, errorCodeParameter);

            errorCode.Value = errorCodeParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_ValidateCentralUserCredentials(string userMobileNumber, string userPassword, ObjectParameter centralUserId)
        {

           var userMobileNumberParameter = new SqlParameter("UserMobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userMobileNumber))
           {
               userMobileNumberParameter.IsNullable = true;
               userMobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               userMobileNumberParameter.Value = userMobileNumber;
           }

           var userPasswordParameter = new SqlParameter("UserPassword", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userPassword))
           {
               userPasswordParameter.IsNullable = true;
               userPasswordParameter.Value = DBNull.Value;
           }
           else
           {
               userPasswordParameter.Value = userPassword;
           }

           var centralUserIdParameter = new SqlParameter("CentralUserId", SqlDbType.BigInt);
               centralUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               centralUserIdParameter.Value = centralUserId != null ? centralUserId.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_ValidateCentralUserCredentials @UserMobileNumber, @UserPassword, @CentralUserId OUT", userMobileNumberParameter, userPasswordParameter, centralUserIdParameter);

            centralUserId.Value = centralUserIdParameter.Value;

            return retVal;

        }
        public virtual int SP_DGC_ValidateUser_GetUserSubScriptionDetails(string userMobileNumber, string userPassword, string googleFireBaseToken, string userAccessDevice, string isWebCalling, ObjectParameter centralUserId, ObjectParameter subscriptionId, ObjectParameter subscriptionCode, ObjectParameter userAuthToken)
        {

           var userMobileNumberParameter = new SqlParameter("UserMobileNumber", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userMobileNumber))
           {
               userMobileNumberParameter.IsNullable = true;
               userMobileNumberParameter.Value = DBNull.Value;
           }
           else
           {
               userMobileNumberParameter.Value = userMobileNumber;
           }

           var userPasswordParameter = new SqlParameter("UserPassword", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userPassword))
           {
               userPasswordParameter.IsNullable = true;
               userPasswordParameter.Value = DBNull.Value;
           }
           else
           {
               userPasswordParameter.Value = userPassword;
           }

           var googleFireBaseTokenParameter = new SqlParameter("GoogleFireBaseToken", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(googleFireBaseToken))
           {
               googleFireBaseTokenParameter.IsNullable = true;
               googleFireBaseTokenParameter.Value = DBNull.Value;
           }
           else
           {
               googleFireBaseTokenParameter.Value = googleFireBaseToken;
           }

           var userAccessDeviceParameter = new SqlParameter("UserAccessDevice", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(userAccessDevice))
           {
               userAccessDeviceParameter.IsNullable = true;
               userAccessDeviceParameter.Value = DBNull.Value;
           }
           else
           {
               userAccessDeviceParameter.Value = userAccessDevice;
           }

           var isWebCallingParameter = new SqlParameter("IsWebCalling", SqlDbType.VarChar, 500);
           if (string.IsNullOrWhiteSpace(isWebCalling))
           {
               isWebCallingParameter.IsNullable = true;
               isWebCallingParameter.Value = DBNull.Value;
           }
           else
           {
               isWebCallingParameter.Value = isWebCalling;
           }

           var centralUserIdParameter = new SqlParameter("CentralUserId", SqlDbType.BigInt);
               centralUserIdParameter.Direction = System.Data.ParameterDirection.Output;
               centralUserIdParameter.Value = centralUserId != null ? centralUserId.Value : null;

           var subscriptionIdParameter = new SqlParameter("SubscriptionId", SqlDbType.BigInt);
               subscriptionIdParameter.Direction = System.Data.ParameterDirection.Output;
               subscriptionIdParameter.Value = subscriptionId != null ? subscriptionId.Value : null;

           var subscriptionCodeParameter = new SqlParameter("SubscriptionCode", SqlDbType.VarChar, 500);
               subscriptionCodeParameter.Direction = System.Data.ParameterDirection.Output;
               subscriptionCodeParameter.Value = subscriptionCode != null ? subscriptionCode.Value : null;

           var userAuthTokenParameter = new SqlParameter("UserAuthToken", SqlDbType.VarChar, 500);
               userAuthTokenParameter.Direction = System.Data.ParameterDirection.Output;
               userAuthTokenParameter.Value = userAuthToken != null ? userAuthToken.Value : null;


            var retVal = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreCommand("SP_DGC_ValidateUser_GetUserSubScriptionDetails @UserMobileNumber, @UserPassword, @GoogleFireBaseToken, @UserAccessDevice, @IsWebCalling, @CentralUserId OUT, @SubscriptionId OUT, @SubscriptionCode OUT, @UserAuthToken OUT", userMobileNumberParameter, userPasswordParameter, googleFireBaseTokenParameter, userAccessDeviceParameter, isWebCallingParameter, centralUserIdParameter, subscriptionIdParameter, subscriptionCodeParameter, userAuthTokenParameter);

            centralUserId.Value = centralUserIdParameter.Value;
            subscriptionId.Value = subscriptionIdParameter.Value;
            subscriptionCode.Value = subscriptionCodeParameter.Value;
            userAuthToken.Value = userAuthTokenParameter.Value;

            return retVal;

        }
    }
}
